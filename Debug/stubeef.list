
stubeef.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006334  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800650c  0800650c  0000750c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800654c  0800654c  00008020  2**0
                  CONTENTS
  4 .ARM          00000008  0800654c  0800654c  0000754c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006554  08006554  00008020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006554  08006554  00007554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006558  08006558  00007558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800655c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000020  0800657c  00008020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  0800657c  000082dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015dcb  00000000  00000000  00008050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000286d  00000000  00000000  0001de1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  00020688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f39  00000000  00000000  000219d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027643  00000000  00000000  00022911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e69  00000000  00000000  00049f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fffa0  00000000  00000000  00061dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161d5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005518  00000000  00000000  00161da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a7  00000000  00000000  001672b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080064f4 	.word	0x080064f4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	080064f4 	.word	0x080064f4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b96a 	b.w	8000ea0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	460c      	mov	r4, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14e      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	458c      	cmp	ip, r1
 8000bf4:	4686      	mov	lr, r0
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	d962      	bls.n	8000cc2 <__udivmoddi4+0xde>
 8000bfc:	b14a      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	4091      	lsls	r1, r2
 8000c04:	fa20 f303 	lsr.w	r3, r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f f68c 	uxth.w	r6, ip
 8000c1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c22:	fb07 1114 	mls	r1, r7, r4, r1
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb04 f106 	mul.w	r1, r4, r6
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3a:	f080 8112 	bcs.w	8000e62 <__udivmoddi4+0x27e>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 810f 	bls.w	8000e62 <__udivmoddi4+0x27e>
 8000c44:	3c02      	subs	r4, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a59      	subs	r1, r3, r1
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c52:	fb07 1110 	mls	r1, r7, r0, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb00 f606 	mul.w	r6, r0, r6
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x94>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6a:	f080 80fc 	bcs.w	8000e66 <__udivmoddi4+0x282>
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	f240 80f9 	bls.w	8000e66 <__udivmoddi4+0x282>
 8000c74:	4463      	add	r3, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	1b9b      	subs	r3, r3, r6
 8000c7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa6>
 8000c82:	40d3      	lsrs	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xba>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb4>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x150>
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xcc>
 8000caa:	4290      	cmp	r0, r2
 8000cac:	f0c0 80f0 	bcc.w	8000e90 <__udivmoddi4+0x2ac>
 8000cb0:	1a86      	subs	r6, r0, r2
 8000cb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d0e6      	beq.n	8000c8a <__udivmoddi4+0xa6>
 8000cbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc0:	e7e3      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x204>
 8000cc8:	eba1 040c 	sub.w	r4, r1, ip
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa1f f78c 	uxth.w	r7, ip
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cde:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb07 f006 	mul.w	r0, r7, r6
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x11c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x11a>
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cfe:	4626      	mov	r6, r4
 8000d00:	1a1c      	subs	r4, r3, r0
 8000d02:	fa1f f38e 	uxth.w	r3, lr
 8000d06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	429f      	cmp	r7, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x148>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x146>
 8000d24:	429f      	cmp	r7, r3
 8000d26:	f200 80b0 	bhi.w	8000e8a <__udivmoddi4+0x2a6>
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	1bdb      	subs	r3, r3, r7
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x9c>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d44:	fa04 f301 	lsl.w	r3, r4, r1
 8000d48:	ea43 030c 	orr.w	r3, r3, ip
 8000d4c:	40f4      	lsrs	r4, r6
 8000d4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d52:	0c38      	lsrs	r0, r7, #16
 8000d54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d58:	fbb4 fef0 	udiv	lr, r4, r0
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fb00 441e 	mls	r4, r0, lr, r4
 8000d64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d68:	fb0e f90c 	mul.w	r9, lr, ip
 8000d6c:	45a1      	cmp	r9, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x1a6>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7a:	f080 8084 	bcs.w	8000e86 <__udivmoddi4+0x2a2>
 8000d7e:	45a1      	cmp	r9, r4
 8000d80:	f240 8081 	bls.w	8000e86 <__udivmoddi4+0x2a2>
 8000d84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	eba4 0409 	sub.w	r4, r4, r9
 8000d8e:	fa1f f983 	uxth.w	r9, r3
 8000d92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d96:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1d2>
 8000da6:	193c      	adds	r4, r7, r4
 8000da8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dac:	d267      	bcs.n	8000e7e <__udivmoddi4+0x29a>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d965      	bls.n	8000e7e <__udivmoddi4+0x29a>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dba:	fba0 9302 	umull	r9, r3, r0, r2
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	429c      	cmp	r4, r3
 8000dc4:	46ce      	mov	lr, r9
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	d351      	bcc.n	8000e6e <__udivmoddi4+0x28a>
 8000dca:	d04e      	beq.n	8000e6a <__udivmoddi4+0x286>
 8000dcc:	b155      	cbz	r5, 8000de4 <__udivmoddi4+0x200>
 8000dce:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	40cb      	lsrs	r3, r1
 8000ddc:	431e      	orrs	r6, r3
 8000dde:	40cc      	lsrs	r4, r1
 8000de0:	e9c5 6400 	strd	r6, r4, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	e750      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f103 	lsr.w	r1, r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa24 f303 	lsr.w	r3, r4, r3
 8000df8:	4094      	lsls	r4, r2
 8000dfa:	430c      	orrs	r4, r1
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e16:	fb00 f107 	mul.w	r1, r0, r7
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x24c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e26:	d22c      	bcs.n	8000e82 <__udivmoddi4+0x29e>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d92a      	bls.n	8000e82 <__udivmoddi4+0x29e>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e38:	fb08 3311 	mls	r3, r8, r1, r3
 8000e3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e40:	fb01 f307 	mul.w	r3, r1, r7
 8000e44:	42a3      	cmp	r3, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x276>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e50:	d213      	bcs.n	8000e7a <__udivmoddi4+0x296>
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	d911      	bls.n	8000e7a <__udivmoddi4+0x296>
 8000e56:	3902      	subs	r1, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	1ae4      	subs	r4, r4, r3
 8000e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e60:	e739      	b.n	8000cd6 <__udivmoddi4+0xf2>
 8000e62:	4604      	mov	r4, r0
 8000e64:	e6f0      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e706      	b.n	8000c78 <__udivmoddi4+0x94>
 8000e6a:	45c8      	cmp	r8, r9
 8000e6c:	d2ae      	bcs.n	8000dcc <__udivmoddi4+0x1e8>
 8000e6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e76:	3801      	subs	r0, #1
 8000e78:	e7a8      	b.n	8000dcc <__udivmoddi4+0x1e8>
 8000e7a:	4631      	mov	r1, r6
 8000e7c:	e7ed      	b.n	8000e5a <__udivmoddi4+0x276>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e799      	b.n	8000db6 <__udivmoddi4+0x1d2>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e7d4      	b.n	8000e30 <__udivmoddi4+0x24c>
 8000e86:	46d6      	mov	lr, sl
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1a6>
 8000e8a:	4463      	add	r3, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e74d      	b.n	8000d2c <__udivmoddi4+0x148>
 8000e90:	4606      	mov	r6, r0
 8000e92:	4623      	mov	r3, r4
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70f      	b.n	8000cb8 <__udivmoddi4+0xd4>
 8000e98:	3e02      	subs	r6, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	e730      	b.n	8000d00 <__udivmoddi4+0x11c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eac:	f001 fa25 	bl	80022fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb0:	f000 f8e0 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb4:	f000 fb3a 	bl	800152c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000eb8:	f000 f968 	bl	800118c <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8000ebc:	f000 f926 	bl	800110c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000ec0:	f000 f9ae 	bl	8001220 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ec4:	f000 fa8e 	bl	80013e4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000ec8:	f000 fa3e 	bl	8001348 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000ecc:	f000 fae0 	bl	8001490 <MX_TIM5_Init>
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
//
//  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
//  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 500);
//pwm setup
	HAL_TIM_Base_Start(&htim1);
 8000ed0:	4854      	ldr	r0, [pc, #336]	@ (8001024 <main+0x180>)
 8000ed2:	f002 ff3d 	bl	8003d50 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4852      	ldr	r0, [pc, #328]	@ (8001024 <main+0x180>)
 8000eda:	f003 f879 	bl	8003fd0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000ede:	4b51      	ldr	r3, [pc, #324]	@ (8001024 <main+0x180>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000ee6:	213c      	movs	r1, #60	@ 0x3c
 8000ee8:	484f      	ldr	r0, [pc, #316]	@ (8001028 <main+0x184>)
 8000eea:	f003 fa29 	bl	8004340 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8000eee:	484f      	ldr	r0, [pc, #316]	@ (800102c <main+0x188>)
 8000ef0:	f002 ff9e 	bl	8003e30 <HAL_TIM_Base_Start_IT>
	upper = 0;
 8000ef4:	494e      	ldr	r1, [pc, #312]	@ (8001030 <main+0x18c>)
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	f04f 0300 	mov.w	r3, #0
 8000efe:	e9c1 2300 	strd	r2, r3, [r1]

	PID_init(&pid_control, pid_p, pid_i, pid_d ,timerange);
 8000f02:	4b4c      	ldr	r3, [pc, #304]	@ (8001034 <main+0x190>)
 8000f04:	edd3 7a00 	vldr	s15, [r3]
 8000f08:	4b4b      	ldr	r3, [pc, #300]	@ (8001038 <main+0x194>)
 8000f0a:	ed93 7a00 	vldr	s14, [r3]
 8000f0e:	4b4b      	ldr	r3, [pc, #300]	@ (800103c <main+0x198>)
 8000f10:	edd3 6a00 	vldr	s13, [r3]
 8000f14:	4b4a      	ldr	r3, [pc, #296]	@ (8001040 <main+0x19c>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	ee06 3a10 	vmov	s12, r3
 8000f1c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8000f20:	eef0 1a46 	vmov.f32	s3, s12
 8000f24:	eeb0 1a66 	vmov.f32	s2, s13
 8000f28:	eef0 0a47 	vmov.f32	s1, s14
 8000f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f30:	4844      	ldr	r0, [pc, #272]	@ (8001044 <main+0x1a0>)
 8000f32:	f000 fe21 	bl	8001b78 <PID_init>

    /* USER CODE BEGIN 3 */

		//Call every 0.1 s
		static uint64_t timestamp = 0;
		int64_t currentTime = Micros();
 8000f36:	f000 fbd7 	bl	80016e8 <Micros>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	e9c7 2300 	strd	r2, r3, [r7]
		ReadLimit();
 8000f42:	f000 fd47 	bl	80019d4 <ReadLimit>
		if (currentTime > timestamp) {
 8000f46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f4a:	493f      	ldr	r1, [pc, #252]	@ (8001048 <main+0x1a4>)
 8000f4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f50:	4290      	cmp	r0, r2
 8000f52:	eb71 0303 	sbcs.w	r3, r1, r3
 8000f56:	d261      	bcs.n	800101c <main+0x178>
			timestamp = currentTime + timerange;	 //us
 8000f58:	4b39      	ldr	r3, [pc, #228]	@ (8001040 <main+0x19c>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	2200      	movs	r2, #0
 8000f60:	461c      	mov	r4, r3
 8000f62:	4615      	mov	r5, r2
 8000f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f68:	eb14 0802 	adds.w	r8, r4, r2
 8000f6c:	eb45 0903 	adc.w	r9, r5, r3
 8000f70:	4642      	mov	r2, r8
 8000f72:	464b      	mov	r3, r9
 8000f74:	4934      	ldr	r1, [pc, #208]	@ (8001048 <main+0x1a4>)
 8000f76:	e9c1 2300 	strd	r2, r3, [r1]
			QEIEncoderPosVel_Update();
 8000f7a:	f000 fbe9 	bl	8001750 <QEIEncoderPosVel_Update>

			velodegree = QEIdata.QEIAngularVelocity;
 8000f7e:	4b33      	ldr	r3, [pc, #204]	@ (800104c <main+0x1a8>)
 8000f80:	6a1b      	ldr	r3, [r3, #32]
 8000f82:	4a33      	ldr	r2, [pc, #204]	@ (8001050 <main+0x1ac>)
 8000f84:	6013      	str	r3, [r2, #0]
			velodegree = (velodegree * 60) / 800;
 8000f86:	4b32      	ldr	r3, [pc, #200]	@ (8001050 <main+0x1ac>)
 8000f88:	edd3 7a00 	vldr	s15, [r3]
 8000f8c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001054 <main+0x1b0>
 8000f90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f94:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8001058 <main+0x1b4>
 8000f98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001050 <main+0x1ac>)
 8000f9e:	edc3 7a00 	vstr	s15, [r3]
			linearspeed = velodegree * 14 / 60.0;
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8001050 <main+0x1ac>)
 8000fa4:	edd3 7a00 	vldr	s15, [r3]
 8000fa8:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 8000fac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fb0:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8001054 <main+0x1b0>
 8000fb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb8:	4b28      	ldr	r3, [pc, #160]	@ (800105c <main+0x1b8>)
 8000fba:	edc3 7a00 	vstr	s15, [r3]

			if (mode == 1) {
 8000fbe:	4b28      	ldr	r3, [pc, #160]	@ (8001060 <main+0x1bc>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d124      	bne.n	8001010 <main+0x16c>
				ReadButton();
 8000fc6:	f000 fcc5 	bl	8001954 <ReadButton>
				if (bt3 == 0) {
 8000fca:	4b26      	ldr	r3, [pc, #152]	@ (8001064 <main+0x1c0>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10a      	bne.n	8000fe8 <main+0x144>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2108      	movs	r1, #8
 8000fd6:	4824      	ldr	r0, [pc, #144]	@ (8001068 <main+0x1c4>)
 8000fd8:	f001 fcaa 	bl	8002930 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 8000fdc:	4b23      	ldr	r3, [pc, #140]	@ (800106c <main+0x1c8>)
 8000fde:	881a      	ldrh	r2, [r3, #0]
 8000fe0:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <main+0x180>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fe6:	e019      	b.n	800101c <main+0x178>
				} else if (bt2 == 0) {
 8000fe8:	4b21      	ldr	r3, [pc, #132]	@ (8001070 <main+0x1cc>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10a      	bne.n	8001006 <main+0x162>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2108      	movs	r1, #8
 8000ff4:	481c      	ldr	r0, [pc, #112]	@ (8001068 <main+0x1c4>)
 8000ff6:	f001 fc9b 	bl	8002930 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800106c <main+0x1c8>)
 8000ffc:	881a      	ldrh	r2, [r3, #0]
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <main+0x180>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	635a      	str	r2, [r3, #52]	@ 0x34
 8001004:	e00a      	b.n	800101c <main+0x178>
				} else {
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001006:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <main+0x180>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2200      	movs	r2, #0
 800100c:	635a      	str	r2, [r3, #52]	@ 0x34
 800100e:	e005      	b.n	800101c <main+0x178>
				}
			} else if (mode == 2) {
 8001010:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <main+0x1bc>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d101      	bne.n	800101c <main+0x178>
				MotorDrive();
 8001018:	f000 fcfa 	bl	8001a10 <MotorDrive>
			}
		}

		ReadLogicConv();
 800101c:	f000 fc68 	bl	80018f0 <ReadLogicConv>
	while (1) {
 8001020:	e789      	b.n	8000f36 <main+0x92>
 8001022:	bf00      	nop
 8001024:	20000124 	.word	0x20000124
 8001028:	200001bc 	.word	0x200001bc
 800102c:	20000208 	.word	0x20000208
 8001030:	20000258 	.word	0x20000258
 8001034:	20000008 	.word	0x20000008
 8001038:	2000000c 	.word	0x2000000c
 800103c:	20000010 	.word	0x20000010
 8001040:	20000000 	.word	0x20000000
 8001044:	200002b0 	.word	0x200002b0
 8001048:	200002c8 	.word	0x200002c8
 800104c:	20000268 	.word	0x20000268
 8001050:	20000264 	.word	0x20000264
 8001054:	42700000 	.word	0x42700000
 8001058:	44480000 	.word	0x44480000
 800105c:	20000260 	.word	0x20000260
 8001060:	20000004 	.word	0x20000004
 8001064:	2000029e 	.word	0x2000029e
 8001068:	48000800 	.word	0x48000800
 800106c:	20000002 	.word	0x20000002
 8001070:	2000029d 	.word	0x2000029d

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b094      	sub	sp, #80	@ 0x50
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 0318 	add.w	r3, r7, #24
 800107e:	2238      	movs	r2, #56	@ 0x38
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f005 fa0a 	bl	800649c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001096:	2000      	movs	r0, #0
 8001098:	f001 fdd2 	bl	8002c40 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800109c:	2302      	movs	r3, #2
 800109e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a6:	2340      	movs	r3, #64	@ 0x40
 80010a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	2302      	movs	r3, #2
 80010ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ae:	2302      	movs	r3, #2
 80010b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010b2:	2304      	movs	r3, #4
 80010b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010b6:	2355      	movs	r3, #85	@ 0x55
 80010b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010be:	2302      	movs	r3, #2
 80010c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c6:	f107 0318 	add.w	r3, r7, #24
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fe6c 	bl	8002da8 <HAL_RCC_OscConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010d6:	f000 fd49 	bl	8001b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010da:	230f      	movs	r3, #15
 80010dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010de:	2303      	movs	r3, #3
 80010e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2104      	movs	r1, #4
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 f96a 	bl	80033cc <HAL_RCC_ClockConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010fe:	f000 fd35 	bl	8001b6c <Error_Handler>
  }
}
 8001102:	bf00      	nop
 8001104:	3750      	adds	r7, #80	@ 0x50
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001112:	4a1c      	ldr	r2, [pc, #112]	@ (8001184 <MX_I2C1_Init+0x78>)
 8001114:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001116:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001118:	4a1b      	ldr	r2, [pc, #108]	@ (8001188 <MX_I2C1_Init+0x7c>)
 800111a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800111c:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <MX_I2C1_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001122:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001124:	2201      	movs	r2, #1
 8001126:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001128:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <MX_I2C1_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <MX_I2C1_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001146:	480e      	ldr	r0, [pc, #56]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001148:	f001 fc47 	bl	80029da <HAL_I2C_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001152:	f000 fd0b 	bl	8001b6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001156:	2100      	movs	r1, #0
 8001158:	4809      	ldr	r0, [pc, #36]	@ (8001180 <MX_I2C1_Init+0x74>)
 800115a:	f001 fcd9 	bl	8002b10 <HAL_I2CEx_ConfigAnalogFilter>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001164:	f000 fd02 	bl	8001b6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001168:	2100      	movs	r1, #0
 800116a:	4805      	ldr	r0, [pc, #20]	@ (8001180 <MX_I2C1_Init+0x74>)
 800116c:	f001 fd1b 	bl	8002ba6 <HAL_I2CEx_ConfigDigitalFilter>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001176:	f000 fcf9 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000003c 	.word	0x2000003c
 8001184:	40005400 	.word	0x40005400
 8001188:	30a0a7fb 	.word	0x30a0a7fb

0800118c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001190:	4b21      	ldr	r3, [pc, #132]	@ (8001218 <MX_LPUART1_UART_Init+0x8c>)
 8001192:	4a22      	ldr	r2, [pc, #136]	@ (800121c <MX_LPUART1_UART_Init+0x90>)
 8001194:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001196:	4b20      	ldr	r3, [pc, #128]	@ (8001218 <MX_LPUART1_UART_Init+0x8c>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <MX_LPUART1_UART_Init+0x8c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001218 <MX_LPUART1_UART_Init+0x8c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <MX_LPUART1_UART_Init+0x8c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <MX_LPUART1_UART_Init+0x8c>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <MX_LPUART1_UART_Init+0x8c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011bc:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <MX_LPUART1_UART_Init+0x8c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <MX_LPUART1_UART_Init+0x8c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c8:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <MX_LPUART1_UART_Init+0x8c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011ce:	4812      	ldr	r0, [pc, #72]	@ (8001218 <MX_LPUART1_UART_Init+0x8c>)
 80011d0:	f004 faf6 	bl	80057c0 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80011da:	f000 fcc7 	bl	8001b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011de:	2100      	movs	r1, #0
 80011e0:	480d      	ldr	r0, [pc, #52]	@ (8001218 <MX_LPUART1_UART_Init+0x8c>)
 80011e2:	f005 f891 	bl	8006308 <HAL_UARTEx_SetTxFifoThreshold>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80011ec:	f000 fcbe 	bl	8001b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011f0:	2100      	movs	r1, #0
 80011f2:	4809      	ldr	r0, [pc, #36]	@ (8001218 <MX_LPUART1_UART_Init+0x8c>)
 80011f4:	f005 f8c6 	bl	8006384 <HAL_UARTEx_SetRxFifoThreshold>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80011fe:	f000 fcb5 	bl	8001b6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	@ (8001218 <MX_LPUART1_UART_Init+0x8c>)
 8001204:	f005 f847 	bl	8006296 <HAL_UARTEx_DisableFifoMode>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800120e:	f000 fcad 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000090 	.word	0x20000090
 800121c:	40008000 	.word	0x40008000

08001220 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b098      	sub	sp, #96	@ 0x60
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001226:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001232:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
 8001242:	615a      	str	r2, [r3, #20]
 8001244:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2234      	movs	r2, #52	@ 0x34
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f005 f925 	bl	800649c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001252:	4b3b      	ldr	r3, [pc, #236]	@ (8001340 <MX_TIM1_Init+0x120>)
 8001254:	4a3b      	ldr	r2, [pc, #236]	@ (8001344 <MX_TIM1_Init+0x124>)
 8001256:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8001258:	4b39      	ldr	r3, [pc, #228]	@ (8001340 <MX_TIM1_Init+0x120>)
 800125a:	22a9      	movs	r2, #169	@ 0xa9
 800125c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b38      	ldr	r3, [pc, #224]	@ (8001340 <MX_TIM1_Init+0x120>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 8001264:	4b36      	ldr	r3, [pc, #216]	@ (8001340 <MX_TIM1_Init+0x120>)
 8001266:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800126a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126c:	4b34      	ldr	r3, [pc, #208]	@ (8001340 <MX_TIM1_Init+0x120>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001272:	4b33      	ldr	r3, [pc, #204]	@ (8001340 <MX_TIM1_Init+0x120>)
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001278:	4b31      	ldr	r3, [pc, #196]	@ (8001340 <MX_TIM1_Init+0x120>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800127e:	4830      	ldr	r0, [pc, #192]	@ (8001340 <MX_TIM1_Init+0x120>)
 8001280:	f002 fe4e 	bl	8003f20 <HAL_TIM_PWM_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800128a:	f000 fc6f 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800129a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800129e:	4619      	mov	r1, r3
 80012a0:	4827      	ldr	r0, [pc, #156]	@ (8001340 <MX_TIM1_Init+0x120>)
 80012a2:	f004 f91d 	bl	80054e0 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012ac:	f000 fc5e 	bl	8001b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b0:	2360      	movs	r3, #96	@ 0x60
 80012b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b8:	2300      	movs	r3, #0
 80012ba:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012bc:	2300      	movs	r3, #0
 80012be:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012d0:	2200      	movs	r2, #0
 80012d2:	4619      	mov	r1, r3
 80012d4:	481a      	ldr	r0, [pc, #104]	@ (8001340 <MX_TIM1_Init+0x120>)
 80012d6:	f003 fa11 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012e0:	f000 fc44 	bl	8001b6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800130a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800130e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001314:	2300      	movs	r3, #0
 8001316:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4619      	mov	r1, r3
 8001320:	4807      	ldr	r0, [pc, #28]	@ (8001340 <MX_TIM1_Init+0x120>)
 8001322:	f004 f973 	bl	800560c <HAL_TIMEx_ConfigBreakDeadTime>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800132c:	f000 fc1e 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001330:	4803      	ldr	r0, [pc, #12]	@ (8001340 <MX_TIM1_Init+0x120>)
 8001332:	f000 ff23 	bl	800217c <HAL_TIM_MspPostInit>

}
 8001336:	bf00      	nop
 8001338:	3760      	adds	r7, #96	@ 0x60
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000124 	.word	0x20000124
 8001344:	40012c00 	.word	0x40012c00

08001348 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001366:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <MX_TIM2_Init+0x98>)
 8001368:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800136c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800136e:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <MX_TIM2_Init+0x98>)
 8001370:	2200      	movs	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <MX_TIM2_Init+0x98>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800137a:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <MX_TIM2_Init+0x98>)
 800137c:	f04f 32ff 	mov.w	r2, #4294967295
 8001380:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001382:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <MX_TIM2_Init+0x98>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <MX_TIM2_Init+0x98>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800138e:	4814      	ldr	r0, [pc, #80]	@ (80013e0 <MX_TIM2_Init+0x98>)
 8001390:	f002 fc86 	bl	8003ca0 <HAL_TIM_Base_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800139a:	f000 fbe7 	bl	8001b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	4619      	mov	r1, r3
 80013aa:	480d      	ldr	r0, [pc, #52]	@ (80013e0 <MX_TIM2_Init+0x98>)
 80013ac:	f003 faba 	bl	8004924 <HAL_TIM_ConfigClockSource>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013b6:	f000 fbd9 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	@ (80013e0 <MX_TIM2_Init+0x98>)
 80013c8:	f004 f88a 	bl	80054e0 <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013d2:	f000 fbcb 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	3720      	adds	r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000170 	.word	0x20000170

080013e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	@ 0x30
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	2224      	movs	r2, #36	@ 0x24
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f005 f852 	bl	800649c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	463b      	mov	r3, r7
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001402:	4b21      	ldr	r3, [pc, #132]	@ (8001488 <MX_TIM3_Init+0xa4>)
 8001404:	4a21      	ldr	r2, [pc, #132]	@ (800148c <MX_TIM3_Init+0xa8>)
 8001406:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001408:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <MX_TIM3_Init+0xa4>)
 800140a:	2200      	movs	r2, #0
 800140c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140e:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <MX_TIM3_Init+0xa4>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64799;
 8001414:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <MX_TIM3_Init+0xa4>)
 8001416:	f64f 521f 	movw	r2, #64799	@ 0xfd1f
 800141a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141c:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <MX_TIM3_Init+0xa4>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001422:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <MX_TIM3_Init+0xa4>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001428:	2303      	movs	r3, #3
 800142a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001430:	2301      	movs	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001440:	2301      	movs	r3, #1
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	4619      	mov	r1, r3
 8001452:	480d      	ldr	r0, [pc, #52]	@ (8001488 <MX_TIM3_Init+0xa4>)
 8001454:	f002 fece 	bl	80041f4 <HAL_TIM_Encoder_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800145e:	f000 fb85 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800146a:	463b      	mov	r3, r7
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	@ (8001488 <MX_TIM3_Init+0xa4>)
 8001470:	f004 f836 	bl	80054e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800147a:	f000 fb77 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	3730      	adds	r7, #48	@ 0x30
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200001bc 	.word	0x200001bc
 800148c:	40000400 	.word	0x40000400

08001490 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001524 <MX_TIM5_Init+0x94>)
 80014b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001528 <MX_TIM5_Init+0x98>)
 80014b2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170-1;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <MX_TIM5_Init+0x94>)
 80014b6:	22a9      	movs	r2, #169	@ 0xa9
 80014b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <MX_TIM5_Init+0x94>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80014c0:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <MX_TIM5_Init+0x94>)
 80014c2:	f04f 32ff 	mov.w	r2, #4294967295
 80014c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c8:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <MX_TIM5_Init+0x94>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <MX_TIM5_Init+0x94>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014d4:	4813      	ldr	r0, [pc, #76]	@ (8001524 <MX_TIM5_Init+0x94>)
 80014d6:	f002 fbe3 	bl	8003ca0 <HAL_TIM_Base_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80014e0:	f000 fb44 	bl	8001b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014ea:	f107 0310 	add.w	r3, r7, #16
 80014ee:	4619      	mov	r1, r3
 80014f0:	480c      	ldr	r0, [pc, #48]	@ (8001524 <MX_TIM5_Init+0x94>)
 80014f2:	f003 fa17 	bl	8004924 <HAL_TIM_ConfigClockSource>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80014fc:	f000 fb36 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	4619      	mov	r1, r3
 800150c:	4805      	ldr	r0, [pc, #20]	@ (8001524 <MX_TIM5_Init+0x94>)
 800150e:	f003 ffe7 	bl	80054e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001518:	f000 fb28 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000208 	.word	0x20000208
 8001528:	40000c00 	.word	0x40000c00

0800152c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	@ 0x28
 8001530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	4b57      	ldr	r3, [pc, #348]	@ (80016a0 <MX_GPIO_Init+0x174>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	4a56      	ldr	r2, [pc, #344]	@ (80016a0 <MX_GPIO_Init+0x174>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154e:	4b54      	ldr	r3, [pc, #336]	@ (80016a0 <MX_GPIO_Init+0x174>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800155a:	4b51      	ldr	r3, [pc, #324]	@ (80016a0 <MX_GPIO_Init+0x174>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	4a50      	ldr	r2, [pc, #320]	@ (80016a0 <MX_GPIO_Init+0x174>)
 8001560:	f043 0320 	orr.w	r3, r3, #32
 8001564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001566:	4b4e      	ldr	r3, [pc, #312]	@ (80016a0 <MX_GPIO_Init+0x174>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	f003 0320 	and.w	r3, r3, #32
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b4b      	ldr	r3, [pc, #300]	@ (80016a0 <MX_GPIO_Init+0x174>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a4a      	ldr	r2, [pc, #296]	@ (80016a0 <MX_GPIO_Init+0x174>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b48      	ldr	r3, [pc, #288]	@ (80016a0 <MX_GPIO_Init+0x174>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	4b45      	ldr	r3, [pc, #276]	@ (80016a0 <MX_GPIO_Init+0x174>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	4a44      	ldr	r2, [pc, #272]	@ (80016a0 <MX_GPIO_Init+0x174>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001596:	4b42      	ldr	r3, [pc, #264]	@ (80016a0 <MX_GPIO_Init+0x174>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Relay1_Pin|DIROUT_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	210a      	movs	r1, #10
 80015a6:	483f      	ldr	r0, [pc, #252]	@ (80016a4 <MX_GPIO_Init+0x178>)
 80015a8:	f001 f9c2 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2120      	movs	r1, #32
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b4:	f001 f9bc 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay2_Pin|Relay3_Pin|Relay4_Pin, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f240 2106 	movw	r1, #518	@ 0x206
 80015be:	483a      	ldr	r0, [pc, #232]	@ (80016a8 <MX_GPIO_Init+0x17c>)
 80015c0:	f001 f9b6 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4832      	ldr	r0, [pc, #200]	@ (80016a4 <MX_GPIO_Init+0x178>)
 80015dc:	f001 f80e 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin DIROUT_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|DIROUT_Pin;
 80015e0:	230a      	movs	r3, #10
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	482b      	ldr	r0, [pc, #172]	@ (80016a4 <MX_GPIO_Init+0x178>)
 80015f8:	f001 f800 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LogicCon1_Pin LogicCon2_Pin LogicCon3_Pin BT3_Pin
                           BT4_Pin BT5_Pin */
  GPIO_InitStruct.Pin = LogicCon1_Pin|LogicCon2_Pin|LogicCon3_Pin|BT3_Pin
 80015fc:	f240 7313 	movw	r3, #1811	@ 0x713
 8001600:	617b      	str	r3, [r7, #20]
                          |BT4_Pin|BT5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001606:	2301      	movs	r3, #1
 8001608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001614:	f000 fff2 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001618:	2320      	movs	r3, #32
 800161a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001632:	f000 ffe3 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LogicCon4_Pin LimitBottom_Pin */
  GPIO_InitStruct.Pin = LogicCon4_Pin|LimitBottom_Pin;
 8001636:	2341      	movs	r3, #65	@ 0x41
 8001638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163e:	2301      	movs	r3, #1
 8001640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	4817      	ldr	r0, [pc, #92]	@ (80016a8 <MX_GPIO_Init+0x17c>)
 800164a:	f000 ffd7 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay2_Pin Relay3_Pin Relay4_Pin */
  GPIO_InitStruct.Pin = Relay2_Pin|Relay3_Pin|Relay4_Pin;
 800164e:	f240 2306 	movw	r3, #518	@ 0x206
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4810      	ldr	r0, [pc, #64]	@ (80016a8 <MX_GPIO_Init+0x17c>)
 8001668:	f000 ffc8 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LimitTop_Pin BT1_Pin BT2_Pin */
  GPIO_InitStruct.Pin = LimitTop_Pin|BT1_Pin|BT2_Pin;
 800166c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001676:	2301      	movs	r3, #1
 8001678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	4808      	ldr	r0, [pc, #32]	@ (80016a4 <MX_GPIO_Init+0x178>)
 8001682:	f000 ffbb 	bl	80025fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	2028      	movs	r0, #40	@ 0x28
 800168c:	f000 ff81 	bl	8002592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001690:	2028      	movs	r0, #40	@ 0x28
 8001692:	f000 ff98 	bl	80025c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	@ 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000
 80016a4:	48000800 	.word	0x48000800
 80016a8:	48000400 	.word	0x48000400

080016ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016ac:	b5b0      	push	{r4, r5, r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a0a      	ldr	r2, [pc, #40]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d10d      	bne.n	80016d8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		upper += 1;
 80016bc:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	1c54      	adds	r4, r2, #1
 80016c4:	f143 0500 	adc.w	r5, r3, #0
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80016ca:	e9c3 4500 	strd	r4, r5, [r3]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80016ce:	2120      	movs	r1, #32
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d4:	f001 f944 	bl	8002960 <HAL_GPIO_TogglePin>
	}
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bdb0      	pop	{r4, r5, r7, pc}
 80016e0:	20000208 	.word	0x20000208
 80016e4:	20000258 	.word	0x20000258

080016e8 <Micros>:

uint64_t Micros() {
 80016e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80016ec:	b084      	sub	sp, #16
 80016ee:	af00      	add	r7, sp, #0
//	static uint32_t timestamp = 0;
	uint32_t lower = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
	uint64_t time = 0;
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9c7 2300 	strd	r2, r3, [r7]
	lower = __HAL_TIM_GET_COUNTER(&htim5);
 8001700:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <Micros+0x5c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001706:	60fb      	str	r3, [r7, #12]
	time = (upper << 32) | lower;
 8001708:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <Micros+0x60>)
 800170a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	4643      	mov	r3, r8
 8001718:	2200      	movs	r2, #0
 800171a:	68fe      	ldr	r6, [r7, #12]
 800171c:	f04f 0c00 	mov.w	ip, #0
 8001720:	4630      	mov	r0, r6
 8001722:	4661      	mov	r1, ip
 8001724:	ea42 0400 	orr.w	r4, r2, r0
 8001728:	ea43 0501 	orr.w	r5, r3, r1
 800172c:	e9c7 4500 	strd	r4, r5, [r7]
	return time;
 8001730:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000208 	.word	0x20000208
 8001748:	20000258 	.word	0x20000258
 800174c:	00000000 	.word	0x00000000

08001750 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update() {
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = Micros();
 8001756:	f7ff ffc7 	bl	80016e8 <Micros>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	495e      	ldr	r1, [pc, #376]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 8001760:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8001764:	4b5d      	ldr	r3, [pc, #372]	@ (80018dc <QEIEncoderPosVel_Update+0x18c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176a:	4a5b      	ldr	r2, [pc, #364]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 800176c:	6013      	str	r3, [r2, #0]
	//Position 1 turn calculation
	QEIdata.QEIPostion_1turn[NEW] = QEIdata.Position[NEW] % 800;
 800176e:	4b5a      	ldr	r3, [pc, #360]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4b5b      	ldr	r3, [pc, #364]	@ (80018e0 <QEIEncoderPosVel_Update+0x190>)
 8001774:	fba3 1302 	umull	r1, r3, r3, r2
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800177e:	fb01 f303 	mul.w	r3, r1, r3
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	ee07 3a90 	vmov	s15, r3
 8001788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800178c:	4b52      	ldr	r3, [pc, #328]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 800178e:	edc3 7a06 	vstr	s15, [r3, #24]
	QEIdata.Angle = QEIdata.QEIPostion_1turn[NEW] * 360 / 800;
 8001792:	4b51      	ldr	r3, [pc, #324]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 8001794:	edd3 7a06 	vldr	s15, [r3, #24]
 8001798:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80018e4 <QEIEncoderPosVel_Update+0x194>
 800179c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017a0:	eddf 6a51 	vldr	s13, [pc, #324]	@ 80018e8 <QEIEncoderPosVel_Update+0x198>
 80017a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a8:	4b4b      	ldr	r3, [pc, #300]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 80017aa:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 80017ae:	4b4a      	ldr	r3, [pc, #296]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b49      	ldr	r3, [pc, #292]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	60fb      	str	r3, [r7, #12]
	int32_t diff1turn = QEIdata.QEIPostion_1turn[NEW] - QEIdata.QEIPostion_1turn[OLD];
 80017ba:	4b47      	ldr	r3, [pc, #284]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 80017bc:	ed93 7a06 	vldr	s14, [r3, #24]
 80017c0:	4b45      	ldr	r3, [pc, #276]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 80017c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80017c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ce:	ee17 3a90 	vmov	r3, s15
 80017d2:	60bb      	str	r3, [r7, #8]
	//Handle Warp around
	if (diffPosition > 32400) {
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f647 6290 	movw	r2, #32400	@ 0x7e90
 80017da:	4293      	cmp	r3, r2
 80017dc:	dd04      	ble.n	80017e8 <QEIEncoderPosVel_Update+0x98>
		diffPosition -= 64800;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f5a3 437d 	sub.w	r3, r3, #64768	@ 0xfd00
 80017e4:	3b20      	subs	r3, #32
 80017e6:	60fb      	str	r3, [r7, #12]
	}
	if (diffPosition < -32400) {
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4a40      	ldr	r2, [pc, #256]	@ (80018ec <QEIEncoderPosVel_Update+0x19c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	da04      	bge.n	80017fa <QEIEncoderPosVel_Update+0xaa>
		diffPosition += 64800;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f503 437d 	add.w	r3, r3, #64768	@ 0xfd00
 80017f6:	3320      	adds	r3, #32
 80017f8:	60fb      	str	r3, [r7, #12]
	}
	//Calculate Linear Position in mm unit
	if (diff1turn > 400) {
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001800:	dd09      	ble.n	8001816 <QEIEncoderPosVel_Update+0xc6>
		QEIdata.QEIRound -= 1;
 8001802:	4b35      	ldr	r3, [pc, #212]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 8001804:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001808:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800180c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001810:	4b31      	ldr	r3, [pc, #196]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 8001812:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}
	if (diff1turn < -400) {
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f513 7fc8 	cmn.w	r3, #400	@ 0x190
 800181c:	da09      	bge.n	8001832 <QEIEncoderPosVel_Update+0xe2>
		QEIdata.QEIRound += 1;
 800181e:	4b2e      	ldr	r3, [pc, #184]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 8001820:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001824:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001828:	ee77 7a87 	vadd.f32	s15, s15, s14
 800182c:	4b2a      	ldr	r3, [pc, #168]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 800182e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}
	QEIdata.TotalPos = (QEIdata.QEIRound * 14) + QEIdata.QEIPostion_1turn[NEW] * 14 / 800; //linear pos in mm uint
 8001832:	4b29      	ldr	r3, [pc, #164]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 8001834:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001838:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 800183c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001840:	4b25      	ldr	r3, [pc, #148]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 8001842:	edd3 7a06 	vldr	s15, [r3, #24]
 8001846:	eef2 6a0c 	vmov.f32	s13, #44	@ 0x41600000  14.0
 800184a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800184e:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 80018e8 <QEIEncoderPosVel_Update+0x198>
 8001852:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185a:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 800185c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

			//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW] - QEIdata.TimeStamp[OLD])
 8001860:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 8001862:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001866:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 8001868:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800186c:	1a84      	subs	r4, r0, r2
 800186e:	eb61 0503 	sbc.w	r5, r1, r3
			* 1e-6;
 8001872:	4620      	mov	r0, r4
 8001874:	4629      	mov	r1, r5
 8001876:	f7fe fe55 	bl	8000524 <__aeabi_ul2d>
 800187a:	a315      	add	r3, pc, #84	@ (adr r3, 80018d0 <QEIEncoderPosVel_Update+0x180>)
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	f7fe fe86 	bl	8000590 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
	float diffTime = (QEIdata.TimeStamp[NEW] - QEIdata.TimeStamp[OLD])
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f7ff f942 	bl	8000b14 <__aeabi_d2f>
 8001890:	4603      	mov	r3, r0
 8001892:	607b      	str	r3, [r7, #4]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800189e:	ed97 7a01 	vldr	s14, [r7, #4]
 80018a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018a6:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 80018a8:	edc3 7a08 	vstr	s15, [r3, #32]
	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 80018ac:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a09      	ldr	r2, [pc, #36]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 80018b2:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD] = QEIdata.TimeStamp[NEW];
 80018b4:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 80018b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018ba:	4907      	ldr	r1, [pc, #28]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 80018bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata.QEIPostion_1turn[OLD] = QEIdata.QEIPostion_1turn[NEW];
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <QEIEncoderPosVel_Update+0x188>)
 80018c6:	61d3      	str	r3, [r2, #28]

}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bdb0      	pop	{r4, r5, r7, pc}
 80018d0:	a0b5ed8d 	.word	0xa0b5ed8d
 80018d4:	3eb0c6f7 	.word	0x3eb0c6f7
 80018d8:	20000268 	.word	0x20000268
 80018dc:	200001bc 	.word	0x200001bc
 80018e0:	51eb851f 	.word	0x51eb851f
 80018e4:	43b40000 	.word	0x43b40000
 80018e8:	44480000 	.word	0x44480000
 80018ec:	ffff8170 	.word	0xffff8170

080018f0 <ReadLogicConv>:

void ReadLogicConv() {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	Lo1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); //Lo1
 80018f4:	2101      	movs	r1, #1
 80018f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018fa:	f001 f801 	bl	8002900 <HAL_GPIO_ReadPin>
 80018fe:	4603      	mov	r3, r0
 8001900:	461a      	mov	r2, r3
 8001902:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <ReadLogicConv+0x50>)
 8001904:	701a      	strb	r2, [r3, #0]
	Lo2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1); //Lo2
 8001906:	2102      	movs	r1, #2
 8001908:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800190c:	f000 fff8 	bl	8002900 <HAL_GPIO_ReadPin>
 8001910:	4603      	mov	r3, r0
 8001912:	461a      	mov	r2, r3
 8001914:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <ReadLogicConv+0x54>)
 8001916:	701a      	strb	r2, [r3, #0]
	Lo3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4); //Lo3
 8001918:	2110      	movs	r1, #16
 800191a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800191e:	f000 ffef 	bl	8002900 <HAL_GPIO_ReadPin>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <ReadLogicConv+0x58>)
 8001928:	701a      	strb	r2, [r3, #0]
	Lo4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0); //Lo4
 800192a:	2101      	movs	r1, #1
 800192c:	4807      	ldr	r0, [pc, #28]	@ (800194c <ReadLogicConv+0x5c>)
 800192e:	f000 ffe7 	bl	8002900 <HAL_GPIO_ReadPin>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <ReadLogicConv+0x60>)
 8001938:	701a      	strb	r2, [r3, #0]
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000298 	.word	0x20000298
 8001944:	20000299 	.word	0x20000299
 8001948:	2000029a 	.word	0x2000029a
 800194c:	48000400 	.word	0x48000400
 8001950:	2000029b 	.word	0x2000029b

08001954 <ReadButton>:

void ReadButton() {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	bt1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8); //BT1
 8001958:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800195c:	4817      	ldr	r0, [pc, #92]	@ (80019bc <ReadButton+0x68>)
 800195e:	f000 ffcf 	bl	8002900 <HAL_GPIO_ReadPin>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <ReadButton+0x6c>)
 8001968:	701a      	strb	r2, [r3, #0]
	bt2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9); //BT2
 800196a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800196e:	4813      	ldr	r0, [pc, #76]	@ (80019bc <ReadButton+0x68>)
 8001970:	f000 ffc6 	bl	8002900 <HAL_GPIO_ReadPin>
 8001974:	4603      	mov	r3, r0
 8001976:	461a      	mov	r2, r3
 8001978:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <ReadButton+0x70>)
 800197a:	701a      	strb	r2, [r3, #0]
	bt3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8); //BT3
 800197c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001980:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001984:	f000 ffbc 	bl	8002900 <HAL_GPIO_ReadPin>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <ReadButton+0x74>)
 800198e:	701a      	strb	r2, [r3, #0]
	bt4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9); //BT4
 8001990:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001994:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001998:	f000 ffb2 	bl	8002900 <HAL_GPIO_ReadPin>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <ReadButton+0x78>)
 80019a2:	701a      	strb	r2, [r3, #0]
	bt5 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10); //BT5
 80019a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ac:	f000 ffa8 	bl	8002900 <HAL_GPIO_ReadPin>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <ReadButton+0x7c>)
 80019b6:	701a      	strb	r2, [r3, #0]
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	48000800 	.word	0x48000800
 80019c0:	2000029c 	.word	0x2000029c
 80019c4:	2000029d 	.word	0x2000029d
 80019c8:	2000029e 	.word	0x2000029e
 80019cc:	2000029f 	.word	0x2000029f
 80019d0:	200002a0 	.word	0x200002a0

080019d4 <ReadLimit>:

void ReadLimit() {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	LimitBottom = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7); // LimitTop
 80019d8:	2180      	movs	r1, #128	@ 0x80
 80019da:	4808      	ldr	r0, [pc, #32]	@ (80019fc <ReadLimit+0x28>)
 80019dc:	f000 ff90 	bl	8002900 <HAL_GPIO_ReadPin>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <ReadLimit+0x2c>)
 80019e6:	701a      	strb	r2, [r3, #0]
	LimitTop = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6); // LimitBottom
 80019e8:	2140      	movs	r1, #64	@ 0x40
 80019ea:	4806      	ldr	r0, [pc, #24]	@ (8001a04 <ReadLimit+0x30>)
 80019ec:	f000 ff88 	bl	8002900 <HAL_GPIO_ReadPin>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b04      	ldr	r3, [pc, #16]	@ (8001a08 <ReadLimit+0x34>)
 80019f6:	701a      	strb	r2, [r3, #0]

}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	48000800 	.word	0x48000800
 8001a00:	200002a2 	.word	0x200002a2
 8001a04:	48000400 	.word	0x48000400
 8001a08:	200002a1 	.word	0x200002a1
 8001a0c:	00000000 	.word	0x00000000

08001a10 <MotorDrive>:

void MotorDrive() {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	if((Goal - QEIdata.TotalPos) > 0.2 || (Goal - QEIdata.TotalPos) < -0.2){
 8001a14:	4b4c      	ldr	r3, [pc, #304]	@ (8001b48 <MotorDrive+0x138>)
 8001a16:	ed93 7a00 	vldr	s14, [r3]
 8001a1a:	4b4c      	ldr	r3, [pc, #304]	@ (8001b4c <MotorDrive+0x13c>)
 8001a1c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a24:	ee17 0a90 	vmov	r0, s15
 8001a28:	f7fe fd5a 	bl	80004e0 <__aeabi_f2d>
 8001a2c:	a340      	add	r3, pc, #256	@ (adr r3, 8001b30 <MotorDrive+0x120>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	f7ff f83d 	bl	8000ab0 <__aeabi_dcmpgt>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d114      	bne.n	8001a66 <MotorDrive+0x56>
 8001a3c:	4b42      	ldr	r3, [pc, #264]	@ (8001b48 <MotorDrive+0x138>)
 8001a3e:	ed93 7a00 	vldr	s14, [r3]
 8001a42:	4b42      	ldr	r3, [pc, #264]	@ (8001b4c <MotorDrive+0x13c>)
 8001a44:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4c:	ee17 0a90 	vmov	r0, s15
 8001a50:	f7fe fd46 	bl	80004e0 <__aeabi_f2d>
 8001a54:	a338      	add	r3, pc, #224	@ (adr r3, 8001b38 <MotorDrive+0x128>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	f7ff f80b 	bl	8000a74 <__aeabi_dcmplt>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d100      	bne.n	8001a66 <MotorDrive+0x56>
			Vfeedback = 0.4;
		}
		duty_cycle_pid = Vfeedback * 4000 / 12;
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle_pid);
	}
}
 8001a64:	e061      	b.n	8001b2a <MotorDrive+0x11a>
		Vfeedback = Update_pid(&pid_control, Goal - QEIdata.TotalPos, 8, 9);
 8001a66:	4b38      	ldr	r3, [pc, #224]	@ (8001b48 <MotorDrive+0x138>)
 8001a68:	ed93 7a00 	vldr	s14, [r3]
 8001a6c:	4b37      	ldr	r3, [pc, #220]	@ (8001b4c <MotorDrive+0x13c>)
 8001a6e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a76:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 8001a7a:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 8001a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a82:	4833      	ldr	r0, [pc, #204]	@ (8001b50 <MotorDrive+0x140>)
 8001a84:	f000 f89e 	bl	8001bc4 <Update_pid>
 8001a88:	ee07 0a90 	vmov	s15, r0
 8001a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a90:	4b30      	ldr	r3, [pc, #192]	@ (8001b54 <MotorDrive+0x144>)
 8001a92:	edc3 7a00 	vstr	s15, [r3]
		if (Vfeedback > 0) {
 8001a96:	4b2f      	ldr	r3, [pc, #188]	@ (8001b54 <MotorDrive+0x144>)
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa4:	dd05      	ble.n	8001ab2 <MotorDrive+0xa2>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2108      	movs	r1, #8
 8001aaa:	482b      	ldr	r0, [pc, #172]	@ (8001b58 <MotorDrive+0x148>)
 8001aac:	f000 ff40 	bl	8002930 <HAL_GPIO_WritePin>
 8001ab0:	e00c      	b.n	8001acc <MotorDrive+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2108      	movs	r1, #8
 8001ab6:	4828      	ldr	r0, [pc, #160]	@ (8001b58 <MotorDrive+0x148>)
 8001ab8:	f000 ff3a 	bl	8002930 <HAL_GPIO_WritePin>
			Vfeedback = Vfeedback * (-1);
 8001abc:	4b25      	ldr	r3, [pc, #148]	@ (8001b54 <MotorDrive+0x144>)
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	eef1 7a67 	vneg.f32	s15, s15
 8001ac6:	4b23      	ldr	r3, [pc, #140]	@ (8001b54 <MotorDrive+0x144>)
 8001ac8:	edc3 7a00 	vstr	s15, [r3]
		if(Vfeedback < 0.4 && Vfeedback != 0){
 8001acc:	4b21      	ldr	r3, [pc, #132]	@ (8001b54 <MotorDrive+0x144>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd05 	bl	80004e0 <__aeabi_f2d>
 8001ad6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001b40 <MotorDrive+0x130>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	f7fe ffca 	bl	8000a74 <__aeabi_dcmplt>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00a      	beq.n	8001afc <MotorDrive+0xec>
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b54 <MotorDrive+0x144>)
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af4:	d002      	beq.n	8001afc <MotorDrive+0xec>
			Vfeedback = 0.4;
 8001af6:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <MotorDrive+0x144>)
 8001af8:	4a18      	ldr	r2, [pc, #96]	@ (8001b5c <MotorDrive+0x14c>)
 8001afa:	601a      	str	r2, [r3, #0]
		duty_cycle_pid = Vfeedback * 4000 / 12;
 8001afc:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <MotorDrive+0x144>)
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001b60 <MotorDrive+0x150>
 8001b06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b0a:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8001b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b16:	ee17 3a90 	vmov	r3, s15
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <MotorDrive+0x154>)
 8001b1e:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle_pid);
 8001b20:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <MotorDrive+0x154>)
 8001b22:	881a      	ldrh	r2, [r3, #0]
 8001b24:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <MotorDrive+0x158>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	9999999a 	.word	0x9999999a
 8001b34:	3fc99999 	.word	0x3fc99999
 8001b38:	9999999a 	.word	0x9999999a
 8001b3c:	bfc99999 	.word	0xbfc99999
 8001b40:	9999999a 	.word	0x9999999a
 8001b44:	3fd99999 	.word	0x3fd99999
 8001b48:	200002a8 	.word	0x200002a8
 8001b4c:	20000268 	.word	0x20000268
 8001b50:	200002b0 	.word	0x200002b0
 8001b54:	200002a4 	.word	0x200002a4
 8001b58:	48000800 	.word	0x48000800
 8001b5c:	3ecccccd 	.word	0x3ecccccd
 8001b60:	457a0000 	.word	0x457a0000
 8001b64:	200002ac 	.word	0x200002ac
 8001b68:	20000124 	.word	0x20000124

08001b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b70:	b672      	cpsid	i
}
 8001b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <Error_Handler+0x8>

08001b78 <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float32_t _kp,  float32_t _ki, float32_t _kd, float32_t _sampt){
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6178      	str	r0, [r7, #20]
 8001b80:	ed87 0a04 	vstr	s0, [r7, #16]
 8001b84:	edc7 0a03 	vstr	s1, [r7, #12]
 8001b88:	ed87 1a02 	vstr	s2, [r7, #8]
 8001b8c:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 8001ba8:	6979      	ldr	r1, [r7, #20]
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001bb6:	bf00      	nop
 8001bb8:	371c      	adds	r7, #28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <Update_pid>:
int32_t Update_pid(PID *pid, float32_t error, float32_t pid_sat, float32_t plant_sat) {
 8001bc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bc8:	b08a      	sub	sp, #40	@ 0x28
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bd2:	edc7 0a01 	vstr	s1, [r7, #4]
 8001bd6:	ed87 1a00 	vstr	s2, [r7]
//	static float32_t y_n = 0; // Output[n]
	static float32_t y_n_1 = 0; // Output[n-1]
	float32_t e_n = error; // error[n]
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	61bb      	str	r3, [r7, #24]
	static float32_t e_n_1 = 0; // error[n-1]

	float32_t p_term = e_n * pid -> kp;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ed97 7a06 	vldr	s14, [r7, #24]
 8001be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bec:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t d_term = ((e_n - e_n_1) * pid -> kd) / pid -> sampt;
 8001bf0:	4b96      	ldr	r3, [pc, #600]	@ (8001e4c <Update_pid+0x288>)
 8001bf2:	edd3 7a00 	vldr	s15, [r3]
 8001bf6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c04:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c12:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float32_t i_term = ((pid -> ki * pid -> sampt / 2.0)*(e_n + e_n_1)) + y_n_1;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c26:	ee17 0a90 	vmov	r0, s15
 8001c2a:	f7fe fc59 	bl	80004e0 <__aeabi_f2d>
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c36:	f7fe fdd5 	bl	80007e4 <__aeabi_ddiv>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4690      	mov	r8, r2
 8001c40:	4699      	mov	r9, r3
 8001c42:	4b82      	ldr	r3, [pc, #520]	@ (8001e4c <Update_pid+0x288>)
 8001c44:	ed93 7a00 	vldr	s14, [r3]
 8001c48:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c50:	ee17 0a90 	vmov	r0, s15
 8001c54:	f7fe fc44 	bl	80004e0 <__aeabi_f2d>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4640      	mov	r0, r8
 8001c5e:	4649      	mov	r1, r9
 8001c60:	f7fe fc96 	bl	8000590 <__aeabi_dmul>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4690      	mov	r8, r2
 8001c6a:	4699      	mov	r9, r3
 8001c6c:	4b78      	ldr	r3, [pc, #480]	@ (8001e50 <Update_pid+0x28c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc35 	bl	80004e0 <__aeabi_f2d>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4640      	mov	r0, r8
 8001c7c:	4649      	mov	r1, r9
 8001c7e:	f7fe fad1 	bl	8000224 <__adddf3>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe ff43 	bl	8000b14 <__aeabi_d2f>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	623b      	str	r3, [r7, #32]

	if(pid -> ki == 0){
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca0:	d102      	bne.n	8001ca8 <Update_pid+0xe4>
		i_term = 0;
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
	}
	if(pid -> kd == 0){
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb6:	d102      	bne.n	8001cbe <Update_pid+0xfa>
		d_term = 0;
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	pid -> y_n = p_term + d_term + i_term; // pid output
 8001cbe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cc2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001cc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cca:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd2:	ee17 0a90 	vmov	r0, s15
 8001cd6:	f7fe fc03 	bl	80004e0 <__aeabi_f2d>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	68f9      	ldr	r1, [r7, #12]
 8001ce0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint8_t is_sat = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	77fb      	strb	r3, [r7, #31]
	// check is pid output is saturating
	if(pid -> y_n > pid_sat){
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7fe fbf6 	bl	80004e0 <__aeabi_f2d>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4640      	mov	r0, r8
 8001cfa:	4649      	mov	r1, r9
 8001cfc:	f7fe fed8 	bl	8000ab0 <__aeabi_dcmpgt>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <Update_pid+0x148>
		is_sat = 1;
 8001d06:	2301      	movs	r3, #1
 8001d08:	77fb      	strb	r3, [r7, #31]
 8001d0a:	e016      	b.n	8001d3a <Update_pid+0x176>
	}
	else if(pid -> y_n < -(pid_sat)){
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d16:	eef1 7a67 	vneg.f32	s15, s15
 8001d1a:	ee17 3a90 	vmov	r3, s15
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fbde 	bl	80004e0 <__aeabi_f2d>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4640      	mov	r0, r8
 8001d2a:	4649      	mov	r1, r9
 8001d2c:	f7fe fea2 	bl	8000a74 <__aeabi_dcmplt>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <Update_pid+0x176>
		is_sat = 1;
 8001d36:	2301      	movs	r3, #1
 8001d38:	77fb      	strb	r3, [r7, #31]
	}
	// check is error sign and output sign is equal
	if(e_n * pid -> y_n == fabs(e_n * pid -> y_n)){
 8001d3a:	69b8      	ldr	r0, [r7, #24]
 8001d3c:	f7fe fbd0 	bl	80004e0 <__aeabi_f2d>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d46:	f7fe fc23 	bl	8000590 <__aeabi_dmul>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4690      	mov	r8, r2
 8001d50:	4699      	mov	r9, r3
 8001d52:	69b8      	ldr	r0, [r7, #24]
 8001d54:	f7fe fbc4 	bl	80004e0 <__aeabi_f2d>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d5e:	f7fe fc17 	bl	8000590 <__aeabi_dmul>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4614      	mov	r4, r2
 8001d68:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001d6c:	4622      	mov	r2, r4
 8001d6e:	462b      	mov	r3, r5
 8001d70:	4640      	mov	r0, r8
 8001d72:	4649      	mov	r1, r9
 8001d74:	f7fe fe74 	bl	8000a60 <__aeabi_dcmpeq>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d011      	beq.n	8001da2 <Update_pid+0x1de>
		// if pid output is saturating and error sign and output sign is  i_term = 0;
		if(is_sat == 1){
 8001d7e:	7ffb      	ldrb	r3, [r7, #31]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d10e      	bne.n	8001da2 <Update_pid+0x1de>
			pid -> y_n = p_term + d_term;
 8001d84:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d88:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d90:	ee17 0a90 	vmov	r0, s15
 8001d94:	f7fe fba4 	bl	80004e0 <__aeabi_f2d>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	68f9      	ldr	r1, [r7, #12]
 8001d9e:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
	}
	// Plant saturation
	if(pid -> y_n > plant_sat){
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001da8:	6838      	ldr	r0, [r7, #0]
 8001daa:	f7fe fb99 	bl	80004e0 <__aeabi_f2d>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4620      	mov	r0, r4
 8001db4:	4629      	mov	r1, r5
 8001db6:	f7fe fe7b 	bl	8000ab0 <__aeabi_dcmpgt>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d008      	beq.n	8001dd2 <Update_pid+0x20e>
		pid -> y_n = plant_sat;
 8001dc0:	6838      	ldr	r0, [r7, #0]
 8001dc2:	f7fe fb8d 	bl	80004e0 <__aeabi_f2d>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	68f9      	ldr	r1, [r7, #12]
 8001dcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001dd0:	e022      	b.n	8001e18 <Update_pid+0x254>
	}
	else if(pid -> y_n < -(plant_sat)){
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001dd8:	edd7 7a00 	vldr	s15, [r7]
 8001ddc:	eef1 7a67 	vneg.f32	s15, s15
 8001de0:	ee17 3a90 	vmov	r3, s15
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fb7b 	bl	80004e0 <__aeabi_f2d>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4620      	mov	r0, r4
 8001df0:	4629      	mov	r1, r5
 8001df2:	f7fe fe3f 	bl	8000a74 <__aeabi_dcmplt>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00d      	beq.n	8001e18 <Update_pid+0x254>
		pid -> y_n = (-(plant_sat));
 8001dfc:	edd7 7a00 	vldr	s15, [r7]
 8001e00:	eef1 7a67 	vneg.f32	s15, s15
 8001e04:	ee17 3a90 	vmov	r3, s15
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fb69 	bl	80004e0 <__aeabi_f2d>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	68f9      	ldr	r1, [r7, #12]
 8001e14:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	// Update value
	y_n_1 = pid -> y_n;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	f7fe fe77 	bl	8000b14 <__aeabi_d2f>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4a09      	ldr	r2, [pc, #36]	@ (8001e50 <Update_pid+0x28c>)
 8001e2a:	6013      	str	r3, [r2, #0]
	e_n_1 = e_n;
 8001e2c:	4a07      	ldr	r2, [pc, #28]	@ (8001e4c <Update_pid+0x288>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	6013      	str	r3, [r2, #0]
	return pid -> y_n;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7fe fe42 	bl	8000ac4 <__aeabi_d2iz>
 8001e40:	4603      	mov	r3, r0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3728      	adds	r7, #40	@ 0x28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e4c:	200002d0 	.word	0x200002d0
 8001e50:	200002d4 	.word	0x200002d4

08001e54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e98 <HAL_MspInit+0x44>)
 8001e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e98 <HAL_MspInit+0x44>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e66:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <HAL_MspInit+0x44>)
 8001e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <HAL_MspInit+0x44>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e76:	4a08      	ldr	r2, [pc, #32]	@ (8001e98 <HAL_MspInit+0x44>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_MspInit+0x44>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001e8a:	f000 ff7d 	bl	8002d88 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000

08001e9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b0a0      	sub	sp, #128	@ 0x80
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eb4:	f107 0318 	add.w	r3, r7, #24
 8001eb8:	2254      	movs	r2, #84	@ 0x54
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f004 faed 	bl	800649c <memset>
  if(hi2c->Instance==I2C1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a2d      	ldr	r2, [pc, #180]	@ (8001f7c <HAL_I2C_MspInit+0xe0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d153      	bne.n	8001f74 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ecc:	2340      	movs	r3, #64	@ 0x40
 8001ece:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed4:	f107 0318 	add.w	r3, r7, #24
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f001 fc93 	bl	8003804 <HAL_RCCEx_PeriphCLKConfig>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ee4:	f7ff fe42 	bl	8001b6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	4b25      	ldr	r3, [pc, #148]	@ (8001f80 <HAL_I2C_MspInit+0xe4>)
 8001eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eec:	4a24      	ldr	r2, [pc, #144]	@ (8001f80 <HAL_I2C_MspInit+0xe4>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ef4:	4b22      	ldr	r3, [pc, #136]	@ (8001f80 <HAL_I2C_MspInit+0xe4>)
 8001ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f00:	4b1f      	ldr	r3, [pc, #124]	@ (8001f80 <HAL_I2C_MspInit+0xe4>)
 8001f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f04:	4a1e      	ldr	r2, [pc, #120]	@ (8001f80 <HAL_I2C_MspInit+0xe4>)
 8001f06:	f043 0302 	orr.w	r3, r3, #2
 8001f0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f80 <HAL_I2C_MspInit+0xe4>)
 8001f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f1e:	2312      	movs	r3, #18
 8001f20:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f32:	4619      	mov	r1, r3
 8001f34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f38:	f000 fb60 	bl	80025fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f40:	2312      	movs	r3, #18
 8001f42:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f4c:	2304      	movs	r3, #4
 8001f4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f50:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f54:	4619      	mov	r1, r3
 8001f56:	480b      	ldr	r0, [pc, #44]	@ (8001f84 <HAL_I2C_MspInit+0xe8>)
 8001f58:	f000 fb50 	bl	80025fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f5c:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <HAL_I2C_MspInit+0xe4>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f60:	4a07      	ldr	r2, [pc, #28]	@ (8001f80 <HAL_I2C_MspInit+0xe4>)
 8001f62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f66:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f68:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <HAL_I2C_MspInit+0xe4>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f74:	bf00      	nop
 8001f76:	3780      	adds	r7, #128	@ 0x80
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40005400 	.word	0x40005400
 8001f80:	40021000 	.word	0x40021000
 8001f84:	48000400 	.word	0x48000400

08001f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b09e      	sub	sp, #120	@ 0x78
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	2254      	movs	r2, #84	@ 0x54
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f004 fa77 	bl	800649c <memset>
  if(huart->Instance==LPUART1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8002030 <HAL_UART_MspInit+0xa8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d136      	bne.n	8002026 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001fb8:	2320      	movs	r3, #32
 8001fba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fc0:	f107 0310 	add.w	r3, r7, #16
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f001 fc1d 	bl	8003804 <HAL_RCCEx_PeriphCLKConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fd0:	f7ff fdcc 	bl	8001b6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001fd4:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <HAL_UART_MspInit+0xac>)
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd8:	4a16      	ldr	r2, [pc, #88]	@ (8002034 <HAL_UART_MspInit+0xac>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001fe0:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <HAL_UART_MspInit+0xac>)
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fec:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <HAL_UART_MspInit+0xac>)
 8001fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff0:	4a10      	ldr	r2, [pc, #64]	@ (8002034 <HAL_UART_MspInit+0xac>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8002034 <HAL_UART_MspInit+0xac>)
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002004:	230c      	movs	r3, #12
 8002006:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002014:	230c      	movs	r3, #12
 8002016:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002018:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800201c:	4619      	mov	r1, r3
 800201e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002022:	f000 faeb 	bl	80025fc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002026:	bf00      	nop
 8002028:	3778      	adds	r7, #120	@ 0x78
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40008000 	.word	0x40008000
 8002034:	40021000 	.word	0x40021000

08002038 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <HAL_TIM_PWM_MspInit+0x38>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d10b      	bne.n	8002062 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800204a:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <HAL_TIM_PWM_MspInit+0x3c>)
 800204c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204e:	4a09      	ldr	r2, [pc, #36]	@ (8002074 <HAL_TIM_PWM_MspInit+0x3c>)
 8002050:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002054:	6613      	str	r3, [r2, #96]	@ 0x60
 8002056:	4b07      	ldr	r3, [pc, #28]	@ (8002074 <HAL_TIM_PWM_MspInit+0x3c>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40012c00 	.word	0x40012c00
 8002074:	40021000 	.word	0x40021000

08002078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002088:	d10c      	bne.n	80020a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800208a:	4b15      	ldr	r3, [pc, #84]	@ (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208e:	4a14      	ldr	r2, [pc, #80]	@ (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6593      	str	r3, [r2, #88]	@ 0x58
 8002096:	4b12      	ldr	r3, [pc, #72]	@ (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80020a2:	e018      	b.n	80020d6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0e      	ldr	r2, [pc, #56]	@ (80020e4 <HAL_TIM_Base_MspInit+0x6c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d113      	bne.n	80020d6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020ae:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 80020b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b2:	4a0b      	ldr	r2, [pc, #44]	@ (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 80020b4:	f043 0308 	orr.w	r3, r3, #8
 80020b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ba:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 80020bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2100      	movs	r1, #0
 80020ca:	2032      	movs	r0, #50	@ 0x32
 80020cc:	f000 fa61 	bl	8002592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80020d0:	2032      	movs	r0, #50	@ 0x32
 80020d2:	f000 fa78 	bl	80025c6 <HAL_NVIC_EnableIRQ>
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40000c00 	.word	0x40000c00

080020e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	@ 0x28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1b      	ldr	r2, [pc, #108]	@ (8002174 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d130      	bne.n	800216c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800210a:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <HAL_TIM_Encoder_MspInit+0x90>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210e:	4a1a      	ldr	r2, [pc, #104]	@ (8002178 <HAL_TIM_Encoder_MspInit+0x90>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	6593      	str	r3, [r2, #88]	@ 0x58
 8002116:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <HAL_TIM_Encoder_MspInit+0x90>)
 8002118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <HAL_TIM_Encoder_MspInit+0x90>)
 8002124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002126:	4a14      	ldr	r2, [pc, #80]	@ (8002178 <HAL_TIM_Encoder_MspInit+0x90>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800212e:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <HAL_TIM_Encoder_MspInit+0x90>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_Pin|EncoderB_Pin;
 800213a:	23c0      	movs	r3, #192	@ 0xc0
 800213c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800214a:	2302      	movs	r3, #2
 800214c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	f107 0314 	add.w	r3, r7, #20
 8002152:	4619      	mov	r1, r3
 8002154:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002158:	f000 fa50 	bl	80025fc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800215c:	2200      	movs	r2, #0
 800215e:	2100      	movs	r1, #0
 8002160:	201d      	movs	r0, #29
 8002162:	f000 fa16 	bl	8002592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002166:	201d      	movs	r0, #29
 8002168:	f000 fa2d 	bl	80025c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800216c:	bf00      	nop
 800216e:	3728      	adds	r7, #40	@ 0x28
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40000400 	.word	0x40000400
 8002178:	40021000 	.word	0x40021000

0800217c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a11      	ldr	r2, [pc, #68]	@ (80021e0 <HAL_TIM_MspPostInit+0x64>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d11b      	bne.n	80021d6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800219e:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <HAL_TIM_MspPostInit+0x68>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a2:	4a10      	ldr	r2, [pc, #64]	@ (80021e4 <HAL_TIM_MspPostInit+0x68>)
 80021a4:	f043 0304 	orr.w	r3, r3, #4
 80021a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021aa:	4b0e      	ldr	r3, [pc, #56]	@ (80021e4 <HAL_TIM_MspPostInit+0x68>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWMOUT_Pin;
 80021b6:	2301      	movs	r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80021c6:	2302      	movs	r3, #2
 80021c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMOUT_GPIO_Port, &GPIO_InitStruct);
 80021ca:	f107 030c 	add.w	r3, r7, #12
 80021ce:	4619      	mov	r1, r3
 80021d0:	4805      	ldr	r0, [pc, #20]	@ (80021e8 <HAL_TIM_MspPostInit+0x6c>)
 80021d2:	f000 fa13 	bl	80025fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021d6:	bf00      	nop
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40012c00 	.word	0x40012c00
 80021e4:	40021000 	.word	0x40021000
 80021e8:	48000800 	.word	0x48000800

080021ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80021f0:	bf00      	nop
 80021f2:	e7fd      	b.n	80021f0 <NMI_Handler+0x4>

080021f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <HardFault_Handler+0x4>

080021fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <MemManage_Handler+0x4>

08002204 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <BusFault_Handler+0x4>

0800220c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <UsageFault_Handler+0x4>

08002214 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002242:	f000 f8ad 	bl	80023a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002250:	4802      	ldr	r0, [pc, #8]	@ (800225c <TIM3_IRQHandler+0x10>)
 8002252:	f002 f903 	bl	800445c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200001bc 	.word	0x200001bc

08002260 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002264:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002268:	f000 fb94 	bl	8002994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}

08002270 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002274:	4802      	ldr	r0, [pc, #8]	@ (8002280 <TIM5_IRQHandler+0x10>)
 8002276:	f002 f8f1 	bl	800445c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000208 	.word	0x20000208

08002284 <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */

void SystemInit(void) {
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <SystemInit+0x20>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228e:	4a05      	ldr	r2, [pc, #20]	@ (80022a4 <SystemInit+0x20>)
 8002290:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	/* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022a8:	480d      	ldr	r0, [pc, #52]	@ (80022e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022ac:	f7ff ffea 	bl	8002284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022b0:	480c      	ldr	r0, [pc, #48]	@ (80022e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80022b2:	490d      	ldr	r1, [pc, #52]	@ (80022e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022b4:	4a0d      	ldr	r2, [pc, #52]	@ (80022ec <LoopForever+0xe>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022b8:	e002      	b.n	80022c0 <LoopCopyDataInit>

080022ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022be:	3304      	adds	r3, #4

080022c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c4:	d3f9      	bcc.n	80022ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022c6:	4a0a      	ldr	r2, [pc, #40]	@ (80022f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022c8:	4c0a      	ldr	r4, [pc, #40]	@ (80022f4 <LoopForever+0x16>)
  movs r3, #0
 80022ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022cc:	e001      	b.n	80022d2 <LoopFillZerobss>

080022ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d0:	3204      	adds	r2, #4

080022d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d4:	d3fb      	bcc.n	80022ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022d6:	f004 f8e9 	bl	80064ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022da:	f7fe fde3 	bl	8000ea4 <main>

080022de <LoopForever>:

LoopForever:
    b LoopForever
 80022de:	e7fe      	b.n	80022de <LoopForever>
  ldr   r0, =_estack
 80022e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80022ec:	0800655c 	.word	0x0800655c
  ldr r2, =_sbss
 80022f0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80022f4:	200002dc 	.word	0x200002dc

080022f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022f8:	e7fe      	b.n	80022f8 <ADC1_2_IRQHandler>

080022fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002304:	2003      	movs	r0, #3
 8002306:	f000 f939 	bl	800257c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800230a:	2000      	movs	r0, #0
 800230c:	f000 f80e 	bl	800232c <HAL_InitTick>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	71fb      	strb	r3, [r7, #7]
 800231a:	e001      	b.n	8002320 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800231c:	f7ff fd9a 	bl	8001e54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002320:	79fb      	ldrb	r3, [r7, #7]

}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002338:	4b16      	ldr	r3, [pc, #88]	@ (8002394 <HAL_InitTick+0x68>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d022      	beq.n	8002386 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002340:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <HAL_InitTick+0x6c>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4b13      	ldr	r3, [pc, #76]	@ (8002394 <HAL_InitTick+0x68>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800234c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4618      	mov	r0, r3
 8002356:	f000 f944 	bl	80025e2 <HAL_SYSTICK_Config>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10f      	bne.n	8002380 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b0f      	cmp	r3, #15
 8002364:	d809      	bhi.n	800237a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002366:	2200      	movs	r2, #0
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	f04f 30ff 	mov.w	r0, #4294967295
 800236e:	f000 f910 	bl	8002592 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002372:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <HAL_InitTick+0x70>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	e007      	b.n	800238a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
 800237e:	e004      	b.n	800238a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
 8002384:	e001      	b.n	800238a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	2000001c 	.word	0x2000001c
 8002398:	20000014 	.word	0x20000014
 800239c:	20000018 	.word	0x20000018

080023a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a4:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <HAL_IncTick+0x1c>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <HAL_IncTick+0x20>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4413      	add	r3, r2
 80023ae:	4a03      	ldr	r2, [pc, #12]	@ (80023bc <HAL_IncTick+0x1c>)
 80023b0:	6013      	str	r3, [r2, #0]
}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	200002d8 	.word	0x200002d8
 80023c0:	2000001c 	.word	0x2000001c

080023c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return uwTick;
 80023c8:	4b03      	ldr	r3, [pc, #12]	@ (80023d8 <HAL_GetTick+0x14>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	200002d8 	.word	0x200002d8

080023dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023f8:	4013      	ands	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002404:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800240c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240e:	4a04      	ldr	r2, [pc, #16]	@ (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	60d3      	str	r3, [r2, #12]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002428:	4b04      	ldr	r3, [pc, #16]	@ (800243c <__NVIC_GetPriorityGrouping+0x18>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	f003 0307 	and.w	r3, r3, #7
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	2b00      	cmp	r3, #0
 8002450:	db0b      	blt.n	800246a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	f003 021f 	and.w	r2, r3, #31
 8002458:	4907      	ldr	r1, [pc, #28]	@ (8002478 <__NVIC_EnableIRQ+0x38>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	2001      	movs	r0, #1
 8002462:	fa00 f202 	lsl.w	r2, r0, r2
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000e100 	.word	0xe000e100

0800247c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	db0a      	blt.n	80024a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	490c      	ldr	r1, [pc, #48]	@ (80024c8 <__NVIC_SetPriority+0x4c>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	0112      	lsls	r2, r2, #4
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	440b      	add	r3, r1
 80024a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a4:	e00a      	b.n	80024bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4908      	ldr	r1, [pc, #32]	@ (80024cc <__NVIC_SetPriority+0x50>)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	3b04      	subs	r3, #4
 80024b4:	0112      	lsls	r2, r2, #4
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	440b      	add	r3, r1
 80024ba:	761a      	strb	r2, [r3, #24]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000e100 	.word	0xe000e100
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	@ 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f1c3 0307 	rsb	r3, r3, #7
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	bf28      	it	cs
 80024ee:	2304      	movcs	r3, #4
 80024f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d902      	bls.n	8002500 <NVIC_EncodePriority+0x30>
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3b03      	subs	r3, #3
 80024fe:	e000      	b.n	8002502 <NVIC_EncodePriority+0x32>
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	f04f 32ff 	mov.w	r2, #4294967295
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	401a      	ands	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002518:	f04f 31ff 	mov.w	r1, #4294967295
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	43d9      	mvns	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	4313      	orrs	r3, r2
         );
}
 800252a:	4618      	mov	r0, r3
 800252c:	3724      	adds	r7, #36	@ 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3b01      	subs	r3, #1
 8002544:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002548:	d301      	bcc.n	800254e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254a:	2301      	movs	r3, #1
 800254c:	e00f      	b.n	800256e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800254e:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <SysTick_Config+0x40>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002556:	210f      	movs	r1, #15
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f7ff ff8e 	bl	800247c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002560:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <SysTick_Config+0x40>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002566:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <SysTick_Config+0x40>)
 8002568:	2207      	movs	r2, #7
 800256a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	e000e010 	.word	0xe000e010

0800257c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ff29 	bl	80023dc <__NVIC_SetPriorityGrouping>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025a0:	f7ff ff40 	bl	8002424 <__NVIC_GetPriorityGrouping>
 80025a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	6978      	ldr	r0, [r7, #20]
 80025ac:	f7ff ff90 	bl	80024d0 <NVIC_EncodePriority>
 80025b0:	4602      	mov	r2, r0
 80025b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff5f 	bl	800247c <__NVIC_SetPriority>
}
 80025be:	bf00      	nop
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff33 	bl	8002440 <__NVIC_EnableIRQ>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ffa4 	bl	8002538 <SysTick_Config>
 80025f0:	4603      	mov	r3, r0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800260a:	e15a      	b.n	80028c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	2101      	movs	r1, #1
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	4013      	ands	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 814c 	beq.w	80028bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b01      	cmp	r3, #1
 800262e:	d005      	beq.n	800263c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002638:	2b02      	cmp	r3, #2
 800263a:	d130      	bne.n	800269e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2203      	movs	r2, #3
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002672:	2201      	movs	r2, #1
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	091b      	lsrs	r3, r3, #4
 8002688:	f003 0201 	and.w	r2, r3, #1
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d017      	beq.n	80026da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	2203      	movs	r2, #3
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d123      	bne.n	800272e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	08da      	lsrs	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3208      	adds	r2, #8
 80026ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	220f      	movs	r2, #15
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	691a      	ldr	r2, [r3, #16]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	08da      	lsrs	r2, r3, #3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3208      	adds	r2, #8
 8002728:	6939      	ldr	r1, [r7, #16]
 800272a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	2203      	movs	r2, #3
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4013      	ands	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 0203 	and.w	r2, r3, #3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 80a6 	beq.w	80028bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002770:	4b5b      	ldr	r3, [pc, #364]	@ (80028e0 <HAL_GPIO_Init+0x2e4>)
 8002772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002774:	4a5a      	ldr	r2, [pc, #360]	@ (80028e0 <HAL_GPIO_Init+0x2e4>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6613      	str	r3, [r2, #96]	@ 0x60
 800277c:	4b58      	ldr	r3, [pc, #352]	@ (80028e0 <HAL_GPIO_Init+0x2e4>)
 800277e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002788:	4a56      	ldr	r2, [pc, #344]	@ (80028e4 <HAL_GPIO_Init+0x2e8>)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	089b      	lsrs	r3, r3, #2
 800278e:	3302      	adds	r3, #2
 8002790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002794:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	220f      	movs	r2, #15
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027b2:	d01f      	beq.n	80027f4 <HAL_GPIO_Init+0x1f8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a4c      	ldr	r2, [pc, #304]	@ (80028e8 <HAL_GPIO_Init+0x2ec>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d019      	beq.n	80027f0 <HAL_GPIO_Init+0x1f4>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a4b      	ldr	r2, [pc, #300]	@ (80028ec <HAL_GPIO_Init+0x2f0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d013      	beq.n	80027ec <HAL_GPIO_Init+0x1f0>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a4a      	ldr	r2, [pc, #296]	@ (80028f0 <HAL_GPIO_Init+0x2f4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00d      	beq.n	80027e8 <HAL_GPIO_Init+0x1ec>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a49      	ldr	r2, [pc, #292]	@ (80028f4 <HAL_GPIO_Init+0x2f8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d007      	beq.n	80027e4 <HAL_GPIO_Init+0x1e8>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a48      	ldr	r2, [pc, #288]	@ (80028f8 <HAL_GPIO_Init+0x2fc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d101      	bne.n	80027e0 <HAL_GPIO_Init+0x1e4>
 80027dc:	2305      	movs	r3, #5
 80027de:	e00a      	b.n	80027f6 <HAL_GPIO_Init+0x1fa>
 80027e0:	2306      	movs	r3, #6
 80027e2:	e008      	b.n	80027f6 <HAL_GPIO_Init+0x1fa>
 80027e4:	2304      	movs	r3, #4
 80027e6:	e006      	b.n	80027f6 <HAL_GPIO_Init+0x1fa>
 80027e8:	2303      	movs	r3, #3
 80027ea:	e004      	b.n	80027f6 <HAL_GPIO_Init+0x1fa>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e002      	b.n	80027f6 <HAL_GPIO_Init+0x1fa>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <HAL_GPIO_Init+0x1fa>
 80027f4:	2300      	movs	r3, #0
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	f002 0203 	and.w	r2, r2, #3
 80027fc:	0092      	lsls	r2, r2, #2
 80027fe:	4093      	lsls	r3, r2
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002806:	4937      	ldr	r1, [pc, #220]	@ (80028e4 <HAL_GPIO_Init+0x2e8>)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	3302      	adds	r3, #2
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002814:	4b39      	ldr	r3, [pc, #228]	@ (80028fc <HAL_GPIO_Init+0x300>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	43db      	mvns	r3, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002838:	4a30      	ldr	r2, [pc, #192]	@ (80028fc <HAL_GPIO_Init+0x300>)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800283e:	4b2f      	ldr	r3, [pc, #188]	@ (80028fc <HAL_GPIO_Init+0x300>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002862:	4a26      	ldr	r2, [pc, #152]	@ (80028fc <HAL_GPIO_Init+0x300>)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002868:	4b24      	ldr	r3, [pc, #144]	@ (80028fc <HAL_GPIO_Init+0x300>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	43db      	mvns	r3, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800288c:	4a1b      	ldr	r2, [pc, #108]	@ (80028fc <HAL_GPIO_Init+0x300>)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002892:	4b1a      	ldr	r3, [pc, #104]	@ (80028fc <HAL_GPIO_Init+0x300>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	43db      	mvns	r3, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028b6:	4a11      	ldr	r2, [pc, #68]	@ (80028fc <HAL_GPIO_Init+0x300>)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	3301      	adds	r3, #1
 80028c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f47f ae9d 	bne.w	800260c <HAL_GPIO_Init+0x10>
  }
}
 80028d2:	bf00      	nop
 80028d4:	bf00      	nop
 80028d6:	371c      	adds	r7, #28
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40010000 	.word	0x40010000
 80028e8:	48000400 	.word	0x48000400
 80028ec:	48000800 	.word	0x48000800
 80028f0:	48000c00 	.word	0x48000c00
 80028f4:	48001000 	.word	0x48001000
 80028f8:	48001400 	.word	0x48001400
 80028fc:	40010400 	.word	0x40010400

08002900 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	887b      	ldrh	r3, [r7, #2]
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
 800291c:	e001      	b.n	8002922 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002922:	7bfb      	ldrb	r3, [r7, #15]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
 800293c:	4613      	mov	r3, r2
 800293e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002940:	787b      	ldrb	r3, [r7, #1]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002946:	887a      	ldrh	r2, [r7, #2]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800294c:	e002      	b.n	8002954 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800294e:	887a      	ldrh	r2, [r7, #2]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002972:	887a      	ldrh	r2, [r7, #2]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4013      	ands	r3, r2
 8002978:	041a      	lsls	r2, r3, #16
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	43d9      	mvns	r1, r3
 800297e:	887b      	ldrh	r3, [r7, #2]
 8002980:	400b      	ands	r3, r1
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	619a      	str	r2, [r3, #24]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800299e:	4b08      	ldr	r3, [pc, #32]	@ (80029c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d006      	beq.n	80029b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029aa:	4a05      	ldr	r2, [pc, #20]	@ (80029c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f806 	bl	80029c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40010400 	.word	0x40010400

080029c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e08d      	b.n	8002b08 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d106      	bne.n	8002a06 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff fa4b 	bl	8001e9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2224      	movs	r2, #36	@ 0x24
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0201 	bic.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a2a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a3a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d107      	bne.n	8002a54 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a50:	609a      	str	r2, [r3, #8]
 8002a52:	e006      	b.n	8002a62 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002a60:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d108      	bne.n	8002a7c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	e007      	b.n	8002a8c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a8a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a9e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002aae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69d9      	ldr	r1, [r3, #28]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1a      	ldr	r2, [r3, #32]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d138      	bne.n	8002b98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e032      	b.n	8002b9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2224      	movs	r2, #36	@ 0x24
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0201 	bic.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e000      	b.n	8002b9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b98:	2302      	movs	r3, #2
  }
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b085      	sub	sp, #20
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d139      	bne.n	8002c30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e033      	b.n	8002c32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2224      	movs	r2, #36	@ 0x24
 8002bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0201 	bic.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bf8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e000      	b.n	8002c32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d141      	bne.n	8002cd2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c4e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c5a:	d131      	bne.n	8002cc0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c5c:	4b47      	ldr	r3, [pc, #284]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c62:	4a46      	ldr	r2, [pc, #280]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c6c:	4b43      	ldr	r3, [pc, #268]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c74:	4a41      	ldr	r2, [pc, #260]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c7c:	4b40      	ldr	r3, [pc, #256]	@ (8002d80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2232      	movs	r2, #50	@ 0x32
 8002c82:	fb02 f303 	mul.w	r3, r2, r3
 8002c86:	4a3f      	ldr	r2, [pc, #252]	@ (8002d84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	0c9b      	lsrs	r3, r3, #18
 8002c8e:	3301      	adds	r3, #1
 8002c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c92:	e002      	b.n	8002c9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c9a:	4b38      	ldr	r3, [pc, #224]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ca6:	d102      	bne.n	8002cae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f2      	bne.n	8002c94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cae:	4b33      	ldr	r3, [pc, #204]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cba:	d158      	bne.n	8002d6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e057      	b.n	8002d70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cc6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ccc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002cd0:	e04d      	b.n	8002d6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cd8:	d141      	bne.n	8002d5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cda:	4b28      	ldr	r3, [pc, #160]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ce6:	d131      	bne.n	8002d4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ce8:	4b24      	ldr	r3, [pc, #144]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cee:	4a23      	ldr	r2, [pc, #140]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cf8:	4b20      	ldr	r3, [pc, #128]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d00:	4a1e      	ldr	r2, [pc, #120]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d08:	4b1d      	ldr	r3, [pc, #116]	@ (8002d80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2232      	movs	r2, #50	@ 0x32
 8002d0e:	fb02 f303 	mul.w	r3, r2, r3
 8002d12:	4a1c      	ldr	r2, [pc, #112]	@ (8002d84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d14:	fba2 2303 	umull	r2, r3, r2, r3
 8002d18:	0c9b      	lsrs	r3, r3, #18
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d1e:	e002      	b.n	8002d26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d26:	4b15      	ldr	r3, [pc, #84]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d32:	d102      	bne.n	8002d3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f2      	bne.n	8002d20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d3a:	4b10      	ldr	r3, [pc, #64]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d46:	d112      	bne.n	8002d6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e011      	b.n	8002d70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d52:	4a0a      	ldr	r2, [pc, #40]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d5c:	e007      	b.n	8002d6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d5e:	4b07      	ldr	r3, [pc, #28]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d66:	4a05      	ldr	r2, [pc, #20]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	20000014 	.word	0x20000014
 8002d84:	431bde83 	.word	0x431bde83

08002d88 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d8c:	4b05      	ldr	r3, [pc, #20]	@ (8002da4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4a04      	ldr	r2, [pc, #16]	@ (8002da4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d96:	6093      	str	r3, [r2, #8]
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40007000 	.word	0x40007000

08002da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e2fe      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d075      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc6:	4b97      	ldr	r3, [pc, #604]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dd0:	4b94      	ldr	r3, [pc, #592]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b0c      	cmp	r3, #12
 8002dde:	d102      	bne.n	8002de6 <HAL_RCC_OscConfig+0x3e>
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d002      	beq.n	8002dec <HAL_RCC_OscConfig+0x44>
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d10b      	bne.n	8002e04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dec:	4b8d      	ldr	r3, [pc, #564]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d05b      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x108>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d157      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e2d9      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e0c:	d106      	bne.n	8002e1c <HAL_RCC_OscConfig+0x74>
 8002e0e:	4b85      	ldr	r3, [pc, #532]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a84      	ldr	r2, [pc, #528]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e01d      	b.n	8002e58 <HAL_RCC_OscConfig+0xb0>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCC_OscConfig+0x98>
 8002e26:	4b7f      	ldr	r3, [pc, #508]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a7e      	ldr	r2, [pc, #504]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002e2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	4b7c      	ldr	r3, [pc, #496]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a7b      	ldr	r2, [pc, #492]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e00b      	b.n	8002e58 <HAL_RCC_OscConfig+0xb0>
 8002e40:	4b78      	ldr	r3, [pc, #480]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a77      	ldr	r2, [pc, #476]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b75      	ldr	r3, [pc, #468]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a74      	ldr	r2, [pc, #464]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002e52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d013      	beq.n	8002e88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7ff fab0 	bl	80023c4 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e68:	f7ff faac 	bl	80023c4 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b64      	cmp	r3, #100	@ 0x64
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e29e      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0xc0>
 8002e86:	e014      	b.n	8002eb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7ff fa9c 	bl	80023c4 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e90:	f7ff fa98 	bl	80023c4 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	@ 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e28a      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ea2:	4b60      	ldr	r3, [pc, #384]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0xe8>
 8002eae:	e000      	b.n	8002eb2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d075      	beq.n	8002faa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ebe:	4b59      	ldr	r3, [pc, #356]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
 8002ec6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ec8:	4b56      	ldr	r3, [pc, #344]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2b0c      	cmp	r3, #12
 8002ed6:	d102      	bne.n	8002ede <HAL_RCC_OscConfig+0x136>
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d002      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x13c>
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d11f      	bne.n	8002f24 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ee4:	4b4f      	ldr	r3, [pc, #316]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_OscConfig+0x154>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e25d      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efc:	4b49      	ldr	r3, [pc, #292]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	061b      	lsls	r3, r3, #24
 8002f0a:	4946      	ldr	r1, [pc, #280]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f10:	4b45      	ldr	r3, [pc, #276]	@ (8003028 <HAL_RCC_OscConfig+0x280>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fa09 	bl	800232c <HAL_InitTick>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d043      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e249      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d023      	beq.n	8002f74 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a3c      	ldr	r2, [pc, #240]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7ff fa44 	bl	80023c4 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f40:	f7ff fa40 	bl	80023c4 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e232      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f52:	4b34      	ldr	r3, [pc, #208]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5e:	4b31      	ldr	r3, [pc, #196]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	061b      	lsls	r3, r3, #24
 8002f6c:	492d      	ldr	r1, [pc, #180]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	604b      	str	r3, [r1, #4]
 8002f72:	e01a      	b.n	8002faa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f74:	4b2b      	ldr	r3, [pc, #172]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a2a      	ldr	r2, [pc, #168]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002f7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7ff fa20 	bl	80023c4 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f88:	f7ff fa1c 	bl	80023c4 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e20e      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f9a:	4b22      	ldr	r3, [pc, #136]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x1e0>
 8002fa6:	e000      	b.n	8002faa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d041      	beq.n	800303a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01c      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fbe:	4b19      	ldr	r3, [pc, #100]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fc4:	4a17      	ldr	r2, [pc, #92]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fce:	f7ff f9f9 	bl	80023c4 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd6:	f7ff f9f5 	bl	80023c4 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e1e7      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0ef      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x22e>
 8002ff6:	e020      	b.n	800303a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8002ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ffe:	4a09      	ldr	r2, [pc, #36]	@ (8003024 <HAL_RCC_OscConfig+0x27c>)
 8003000:	f023 0301 	bic.w	r3, r3, #1
 8003004:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7ff f9dc 	bl	80023c4 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800300e:	e00d      	b.n	800302c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003010:	f7ff f9d8 	bl	80023c4 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d906      	bls.n	800302c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1ca      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000
 8003028:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800302c:	4b8c      	ldr	r3, [pc, #560]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 800302e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1ea      	bne.n	8003010 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 80a6 	beq.w	8003194 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003048:	2300      	movs	r3, #0
 800304a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800304c:	4b84      	ldr	r3, [pc, #528]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_OscConfig+0x2b4>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <HAL_RCC_OscConfig+0x2b6>
 800305c:	2300      	movs	r3, #0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00d      	beq.n	800307e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003062:	4b7f      	ldr	r3, [pc, #508]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 8003064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003066:	4a7e      	ldr	r2, [pc, #504]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 8003068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800306c:	6593      	str	r3, [r2, #88]	@ 0x58
 800306e:	4b7c      	ldr	r3, [pc, #496]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 8003070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800307a:	2301      	movs	r3, #1
 800307c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800307e:	4b79      	ldr	r3, [pc, #484]	@ (8003264 <HAL_RCC_OscConfig+0x4bc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003086:	2b00      	cmp	r3, #0
 8003088:	d118      	bne.n	80030bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800308a:	4b76      	ldr	r3, [pc, #472]	@ (8003264 <HAL_RCC_OscConfig+0x4bc>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a75      	ldr	r2, [pc, #468]	@ (8003264 <HAL_RCC_OscConfig+0x4bc>)
 8003090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003096:	f7ff f995 	bl	80023c4 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800309e:	f7ff f991 	bl	80023c4 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e183      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b0:	4b6c      	ldr	r3, [pc, #432]	@ (8003264 <HAL_RCC_OscConfig+0x4bc>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d108      	bne.n	80030d6 <HAL_RCC_OscConfig+0x32e>
 80030c4:	4b66      	ldr	r3, [pc, #408]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ca:	4a65      	ldr	r2, [pc, #404]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030d4:	e024      	b.n	8003120 <HAL_RCC_OscConfig+0x378>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b05      	cmp	r3, #5
 80030dc:	d110      	bne.n	8003100 <HAL_RCC_OscConfig+0x358>
 80030de:	4b60      	ldr	r3, [pc, #384]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e4:	4a5e      	ldr	r2, [pc, #376]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 80030e6:	f043 0304 	orr.w	r3, r3, #4
 80030ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f4:	4a5a      	ldr	r2, [pc, #360]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030fe:	e00f      	b.n	8003120 <HAL_RCC_OscConfig+0x378>
 8003100:	4b57      	ldr	r3, [pc, #348]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003106:	4a56      	ldr	r2, [pc, #344]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003110:	4b53      	ldr	r3, [pc, #332]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003116:	4a52      	ldr	r2, [pc, #328]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 8003118:	f023 0304 	bic.w	r3, r3, #4
 800311c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d016      	beq.n	8003156 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7ff f94c 	bl	80023c4 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800312e:	e00a      	b.n	8003146 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003130:	f7ff f948 	bl	80023c4 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e138      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003146:	4b46      	ldr	r3, [pc, #280]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 8003148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0ed      	beq.n	8003130 <HAL_RCC_OscConfig+0x388>
 8003154:	e015      	b.n	8003182 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003156:	f7ff f935 	bl	80023c4 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800315c:	e00a      	b.n	8003174 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315e:	f7ff f931 	bl	80023c4 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	f241 3288 	movw	r2, #5000	@ 0x1388
 800316c:	4293      	cmp	r3, r2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e121      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003174:	4b3a      	ldr	r3, [pc, #232]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1ed      	bne.n	800315e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003182:	7ffb      	ldrb	r3, [r7, #31]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d105      	bne.n	8003194 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003188:	4b35      	ldr	r3, [pc, #212]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318c:	4a34      	ldr	r2, [pc, #208]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 800318e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003192:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d03c      	beq.n	800321a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01c      	beq.n	80031e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 80031aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b8:	f7ff f904 	bl	80023c4 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031c0:	f7ff f900 	bl	80023c4 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e0f2      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031d2:	4b23      	ldr	r3, [pc, #140]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 80031d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0ef      	beq.n	80031c0 <HAL_RCC_OscConfig+0x418>
 80031e0:	e01b      	b.n	800321a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031e2:	4b1f      	ldr	r3, [pc, #124]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 80031e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 80031ea:	f023 0301 	bic.w	r3, r3, #1
 80031ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f2:	f7ff f8e7 	bl	80023c4 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031fa:	f7ff f8e3 	bl	80023c4 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e0d5      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800320c:	4b14      	ldr	r3, [pc, #80]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 800320e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1ef      	bne.n	80031fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 80c9 	beq.w	80033b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003224:	4b0e      	ldr	r3, [pc, #56]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 030c 	and.w	r3, r3, #12
 800322c:	2b0c      	cmp	r3, #12
 800322e:	f000 8083 	beq.w	8003338 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d15e      	bne.n	80032f8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323a:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a08      	ldr	r2, [pc, #32]	@ (8003260 <HAL_RCC_OscConfig+0x4b8>)
 8003240:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003246:	f7ff f8bd 	bl	80023c4 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800324c:	e00c      	b.n	8003268 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324e:	f7ff f8b9 	bl	80023c4 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d905      	bls.n	8003268 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e0ab      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
 8003260:	40021000 	.word	0x40021000
 8003264:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003268:	4b55      	ldr	r3, [pc, #340]	@ (80033c0 <HAL_RCC_OscConfig+0x618>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1ec      	bne.n	800324e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003274:	4b52      	ldr	r3, [pc, #328]	@ (80033c0 <HAL_RCC_OscConfig+0x618>)
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	4b52      	ldr	r3, [pc, #328]	@ (80033c4 <HAL_RCC_OscConfig+0x61c>)
 800327a:	4013      	ands	r3, r2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6a11      	ldr	r1, [r2, #32]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003284:	3a01      	subs	r2, #1
 8003286:	0112      	lsls	r2, r2, #4
 8003288:	4311      	orrs	r1, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800328e:	0212      	lsls	r2, r2, #8
 8003290:	4311      	orrs	r1, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003296:	0852      	lsrs	r2, r2, #1
 8003298:	3a01      	subs	r2, #1
 800329a:	0552      	lsls	r2, r2, #21
 800329c:	4311      	orrs	r1, r2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80032a2:	0852      	lsrs	r2, r2, #1
 80032a4:	3a01      	subs	r2, #1
 80032a6:	0652      	lsls	r2, r2, #25
 80032a8:	4311      	orrs	r1, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80032ae:	06d2      	lsls	r2, r2, #27
 80032b0:	430a      	orrs	r2, r1
 80032b2:	4943      	ldr	r1, [pc, #268]	@ (80033c0 <HAL_RCC_OscConfig+0x618>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b8:	4b41      	ldr	r3, [pc, #260]	@ (80033c0 <HAL_RCC_OscConfig+0x618>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a40      	ldr	r2, [pc, #256]	@ (80033c0 <HAL_RCC_OscConfig+0x618>)
 80032be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032c4:	4b3e      	ldr	r3, [pc, #248]	@ (80033c0 <HAL_RCC_OscConfig+0x618>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4a3d      	ldr	r2, [pc, #244]	@ (80033c0 <HAL_RCC_OscConfig+0x618>)
 80032ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7ff f878 	bl	80023c4 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d8:	f7ff f874 	bl	80023c4 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e066      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ea:	4b35      	ldr	r3, [pc, #212]	@ (80033c0 <HAL_RCC_OscConfig+0x618>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x530>
 80032f6:	e05e      	b.n	80033b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f8:	4b31      	ldr	r3, [pc, #196]	@ (80033c0 <HAL_RCC_OscConfig+0x618>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a30      	ldr	r2, [pc, #192]	@ (80033c0 <HAL_RCC_OscConfig+0x618>)
 80032fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7ff f85e 	bl	80023c4 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330c:	f7ff f85a 	bl	80023c4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e04c      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800331e:	4b28      	ldr	r3, [pc, #160]	@ (80033c0 <HAL_RCC_OscConfig+0x618>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800332a:	4b25      	ldr	r3, [pc, #148]	@ (80033c0 <HAL_RCC_OscConfig+0x618>)
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	4924      	ldr	r1, [pc, #144]	@ (80033c0 <HAL_RCC_OscConfig+0x618>)
 8003330:	4b25      	ldr	r3, [pc, #148]	@ (80033c8 <HAL_RCC_OscConfig+0x620>)
 8003332:	4013      	ands	r3, r2
 8003334:	60cb      	str	r3, [r1, #12]
 8003336:	e03e      	b.n	80033b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e039      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003344:	4b1e      	ldr	r3, [pc, #120]	@ (80033c0 <HAL_RCC_OscConfig+0x618>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f003 0203 	and.w	r2, r3, #3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	429a      	cmp	r2, r3
 8003356:	d12c      	bne.n	80033b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003362:	3b01      	subs	r3, #1
 8003364:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	429a      	cmp	r2, r3
 8003368:	d123      	bne.n	80033b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003374:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d11b      	bne.n	80033b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003384:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d113      	bne.n	80033b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003394:	085b      	lsrs	r3, r3, #1
 8003396:	3b01      	subs	r3, #1
 8003398:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d109      	bne.n	80033b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	3b01      	subs	r3, #1
 80033ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021000 	.word	0x40021000
 80033c4:	019f800c 	.word	0x019f800c
 80033c8:	feeefffc 	.word	0xfeeefffc

080033cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e11e      	b.n	8003622 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033e4:	4b91      	ldr	r3, [pc, #580]	@ (800362c <HAL_RCC_ClockConfig+0x260>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d910      	bls.n	8003414 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f2:	4b8e      	ldr	r3, [pc, #568]	@ (800362c <HAL_RCC_ClockConfig+0x260>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 020f 	bic.w	r2, r3, #15
 80033fa:	498c      	ldr	r1, [pc, #560]	@ (800362c <HAL_RCC_ClockConfig+0x260>)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003402:	4b8a      	ldr	r3, [pc, #552]	@ (800362c <HAL_RCC_ClockConfig+0x260>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d001      	beq.n	8003414 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e106      	b.n	8003622 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d073      	beq.n	8003508 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d129      	bne.n	800347c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003428:	4b81      	ldr	r3, [pc, #516]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0f4      	b.n	8003622 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003438:	f000 f99e 	bl	8003778 <RCC_GetSysClockFreqFromPLLSource>
 800343c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4a7c      	ldr	r2, [pc, #496]	@ (8003634 <HAL_RCC_ClockConfig+0x268>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d93f      	bls.n	80034c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003446:	4b7a      	ldr	r3, [pc, #488]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800345a:	2b00      	cmp	r3, #0
 800345c:	d033      	beq.n	80034c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003462:	2b00      	cmp	r3, #0
 8003464:	d12f      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003466:	4b72      	ldr	r3, [pc, #456]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800346e:	4a70      	ldr	r2, [pc, #448]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 8003470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003474:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003476:	2380      	movs	r3, #128	@ 0x80
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	e024      	b.n	80034c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d107      	bne.n	8003494 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003484:	4b6a      	ldr	r3, [pc, #424]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0c6      	b.n	8003622 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003494:	4b66      	ldr	r3, [pc, #408]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0be      	b.n	8003622 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034a4:	f000 f8ce 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 80034a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4a61      	ldr	r2, [pc, #388]	@ (8003634 <HAL_RCC_ClockConfig+0x268>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d909      	bls.n	80034c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034b2:	4b5f      	ldr	r3, [pc, #380]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034ba:	4a5d      	ldr	r2, [pc, #372]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 80034bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034c2:	2380      	movs	r3, #128	@ 0x80
 80034c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f023 0203 	bic.w	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4957      	ldr	r1, [pc, #348]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d8:	f7fe ff74 	bl	80023c4 <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e0:	f7fe ff70 	bl	80023c4 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e095      	b.n	8003622 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f6:	4b4e      	ldr	r3, [pc, #312]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 020c 	and.w	r2, r3, #12
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	429a      	cmp	r2, r3
 8003506:	d1eb      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d023      	beq.n	800355c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003520:	4b43      	ldr	r3, [pc, #268]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4a42      	ldr	r2, [pc, #264]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 8003526:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800352a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003538:	4b3d      	ldr	r3, [pc, #244]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003540:	4a3b      	ldr	r2, [pc, #236]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 8003542:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003546:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003548:	4b39      	ldr	r3, [pc, #228]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4936      	ldr	r1, [pc, #216]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
 800355a:	e008      	b.n	800356e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2b80      	cmp	r3, #128	@ 0x80
 8003560:	d105      	bne.n	800356e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003562:	4b33      	ldr	r3, [pc, #204]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	4a32      	ldr	r2, [pc, #200]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 8003568:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800356c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800356e:	4b2f      	ldr	r3, [pc, #188]	@ (800362c <HAL_RCC_ClockConfig+0x260>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d21d      	bcs.n	80035b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357c:	4b2b      	ldr	r3, [pc, #172]	@ (800362c <HAL_RCC_ClockConfig+0x260>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f023 020f 	bic.w	r2, r3, #15
 8003584:	4929      	ldr	r1, [pc, #164]	@ (800362c <HAL_RCC_ClockConfig+0x260>)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	4313      	orrs	r3, r2
 800358a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800358c:	f7fe ff1a 	bl	80023c4 <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003592:	e00a      	b.n	80035aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7fe ff16 	bl	80023c4 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e03b      	b.n	8003622 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b20      	ldr	r3, [pc, #128]	@ (800362c <HAL_RCC_ClockConfig+0x260>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d1ed      	bne.n	8003594 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4917      	ldr	r1, [pc, #92]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d009      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035e2:	4b13      	ldr	r3, [pc, #76]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	490f      	ldr	r1, [pc, #60]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035f6:	f000 f825 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 80035fa:	4602      	mov	r2, r0
 80035fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003630 <HAL_RCC_ClockConfig+0x264>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	490c      	ldr	r1, [pc, #48]	@ (8003638 <HAL_RCC_ClockConfig+0x26c>)
 8003608:	5ccb      	ldrb	r3, [r1, r3]
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	fa22 f303 	lsr.w	r3, r2, r3
 8003612:	4a0a      	ldr	r2, [pc, #40]	@ (800363c <HAL_RCC_ClockConfig+0x270>)
 8003614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003616:	4b0a      	ldr	r3, [pc, #40]	@ (8003640 <HAL_RCC_ClockConfig+0x274>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe fe86 	bl	800232c <HAL_InitTick>
 8003620:	4603      	mov	r3, r0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40022000 	.word	0x40022000
 8003630:	40021000 	.word	0x40021000
 8003634:	04c4b400 	.word	0x04c4b400
 8003638:	0800650c 	.word	0x0800650c
 800363c:	20000014 	.word	0x20000014
 8003640:	20000018 	.word	0x20000018

08003644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800364a:	4b2c      	ldr	r3, [pc, #176]	@ (80036fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b04      	cmp	r3, #4
 8003654:	d102      	bne.n	800365c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003656:	4b2a      	ldr	r3, [pc, #168]	@ (8003700 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	e047      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800365c:	4b27      	ldr	r3, [pc, #156]	@ (80036fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 030c 	and.w	r3, r3, #12
 8003664:	2b08      	cmp	r3, #8
 8003666:	d102      	bne.n	800366e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003668:	4b26      	ldr	r3, [pc, #152]	@ (8003704 <HAL_RCC_GetSysClockFreq+0xc0>)
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	e03e      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800366e:	4b23      	ldr	r3, [pc, #140]	@ (80036fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b0c      	cmp	r3, #12
 8003678:	d136      	bne.n	80036e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800367a:	4b20      	ldr	r3, [pc, #128]	@ (80036fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003684:	4b1d      	ldr	r3, [pc, #116]	@ (80036fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	3301      	adds	r3, #1
 8003690:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d10c      	bne.n	80036b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003698:	4a1a      	ldr	r2, [pc, #104]	@ (8003704 <HAL_RCC_GetSysClockFreq+0xc0>)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a0:	4a16      	ldr	r2, [pc, #88]	@ (80036fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80036a2:	68d2      	ldr	r2, [r2, #12]
 80036a4:	0a12      	lsrs	r2, r2, #8
 80036a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	617b      	str	r3, [r7, #20]
      break;
 80036b0:	e00c      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036b2:	4a13      	ldr	r2, [pc, #76]	@ (8003700 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ba:	4a10      	ldr	r2, [pc, #64]	@ (80036fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80036bc:	68d2      	ldr	r2, [r2, #12]
 80036be:	0a12      	lsrs	r2, r2, #8
 80036c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036c4:	fb02 f303 	mul.w	r3, r2, r3
 80036c8:	617b      	str	r3, [r7, #20]
      break;
 80036ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036cc:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	0e5b      	lsrs	r3, r3, #25
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	3301      	adds	r3, #1
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	e001      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80036ec:	693b      	ldr	r3, [r7, #16]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000
 8003700:	00f42400 	.word	0x00f42400
 8003704:	016e3600 	.word	0x016e3600

08003708 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800370c:	4b03      	ldr	r3, [pc, #12]	@ (800371c <HAL_RCC_GetHCLKFreq+0x14>)
 800370e:	681b      	ldr	r3, [r3, #0]
}
 8003710:	4618      	mov	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	20000014 	.word	0x20000014

08003720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003724:	f7ff fff0 	bl	8003708 <HAL_RCC_GetHCLKFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <HAL_RCC_GetPCLK1Freq+0x24>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	4904      	ldr	r1, [pc, #16]	@ (8003748 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003736:	5ccb      	ldrb	r3, [r1, r3]
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003740:	4618      	mov	r0, r3
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000
 8003748:	0800651c 	.word	0x0800651c

0800374c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003750:	f7ff ffda 	bl	8003708 <HAL_RCC_GetHCLKFreq>
 8003754:	4602      	mov	r2, r0
 8003756:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	0adb      	lsrs	r3, r3, #11
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	4904      	ldr	r1, [pc, #16]	@ (8003774 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003762:	5ccb      	ldrb	r3, [r1, r3]
 8003764:	f003 031f 	and.w	r3, r3, #31
 8003768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800376c:	4618      	mov	r0, r3
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000
 8003774:	0800651c 	.word	0x0800651c

08003778 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800377e:	4b1e      	ldr	r3, [pc, #120]	@ (80037f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003788:	4b1b      	ldr	r3, [pc, #108]	@ (80037f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	3301      	adds	r3, #1
 8003794:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d10c      	bne.n	80037b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800379c:	4a17      	ldr	r2, [pc, #92]	@ (80037fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a4:	4a14      	ldr	r2, [pc, #80]	@ (80037f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037a6:	68d2      	ldr	r2, [r2, #12]
 80037a8:	0a12      	lsrs	r2, r2, #8
 80037aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	617b      	str	r3, [r7, #20]
    break;
 80037b4:	e00c      	b.n	80037d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037b6:	4a12      	ldr	r2, [pc, #72]	@ (8003800 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80037be:	4a0e      	ldr	r2, [pc, #56]	@ (80037f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037c0:	68d2      	ldr	r2, [r2, #12]
 80037c2:	0a12      	lsrs	r2, r2, #8
 80037c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037c8:	fb02 f303 	mul.w	r3, r2, r3
 80037cc:	617b      	str	r3, [r7, #20]
    break;
 80037ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037d0:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	0e5b      	lsrs	r3, r3, #25
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	3301      	adds	r3, #1
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80037ea:	687b      	ldr	r3, [r7, #4]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	371c      	adds	r7, #28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	40021000 	.word	0x40021000
 80037fc:	016e3600 	.word	0x016e3600
 8003800:	00f42400 	.word	0x00f42400

08003804 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800380c:	2300      	movs	r3, #0
 800380e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003810:	2300      	movs	r3, #0
 8003812:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 8098 	beq.w	8003952 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003822:	2300      	movs	r3, #0
 8003824:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003826:	4b43      	ldr	r3, [pc, #268]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10d      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003832:	4b40      	ldr	r3, [pc, #256]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003836:	4a3f      	ldr	r2, [pc, #252]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800383c:	6593      	str	r3, [r2, #88]	@ 0x58
 800383e:	4b3d      	ldr	r3, [pc, #244]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384a:	2301      	movs	r3, #1
 800384c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800384e:	4b3a      	ldr	r3, [pc, #232]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a39      	ldr	r2, [pc, #228]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003858:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800385a:	f7fe fdb3 	bl	80023c4 <HAL_GetTick>
 800385e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003860:	e009      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003862:	f7fe fdaf 	bl	80023c4 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d902      	bls.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	74fb      	strb	r3, [r7, #19]
        break;
 8003874:	e005      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003876:	4b30      	ldr	r3, [pc, #192]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0ef      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003882:	7cfb      	ldrb	r3, [r7, #19]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d159      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003888:	4b2a      	ldr	r3, [pc, #168]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003892:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d01e      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d019      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038a4:	4b23      	ldr	r3, [pc, #140]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038b0:	4b20      	ldr	r3, [pc, #128]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038d0:	4a18      	ldr	r2, [pc, #96]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d016      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7fe fd6f 	bl	80023c4 <HAL_GetTick>
 80038e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e8:	e00b      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ea:	f7fe fd6b 	bl	80023c4 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d902      	bls.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003900:	e006      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003902:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0ec      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003910:	7cfb      	ldrb	r3, [r7, #19]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10b      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003916:	4b07      	ldr	r3, [pc, #28]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800391c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003924:	4903      	ldr	r1, [pc, #12]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800392c:	e008      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800392e:	7cfb      	ldrb	r3, [r7, #19]
 8003930:	74bb      	strb	r3, [r7, #18]
 8003932:	e005      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003934:	40021000 	.word	0x40021000
 8003938:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003940:	7c7b      	ldrb	r3, [r7, #17]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d105      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003946:	4ba7      	ldr	r3, [pc, #668]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800394a:	4aa6      	ldr	r2, [pc, #664]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003950:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800395e:	4ba1      	ldr	r3, [pc, #644]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003964:	f023 0203 	bic.w	r2, r3, #3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	499d      	ldr	r1, [pc, #628]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003980:	4b98      	ldr	r3, [pc, #608]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003986:	f023 020c 	bic.w	r2, r3, #12
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	4995      	ldr	r1, [pc, #596]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039a2:	4b90      	ldr	r3, [pc, #576]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	498c      	ldr	r1, [pc, #560]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039c4:	4b87      	ldr	r3, [pc, #540]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	4984      	ldr	r1, [pc, #528]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039e6:	4b7f      	ldr	r3, [pc, #508]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	497b      	ldr	r1, [pc, #492]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a08:	4b76      	ldr	r3, [pc, #472]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	4973      	ldr	r1, [pc, #460]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a2a:	4b6e      	ldr	r3, [pc, #440]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a30:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	496a      	ldr	r1, [pc, #424]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a4c:	4b65      	ldr	r3, [pc, #404]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a52:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	4962      	ldr	r1, [pc, #392]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a6e:	4b5d      	ldr	r3, [pc, #372]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	4959      	ldr	r1, [pc, #356]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a90:	4b54      	ldr	r3, [pc, #336]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a96:	f023 0203 	bic.w	r2, r3, #3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9e:	4951      	ldr	r1, [pc, #324]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ab2:	4b4c      	ldr	r3, [pc, #304]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac0:	4948      	ldr	r1, [pc, #288]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d015      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ad4:	4b43      	ldr	r3, [pc, #268]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ada:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae2:	4940      	ldr	r1, [pc, #256]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003af2:	d105      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af4:	4b3b      	ldr	r3, [pc, #236]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4a3a      	ldr	r2, [pc, #232]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003afa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003afe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d015      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b0c:	4b35      	ldr	r3, [pc, #212]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b1a:	4932      	ldr	r1, [pc, #200]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b2a:	d105      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4a2c      	ldr	r2, [pc, #176]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b36:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d015      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b44:	4b27      	ldr	r3, [pc, #156]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b52:	4924      	ldr	r1, [pc, #144]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b62:	d105      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b64:	4b1f      	ldr	r3, [pc, #124]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	4a1e      	ldr	r2, [pc, #120]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b6e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d015      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b7c:	4b19      	ldr	r3, [pc, #100]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8a:	4916      	ldr	r1, [pc, #88]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b9a:	d105      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b9c:	4b11      	ldr	r3, [pc, #68]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4a10      	ldr	r2, [pc, #64]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ba6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d019      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc2:	4908      	ldr	r1, [pc, #32]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bd2:	d109      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd4:	4b03      	ldr	r3, [pc, #12]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4a02      	ldr	r2, [pc, #8]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bde:	60d3      	str	r3, [r2, #12]
 8003be0:	e002      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d015      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bf4:	4b29      	ldr	r3, [pc, #164]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c02:	4926      	ldr	r1, [pc, #152]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c12:	d105      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c14:	4b21      	ldr	r3, [pc, #132]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	4a20      	ldr	r2, [pc, #128]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c1e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d015      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c32:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c3a:	4918      	ldr	r1, [pc, #96]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c4a:	d105      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c4c:	4b13      	ldr	r3, [pc, #76]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	4a12      	ldr	r2, [pc, #72]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c56:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d015      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c64:	4b0d      	ldr	r3, [pc, #52]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c72:	490a      	ldr	r1, [pc, #40]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c82:	d105      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c84:	4b05      	ldr	r3, [pc, #20]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4a04      	ldr	r2, [pc, #16]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c90:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000

08003ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e049      	b.n	8003d46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fe f9d6 	bl	8002078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	f000 ff5e 	bl	8004ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d001      	beq.n	8003d68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e04c      	b.n	8003e02 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a26      	ldr	r2, [pc, #152]	@ (8003e10 <HAL_TIM_Base_Start+0xc0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d022      	beq.n	8003dc0 <HAL_TIM_Base_Start+0x70>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d82:	d01d      	beq.n	8003dc0 <HAL_TIM_Base_Start+0x70>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a22      	ldr	r2, [pc, #136]	@ (8003e14 <HAL_TIM_Base_Start+0xc4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d018      	beq.n	8003dc0 <HAL_TIM_Base_Start+0x70>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a21      	ldr	r2, [pc, #132]	@ (8003e18 <HAL_TIM_Base_Start+0xc8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d013      	beq.n	8003dc0 <HAL_TIM_Base_Start+0x70>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8003e1c <HAL_TIM_Base_Start+0xcc>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00e      	beq.n	8003dc0 <HAL_TIM_Base_Start+0x70>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1e      	ldr	r2, [pc, #120]	@ (8003e20 <HAL_TIM_Base_Start+0xd0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d009      	beq.n	8003dc0 <HAL_TIM_Base_Start+0x70>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e24 <HAL_TIM_Base_Start+0xd4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <HAL_TIM_Base_Start+0x70>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1b      	ldr	r2, [pc, #108]	@ (8003e28 <HAL_TIM_Base_Start+0xd8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d115      	bne.n	8003dec <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	4b19      	ldr	r3, [pc, #100]	@ (8003e2c <HAL_TIM_Base_Start+0xdc>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b06      	cmp	r3, #6
 8003dd0:	d015      	beq.n	8003dfe <HAL_TIM_Base_Start+0xae>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dd8:	d011      	beq.n	8003dfe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0201 	orr.w	r2, r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dea:	e008      	b.n	8003dfe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	e000      	b.n	8003e00 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800
 8003e1c:	40000c00 	.word	0x40000c00
 8003e20:	40013400 	.word	0x40013400
 8003e24:	40014000 	.word	0x40014000
 8003e28:	40015000 	.word	0x40015000
 8003e2c:	00010007 	.word	0x00010007

08003e30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d001      	beq.n	8003e48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e054      	b.n	8003ef2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a26      	ldr	r2, [pc, #152]	@ (8003f00 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d022      	beq.n	8003eb0 <HAL_TIM_Base_Start_IT+0x80>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e72:	d01d      	beq.n	8003eb0 <HAL_TIM_Base_Start_IT+0x80>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a22      	ldr	r2, [pc, #136]	@ (8003f04 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d018      	beq.n	8003eb0 <HAL_TIM_Base_Start_IT+0x80>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a21      	ldr	r2, [pc, #132]	@ (8003f08 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d013      	beq.n	8003eb0 <HAL_TIM_Base_Start_IT+0x80>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8003f0c <HAL_TIM_Base_Start_IT+0xdc>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00e      	beq.n	8003eb0 <HAL_TIM_Base_Start_IT+0x80>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1e      	ldr	r2, [pc, #120]	@ (8003f10 <HAL_TIM_Base_Start_IT+0xe0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d009      	beq.n	8003eb0 <HAL_TIM_Base_Start_IT+0x80>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f14 <HAL_TIM_Base_Start_IT+0xe4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d004      	beq.n	8003eb0 <HAL_TIM_Base_Start_IT+0x80>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8003f18 <HAL_TIM_Base_Start_IT+0xe8>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d115      	bne.n	8003edc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	4b19      	ldr	r3, [pc, #100]	@ (8003f1c <HAL_TIM_Base_Start_IT+0xec>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b06      	cmp	r3, #6
 8003ec0:	d015      	beq.n	8003eee <HAL_TIM_Base_Start_IT+0xbe>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec8:	d011      	beq.n	8003eee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0201 	orr.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eda:	e008      	b.n	8003eee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e000      	b.n	8003ef0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40000800 	.word	0x40000800
 8003f0c:	40000c00 	.word	0x40000c00
 8003f10:	40013400 	.word	0x40013400
 8003f14:	40014000 	.word	0x40014000
 8003f18:	40015000 	.word	0x40015000
 8003f1c:	00010007 	.word	0x00010007

08003f20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e049      	b.n	8003fc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7fe f876 	bl	8002038 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	f000 fe1e 	bl	8004ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d109      	bne.n	8003ff4 <HAL_TIM_PWM_Start+0x24>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e03c      	b.n	800406e <HAL_TIM_PWM_Start+0x9e>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d109      	bne.n	800400e <HAL_TIM_PWM_Start+0x3e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b01      	cmp	r3, #1
 8004004:	bf14      	ite	ne
 8004006:	2301      	movne	r3, #1
 8004008:	2300      	moveq	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	e02f      	b.n	800406e <HAL_TIM_PWM_Start+0x9e>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b08      	cmp	r3, #8
 8004012:	d109      	bne.n	8004028 <HAL_TIM_PWM_Start+0x58>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b01      	cmp	r3, #1
 800401e:	bf14      	ite	ne
 8004020:	2301      	movne	r3, #1
 8004022:	2300      	moveq	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	e022      	b.n	800406e <HAL_TIM_PWM_Start+0x9e>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b0c      	cmp	r3, #12
 800402c:	d109      	bne.n	8004042 <HAL_TIM_PWM_Start+0x72>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b01      	cmp	r3, #1
 8004038:	bf14      	ite	ne
 800403a:	2301      	movne	r3, #1
 800403c:	2300      	moveq	r3, #0
 800403e:	b2db      	uxtb	r3, r3
 8004040:	e015      	b.n	800406e <HAL_TIM_PWM_Start+0x9e>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b10      	cmp	r3, #16
 8004046:	d109      	bne.n	800405c <HAL_TIM_PWM_Start+0x8c>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b01      	cmp	r3, #1
 8004052:	bf14      	ite	ne
 8004054:	2301      	movne	r3, #1
 8004056:	2300      	moveq	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	e008      	b.n	800406e <HAL_TIM_PWM_Start+0x9e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e0a6      	b.n	80041c4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d104      	bne.n	8004086 <HAL_TIM_PWM_Start+0xb6>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004084:	e023      	b.n	80040ce <HAL_TIM_PWM_Start+0xfe>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b04      	cmp	r3, #4
 800408a:	d104      	bne.n	8004096 <HAL_TIM_PWM_Start+0xc6>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004094:	e01b      	b.n	80040ce <HAL_TIM_PWM_Start+0xfe>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b08      	cmp	r3, #8
 800409a:	d104      	bne.n	80040a6 <HAL_TIM_PWM_Start+0xd6>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040a4:	e013      	b.n	80040ce <HAL_TIM_PWM_Start+0xfe>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b0c      	cmp	r3, #12
 80040aa:	d104      	bne.n	80040b6 <HAL_TIM_PWM_Start+0xe6>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040b4:	e00b      	b.n	80040ce <HAL_TIM_PWM_Start+0xfe>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b10      	cmp	r3, #16
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_PWM_Start+0xf6>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040c4:	e003      	b.n	80040ce <HAL_TIM_PWM_Start+0xfe>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2202      	movs	r2, #2
 80040ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2201      	movs	r2, #1
 80040d4:	6839      	ldr	r1, [r7, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f001 f9dc 	bl	8005494 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a3a      	ldr	r2, [pc, #232]	@ (80041cc <HAL_TIM_PWM_Start+0x1fc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d018      	beq.n	8004118 <HAL_TIM_PWM_Start+0x148>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a39      	ldr	r2, [pc, #228]	@ (80041d0 <HAL_TIM_PWM_Start+0x200>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d013      	beq.n	8004118 <HAL_TIM_PWM_Start+0x148>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a37      	ldr	r2, [pc, #220]	@ (80041d4 <HAL_TIM_PWM_Start+0x204>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00e      	beq.n	8004118 <HAL_TIM_PWM_Start+0x148>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a36      	ldr	r2, [pc, #216]	@ (80041d8 <HAL_TIM_PWM_Start+0x208>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d009      	beq.n	8004118 <HAL_TIM_PWM_Start+0x148>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a34      	ldr	r2, [pc, #208]	@ (80041dc <HAL_TIM_PWM_Start+0x20c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d004      	beq.n	8004118 <HAL_TIM_PWM_Start+0x148>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a33      	ldr	r2, [pc, #204]	@ (80041e0 <HAL_TIM_PWM_Start+0x210>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d101      	bne.n	800411c <HAL_TIM_PWM_Start+0x14c>
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <HAL_TIM_PWM_Start+0x14e>
 800411c:	2300      	movs	r3, #0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d007      	beq.n	8004132 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004130:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a25      	ldr	r2, [pc, #148]	@ (80041cc <HAL_TIM_PWM_Start+0x1fc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d022      	beq.n	8004182 <HAL_TIM_PWM_Start+0x1b2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004144:	d01d      	beq.n	8004182 <HAL_TIM_PWM_Start+0x1b2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a26      	ldr	r2, [pc, #152]	@ (80041e4 <HAL_TIM_PWM_Start+0x214>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d018      	beq.n	8004182 <HAL_TIM_PWM_Start+0x1b2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a24      	ldr	r2, [pc, #144]	@ (80041e8 <HAL_TIM_PWM_Start+0x218>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d013      	beq.n	8004182 <HAL_TIM_PWM_Start+0x1b2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a23      	ldr	r2, [pc, #140]	@ (80041ec <HAL_TIM_PWM_Start+0x21c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d00e      	beq.n	8004182 <HAL_TIM_PWM_Start+0x1b2>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a19      	ldr	r2, [pc, #100]	@ (80041d0 <HAL_TIM_PWM_Start+0x200>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d009      	beq.n	8004182 <HAL_TIM_PWM_Start+0x1b2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a18      	ldr	r2, [pc, #96]	@ (80041d4 <HAL_TIM_PWM_Start+0x204>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d004      	beq.n	8004182 <HAL_TIM_PWM_Start+0x1b2>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a18      	ldr	r2, [pc, #96]	@ (80041e0 <HAL_TIM_PWM_Start+0x210>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d115      	bne.n	80041ae <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	4b19      	ldr	r3, [pc, #100]	@ (80041f0 <HAL_TIM_PWM_Start+0x220>)
 800418a:	4013      	ands	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b06      	cmp	r3, #6
 8004192:	d015      	beq.n	80041c0 <HAL_TIM_PWM_Start+0x1f0>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800419a:	d011      	beq.n	80041c0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ac:	e008      	b.n	80041c0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0201 	orr.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e000      	b.n	80041c2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	40013400 	.word	0x40013400
 80041d4:	40014000 	.word	0x40014000
 80041d8:	40014400 	.word	0x40014400
 80041dc:	40014800 	.word	0x40014800
 80041e0:	40015000 	.word	0x40015000
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800
 80041ec:	40000c00 	.word	0x40000c00
 80041f0:	00010007 	.word	0x00010007

080041f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e097      	b.n	8004338 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d106      	bne.n	8004222 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7fd ff63 	bl	80020e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2202      	movs	r2, #2
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004238:	f023 0307 	bic.w	r3, r3, #7
 800423c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3304      	adds	r3, #4
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f000 fca9 	bl	8004ba0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004276:	f023 0303 	bic.w	r3, r3, #3
 800427a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	4313      	orrs	r3, r2
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004294:	f023 030c 	bic.w	r3, r3, #12
 8004298:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	021b      	lsls	r3, r3, #8
 80042b0:	4313      	orrs	r3, r2
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	011a      	lsls	r2, r3, #4
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	031b      	lsls	r3, r3, #12
 80042c4:	4313      	orrs	r3, r2
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80042d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80042da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	4313      	orrs	r3, r2
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004350:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004358:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004360:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004368:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d110      	bne.n	8004392 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d102      	bne.n	800437c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004376:	7b7b      	ldrb	r3, [r7, #13]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d001      	beq.n	8004380 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e069      	b.n	8004454 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004390:	e031      	b.n	80043f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b04      	cmp	r3, #4
 8004396:	d110      	bne.n	80043ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004398:	7bbb      	ldrb	r3, [r7, #14]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d102      	bne.n	80043a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800439e:	7b3b      	ldrb	r3, [r7, #12]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d001      	beq.n	80043a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e055      	b.n	8004454 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043b8:	e01d      	b.n	80043f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d108      	bne.n	80043d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043c0:	7bbb      	ldrb	r3, [r7, #14]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d105      	bne.n	80043d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043c6:	7b7b      	ldrb	r3, [r7, #13]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d102      	bne.n	80043d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043cc:	7b3b      	ldrb	r3, [r7, #12]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d001      	beq.n	80043d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e03e      	b.n	8004454 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2202      	movs	r2, #2
 80043e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2202      	movs	r2, #2
 80043ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2202      	movs	r2, #2
 80043f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_TIM_Encoder_Start+0xc4>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d008      	beq.n	8004414 <HAL_TIM_Encoder_Start+0xd4>
 8004402:	e00f      	b.n	8004424 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2201      	movs	r2, #1
 800440a:	2100      	movs	r1, #0
 800440c:	4618      	mov	r0, r3
 800440e:	f001 f841 	bl	8005494 <TIM_CCxChannelCmd>
      break;
 8004412:	e016      	b.n	8004442 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2201      	movs	r2, #1
 800441a:	2104      	movs	r1, #4
 800441c:	4618      	mov	r0, r3
 800441e:	f001 f839 	bl	8005494 <TIM_CCxChannelCmd>
      break;
 8004422:	e00e      	b.n	8004442 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2201      	movs	r2, #1
 800442a:	2100      	movs	r1, #0
 800442c:	4618      	mov	r0, r3
 800442e:	f001 f831 	bl	8005494 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2201      	movs	r2, #1
 8004438:	2104      	movs	r1, #4
 800443a:	4618      	mov	r0, r3
 800443c:	f001 f82a 	bl	8005494 <TIM_CCxChannelCmd>
      break;
 8004440:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f042 0201 	orr.w	r2, r2, #1
 8004450:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d020      	beq.n	80044c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01b      	beq.n	80044c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0202 	mvn.w	r2, #2
 8004490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fb5c 	bl	8004b64 <HAL_TIM_IC_CaptureCallback>
 80044ac:	e005      	b.n	80044ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fb4e 	bl	8004b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fb5f 	bl	8004b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d020      	beq.n	800450c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01b      	beq.n	800450c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0204 	mvn.w	r2, #4
 80044dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2202      	movs	r2, #2
 80044e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fb36 	bl	8004b64 <HAL_TIM_IC_CaptureCallback>
 80044f8:	e005      	b.n	8004506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fb28 	bl	8004b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fb39 	bl	8004b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d020      	beq.n	8004558 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01b      	beq.n	8004558 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0208 	mvn.w	r2, #8
 8004528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2204      	movs	r2, #4
 800452e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fb10 	bl	8004b64 <HAL_TIM_IC_CaptureCallback>
 8004544:	e005      	b.n	8004552 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fb02 	bl	8004b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fb13 	bl	8004b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b00      	cmp	r3, #0
 8004560:	d020      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01b      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0210 	mvn.w	r2, #16
 8004574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2208      	movs	r2, #8
 800457a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 faea 	bl	8004b64 <HAL_TIM_IC_CaptureCallback>
 8004590:	e005      	b.n	800459e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fadc 	bl	8004b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 faed 	bl	8004b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00c      	beq.n	80045c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d007      	beq.n	80045c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0201 	mvn.w	r2, #1
 80045c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fd f872 	bl	80016ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d104      	bne.n	80045dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00c      	beq.n	80045f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d007      	beq.n	80045f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80045ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f001 f8a9 	bl	8005748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00c      	beq.n	800461a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f001 f8a1 	bl	800575c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00c      	beq.n	800463e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 faa7 	bl	8004b8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00c      	beq.n	8004662 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d007      	beq.n	8004662 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f06f 0220 	mvn.w	r2, #32
 800465a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f001 f869 	bl	8005734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00c      	beq.n	8004686 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800467e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f001 f875 	bl	8005770 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00c      	beq.n	80046aa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80046a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f001 f86d 	bl	8005784 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00c      	beq.n	80046ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d007      	beq.n	80046ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80046c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f001 f865 	bl	8005798 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00c      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80046ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f001 f85d 	bl	80057ac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046f2:	bf00      	nop
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004716:	2302      	movs	r3, #2
 8004718:	e0ff      	b.n	800491a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b14      	cmp	r3, #20
 8004726:	f200 80f0 	bhi.w	800490a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800472a:	a201      	add	r2, pc, #4	@ (adr r2, 8004730 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	08004785 	.word	0x08004785
 8004734:	0800490b 	.word	0x0800490b
 8004738:	0800490b 	.word	0x0800490b
 800473c:	0800490b 	.word	0x0800490b
 8004740:	080047c5 	.word	0x080047c5
 8004744:	0800490b 	.word	0x0800490b
 8004748:	0800490b 	.word	0x0800490b
 800474c:	0800490b 	.word	0x0800490b
 8004750:	08004807 	.word	0x08004807
 8004754:	0800490b 	.word	0x0800490b
 8004758:	0800490b 	.word	0x0800490b
 800475c:	0800490b 	.word	0x0800490b
 8004760:	08004847 	.word	0x08004847
 8004764:	0800490b 	.word	0x0800490b
 8004768:	0800490b 	.word	0x0800490b
 800476c:	0800490b 	.word	0x0800490b
 8004770:	08004889 	.word	0x08004889
 8004774:	0800490b 	.word	0x0800490b
 8004778:	0800490b 	.word	0x0800490b
 800477c:	0800490b 	.word	0x0800490b
 8004780:	080048c9 	.word	0x080048c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fabc 	bl	8004d08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0208 	orr.w	r2, r2, #8
 800479e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0204 	bic.w	r2, r2, #4
 80047ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6999      	ldr	r1, [r3, #24]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	619a      	str	r2, [r3, #24]
      break;
 80047c2:	e0a5      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fb36 	bl	8004e3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6999      	ldr	r1, [r3, #24]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	021a      	lsls	r2, r3, #8
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	619a      	str	r2, [r3, #24]
      break;
 8004804:	e084      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fba9 	bl	8004f64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0208 	orr.w	r2, r2, #8
 8004820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69da      	ldr	r2, [r3, #28]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0204 	bic.w	r2, r2, #4
 8004830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69d9      	ldr	r1, [r3, #28]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	61da      	str	r2, [r3, #28]
      break;
 8004844:	e064      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fc1b 	bl	8005088 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69d9      	ldr	r1, [r3, #28]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	021a      	lsls	r2, r3, #8
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	61da      	str	r2, [r3, #28]
      break;
 8004886:	e043      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fc8e 	bl	80051b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0208 	orr.w	r2, r2, #8
 80048a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0204 	bic.w	r2, r2, #4
 80048b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80048c6:	e023      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fcd8 	bl	8005284 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	021a      	lsls	r2, r3, #8
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004908:	e002      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	75fb      	strb	r3, [r7, #23]
      break;
 800490e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004918:	7dfb      	ldrb	r3, [r7, #23]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop

08004924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_TIM_ConfigClockSource+0x1c>
 800493c:	2302      	movs	r3, #2
 800493e:	e0f6      	b.n	8004b2e <HAL_TIM_ConfigClockSource+0x20a>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800495e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800496a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a6f      	ldr	r2, [pc, #444]	@ (8004b38 <HAL_TIM_ConfigClockSource+0x214>)
 800497a:	4293      	cmp	r3, r2
 800497c:	f000 80c1 	beq.w	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 8004980:	4a6d      	ldr	r2, [pc, #436]	@ (8004b38 <HAL_TIM_ConfigClockSource+0x214>)
 8004982:	4293      	cmp	r3, r2
 8004984:	f200 80c6 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004988:	4a6c      	ldr	r2, [pc, #432]	@ (8004b3c <HAL_TIM_ConfigClockSource+0x218>)
 800498a:	4293      	cmp	r3, r2
 800498c:	f000 80b9 	beq.w	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 8004990:	4a6a      	ldr	r2, [pc, #424]	@ (8004b3c <HAL_TIM_ConfigClockSource+0x218>)
 8004992:	4293      	cmp	r3, r2
 8004994:	f200 80be 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004998:	4a69      	ldr	r2, [pc, #420]	@ (8004b40 <HAL_TIM_ConfigClockSource+0x21c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	f000 80b1 	beq.w	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 80049a0:	4a67      	ldr	r2, [pc, #412]	@ (8004b40 <HAL_TIM_ConfigClockSource+0x21c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	f200 80b6 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 80049a8:	4a66      	ldr	r2, [pc, #408]	@ (8004b44 <HAL_TIM_ConfigClockSource+0x220>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	f000 80a9 	beq.w	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 80049b0:	4a64      	ldr	r2, [pc, #400]	@ (8004b44 <HAL_TIM_ConfigClockSource+0x220>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	f200 80ae 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 80049b8:	4a63      	ldr	r2, [pc, #396]	@ (8004b48 <HAL_TIM_ConfigClockSource+0x224>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	f000 80a1 	beq.w	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 80049c0:	4a61      	ldr	r2, [pc, #388]	@ (8004b48 <HAL_TIM_ConfigClockSource+0x224>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	f200 80a6 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 80049c8:	4a60      	ldr	r2, [pc, #384]	@ (8004b4c <HAL_TIM_ConfigClockSource+0x228>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	f000 8099 	beq.w	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 80049d0:	4a5e      	ldr	r2, [pc, #376]	@ (8004b4c <HAL_TIM_ConfigClockSource+0x228>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	f200 809e 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 80049d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80049dc:	f000 8091 	beq.w	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 80049e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80049e4:	f200 8096 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 80049e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049ec:	f000 8089 	beq.w	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 80049f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049f4:	f200 808e 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 80049f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049fc:	d03e      	beq.n	8004a7c <HAL_TIM_ConfigClockSource+0x158>
 80049fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a02:	f200 8087 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a0a:	f000 8086 	beq.w	8004b1a <HAL_TIM_ConfigClockSource+0x1f6>
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a12:	d87f      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a14:	2b70      	cmp	r3, #112	@ 0x70
 8004a16:	d01a      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x12a>
 8004a18:	2b70      	cmp	r3, #112	@ 0x70
 8004a1a:	d87b      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a1c:	2b60      	cmp	r3, #96	@ 0x60
 8004a1e:	d050      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x19e>
 8004a20:	2b60      	cmp	r3, #96	@ 0x60
 8004a22:	d877      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a24:	2b50      	cmp	r3, #80	@ 0x50
 8004a26:	d03c      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x17e>
 8004a28:	2b50      	cmp	r3, #80	@ 0x50
 8004a2a:	d873      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a2c:	2b40      	cmp	r3, #64	@ 0x40
 8004a2e:	d058      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x1be>
 8004a30:	2b40      	cmp	r3, #64	@ 0x40
 8004a32:	d86f      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a34:	2b30      	cmp	r3, #48	@ 0x30
 8004a36:	d064      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 8004a38:	2b30      	cmp	r3, #48	@ 0x30
 8004a3a:	d86b      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d060      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	d867      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d05c      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 8004a48:	2b10      	cmp	r3, #16
 8004a4a:	d05a      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x1de>
 8004a4c:	e062      	b.n	8004b14 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a5e:	f000 fcf9 	bl	8005454 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	609a      	str	r2, [r3, #8]
      break;
 8004a7a:	e04f      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a8c:	f000 fce2 	bl	8005454 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a9e:	609a      	str	r2, [r3, #8]
      break;
 8004aa0:	e03c      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f000 fc54 	bl	800535c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2150      	movs	r1, #80	@ 0x50
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fcad 	bl	800541a <TIM_ITRx_SetConfig>
      break;
 8004ac0:	e02c      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f000 fc73 	bl	80053ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2160      	movs	r1, #96	@ 0x60
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fc9d 	bl	800541a <TIM_ITRx_SetConfig>
      break;
 8004ae0:	e01c      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aee:	461a      	mov	r2, r3
 8004af0:	f000 fc34 	bl	800535c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2140      	movs	r1, #64	@ 0x40
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fc8d 	bl	800541a <TIM_ITRx_SetConfig>
      break;
 8004b00:	e00c      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f000 fc84 	bl	800541a <TIM_ITRx_SetConfig>
      break;
 8004b12:	e003      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
      break;
 8004b18:	e000      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004b1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	00100070 	.word	0x00100070
 8004b3c:	00100060 	.word	0x00100060
 8004b40:	00100050 	.word	0x00100050
 8004b44:	00100040 	.word	0x00100040
 8004b48:	00100030 	.word	0x00100030
 8004b4c:	00100020 	.word	0x00100020

08004b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a4c      	ldr	r2, [pc, #304]	@ (8004ce4 <TIM_Base_SetConfig+0x144>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d017      	beq.n	8004be8 <TIM_Base_SetConfig+0x48>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bbe:	d013      	beq.n	8004be8 <TIM_Base_SetConfig+0x48>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a49      	ldr	r2, [pc, #292]	@ (8004ce8 <TIM_Base_SetConfig+0x148>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00f      	beq.n	8004be8 <TIM_Base_SetConfig+0x48>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a48      	ldr	r2, [pc, #288]	@ (8004cec <TIM_Base_SetConfig+0x14c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00b      	beq.n	8004be8 <TIM_Base_SetConfig+0x48>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a47      	ldr	r2, [pc, #284]	@ (8004cf0 <TIM_Base_SetConfig+0x150>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d007      	beq.n	8004be8 <TIM_Base_SetConfig+0x48>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a46      	ldr	r2, [pc, #280]	@ (8004cf4 <TIM_Base_SetConfig+0x154>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_Base_SetConfig+0x48>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a45      	ldr	r2, [pc, #276]	@ (8004cf8 <TIM_Base_SetConfig+0x158>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d108      	bne.n	8004bfa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a39      	ldr	r2, [pc, #228]	@ (8004ce4 <TIM_Base_SetConfig+0x144>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d023      	beq.n	8004c4a <TIM_Base_SetConfig+0xaa>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c08:	d01f      	beq.n	8004c4a <TIM_Base_SetConfig+0xaa>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a36      	ldr	r2, [pc, #216]	@ (8004ce8 <TIM_Base_SetConfig+0x148>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d01b      	beq.n	8004c4a <TIM_Base_SetConfig+0xaa>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a35      	ldr	r2, [pc, #212]	@ (8004cec <TIM_Base_SetConfig+0x14c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d017      	beq.n	8004c4a <TIM_Base_SetConfig+0xaa>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a34      	ldr	r2, [pc, #208]	@ (8004cf0 <TIM_Base_SetConfig+0x150>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d013      	beq.n	8004c4a <TIM_Base_SetConfig+0xaa>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a33      	ldr	r2, [pc, #204]	@ (8004cf4 <TIM_Base_SetConfig+0x154>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00f      	beq.n	8004c4a <TIM_Base_SetConfig+0xaa>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a33      	ldr	r2, [pc, #204]	@ (8004cfc <TIM_Base_SetConfig+0x15c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d00b      	beq.n	8004c4a <TIM_Base_SetConfig+0xaa>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a32      	ldr	r2, [pc, #200]	@ (8004d00 <TIM_Base_SetConfig+0x160>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d007      	beq.n	8004c4a <TIM_Base_SetConfig+0xaa>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a31      	ldr	r2, [pc, #196]	@ (8004d04 <TIM_Base_SetConfig+0x164>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d003      	beq.n	8004c4a <TIM_Base_SetConfig+0xaa>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a2c      	ldr	r2, [pc, #176]	@ (8004cf8 <TIM_Base_SetConfig+0x158>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d108      	bne.n	8004c5c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a18      	ldr	r2, [pc, #96]	@ (8004ce4 <TIM_Base_SetConfig+0x144>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <TIM_Base_SetConfig+0x110>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a1a      	ldr	r2, [pc, #104]	@ (8004cf4 <TIM_Base_SetConfig+0x154>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00f      	beq.n	8004cb0 <TIM_Base_SetConfig+0x110>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a1a      	ldr	r2, [pc, #104]	@ (8004cfc <TIM_Base_SetConfig+0x15c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00b      	beq.n	8004cb0 <TIM_Base_SetConfig+0x110>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a19      	ldr	r2, [pc, #100]	@ (8004d00 <TIM_Base_SetConfig+0x160>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d007      	beq.n	8004cb0 <TIM_Base_SetConfig+0x110>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a18      	ldr	r2, [pc, #96]	@ (8004d04 <TIM_Base_SetConfig+0x164>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_Base_SetConfig+0x110>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a13      	ldr	r2, [pc, #76]	@ (8004cf8 <TIM_Base_SetConfig+0x158>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d103      	bne.n	8004cb8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d105      	bne.n	8004cd6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f023 0201 	bic.w	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	611a      	str	r2, [r3, #16]
  }
}
 8004cd6:	bf00      	nop
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40000400 	.word	0x40000400
 8004cec:	40000800 	.word	0x40000800
 8004cf0:	40000c00 	.word	0x40000c00
 8004cf4:	40013400 	.word	0x40013400
 8004cf8:	40015000 	.word	0x40015000
 8004cfc:	40014000 	.word	0x40014000
 8004d00:	40014400 	.word	0x40014400
 8004d04:	40014800 	.word	0x40014800

08004d08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	f023 0201 	bic.w	r2, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0303 	bic.w	r3, r3, #3
 8004d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f023 0302 	bic.w	r3, r3, #2
 8004d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a30      	ldr	r2, [pc, #192]	@ (8004e24 <TIM_OC1_SetConfig+0x11c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d013      	beq.n	8004d90 <TIM_OC1_SetConfig+0x88>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8004e28 <TIM_OC1_SetConfig+0x120>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00f      	beq.n	8004d90 <TIM_OC1_SetConfig+0x88>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a2e      	ldr	r2, [pc, #184]	@ (8004e2c <TIM_OC1_SetConfig+0x124>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00b      	beq.n	8004d90 <TIM_OC1_SetConfig+0x88>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a2d      	ldr	r2, [pc, #180]	@ (8004e30 <TIM_OC1_SetConfig+0x128>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d007      	beq.n	8004d90 <TIM_OC1_SetConfig+0x88>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a2c      	ldr	r2, [pc, #176]	@ (8004e34 <TIM_OC1_SetConfig+0x12c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <TIM_OC1_SetConfig+0x88>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a2b      	ldr	r2, [pc, #172]	@ (8004e38 <TIM_OC1_SetConfig+0x130>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d10c      	bne.n	8004daa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f023 0308 	bic.w	r3, r3, #8
 8004d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f023 0304 	bic.w	r3, r3, #4
 8004da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a1d      	ldr	r2, [pc, #116]	@ (8004e24 <TIM_OC1_SetConfig+0x11c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d013      	beq.n	8004dda <TIM_OC1_SetConfig+0xd2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e28 <TIM_OC1_SetConfig+0x120>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00f      	beq.n	8004dda <TIM_OC1_SetConfig+0xd2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8004e2c <TIM_OC1_SetConfig+0x124>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00b      	beq.n	8004dda <TIM_OC1_SetConfig+0xd2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a1a      	ldr	r2, [pc, #104]	@ (8004e30 <TIM_OC1_SetConfig+0x128>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d007      	beq.n	8004dda <TIM_OC1_SetConfig+0xd2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a19      	ldr	r2, [pc, #100]	@ (8004e34 <TIM_OC1_SetConfig+0x12c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d003      	beq.n	8004dda <TIM_OC1_SetConfig+0xd2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a18      	ldr	r2, [pc, #96]	@ (8004e38 <TIM_OC1_SetConfig+0x130>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d111      	bne.n	8004dfe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	621a      	str	r2, [r3, #32]
}
 8004e18:	bf00      	nop
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	40012c00 	.word	0x40012c00
 8004e28:	40013400 	.word	0x40013400
 8004e2c:	40014000 	.word	0x40014000
 8004e30:	40014400 	.word	0x40014400
 8004e34:	40014800 	.word	0x40014800
 8004e38:	40015000 	.word	0x40015000

08004e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	f023 0210 	bic.w	r2, r3, #16
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0320 	bic.w	r3, r3, #32
 8004e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8004f4c <TIM_OC2_SetConfig+0x110>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d007      	beq.n	8004eb0 <TIM_OC2_SetConfig+0x74>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a2b      	ldr	r2, [pc, #172]	@ (8004f50 <TIM_OC2_SetConfig+0x114>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d003      	beq.n	8004eb0 <TIM_OC2_SetConfig+0x74>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a2a      	ldr	r2, [pc, #168]	@ (8004f54 <TIM_OC2_SetConfig+0x118>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d10d      	bne.n	8004ecc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a1f      	ldr	r2, [pc, #124]	@ (8004f4c <TIM_OC2_SetConfig+0x110>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <TIM_OC2_SetConfig+0xc0>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a1e      	ldr	r2, [pc, #120]	@ (8004f50 <TIM_OC2_SetConfig+0x114>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00f      	beq.n	8004efc <TIM_OC2_SetConfig+0xc0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a1e      	ldr	r2, [pc, #120]	@ (8004f58 <TIM_OC2_SetConfig+0x11c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00b      	beq.n	8004efc <TIM_OC2_SetConfig+0xc0>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8004f5c <TIM_OC2_SetConfig+0x120>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d007      	beq.n	8004efc <TIM_OC2_SetConfig+0xc0>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a1c      	ldr	r2, [pc, #112]	@ (8004f60 <TIM_OC2_SetConfig+0x124>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d003      	beq.n	8004efc <TIM_OC2_SetConfig+0xc0>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a17      	ldr	r2, [pc, #92]	@ (8004f54 <TIM_OC2_SetConfig+0x118>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d113      	bne.n	8004f24 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	621a      	str	r2, [r3, #32]
}
 8004f3e:	bf00      	nop
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40013400 	.word	0x40013400
 8004f54:	40015000 	.word	0x40015000
 8004f58:	40014000 	.word	0x40014000
 8004f5c:	40014400 	.word	0x40014400
 8004f60:	40014800 	.word	0x40014800

08004f64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0303 	bic.w	r3, r3, #3
 8004f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	021b      	lsls	r3, r3, #8
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2b      	ldr	r2, [pc, #172]	@ (8005070 <TIM_OC3_SetConfig+0x10c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d007      	beq.n	8004fd6 <TIM_OC3_SetConfig+0x72>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8005074 <TIM_OC3_SetConfig+0x110>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d003      	beq.n	8004fd6 <TIM_OC3_SetConfig+0x72>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a29      	ldr	r2, [pc, #164]	@ (8005078 <TIM_OC3_SetConfig+0x114>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d10d      	bne.n	8004ff2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a1e      	ldr	r2, [pc, #120]	@ (8005070 <TIM_OC3_SetConfig+0x10c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d013      	beq.n	8005022 <TIM_OC3_SetConfig+0xbe>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8005074 <TIM_OC3_SetConfig+0x110>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00f      	beq.n	8005022 <TIM_OC3_SetConfig+0xbe>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a1d      	ldr	r2, [pc, #116]	@ (800507c <TIM_OC3_SetConfig+0x118>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00b      	beq.n	8005022 <TIM_OC3_SetConfig+0xbe>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a1c      	ldr	r2, [pc, #112]	@ (8005080 <TIM_OC3_SetConfig+0x11c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d007      	beq.n	8005022 <TIM_OC3_SetConfig+0xbe>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a1b      	ldr	r2, [pc, #108]	@ (8005084 <TIM_OC3_SetConfig+0x120>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <TIM_OC3_SetConfig+0xbe>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a16      	ldr	r2, [pc, #88]	@ (8005078 <TIM_OC3_SetConfig+0x114>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d113      	bne.n	800504a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	621a      	str	r2, [r3, #32]
}
 8005064:	bf00      	nop
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	40012c00 	.word	0x40012c00
 8005074:	40013400 	.word	0x40013400
 8005078:	40015000 	.word	0x40015000
 800507c:	40014000 	.word	0x40014000
 8005080:	40014400 	.word	0x40014400
 8005084:	40014800 	.word	0x40014800

08005088 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	021b      	lsls	r3, r3, #8
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	031b      	lsls	r3, r3, #12
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005198 <TIM_OC4_SetConfig+0x110>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d007      	beq.n	80050fc <TIM_OC4_SetConfig+0x74>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a2b      	ldr	r2, [pc, #172]	@ (800519c <TIM_OC4_SetConfig+0x114>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_OC4_SetConfig+0x74>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a2a      	ldr	r2, [pc, #168]	@ (80051a0 <TIM_OC4_SetConfig+0x118>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d10d      	bne.n	8005118 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	031b      	lsls	r3, r3, #12
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005116:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a1f      	ldr	r2, [pc, #124]	@ (8005198 <TIM_OC4_SetConfig+0x110>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <TIM_OC4_SetConfig+0xc0>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a1e      	ldr	r2, [pc, #120]	@ (800519c <TIM_OC4_SetConfig+0x114>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00f      	beq.n	8005148 <TIM_OC4_SetConfig+0xc0>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a1e      	ldr	r2, [pc, #120]	@ (80051a4 <TIM_OC4_SetConfig+0x11c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00b      	beq.n	8005148 <TIM_OC4_SetConfig+0xc0>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a1d      	ldr	r2, [pc, #116]	@ (80051a8 <TIM_OC4_SetConfig+0x120>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d007      	beq.n	8005148 <TIM_OC4_SetConfig+0xc0>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a1c      	ldr	r2, [pc, #112]	@ (80051ac <TIM_OC4_SetConfig+0x124>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_OC4_SetConfig+0xc0>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a17      	ldr	r2, [pc, #92]	@ (80051a0 <TIM_OC4_SetConfig+0x118>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d113      	bne.n	8005170 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800514e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005156:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	019b      	lsls	r3, r3, #6
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	019b      	lsls	r3, r3, #6
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40012c00 	.word	0x40012c00
 800519c:	40013400 	.word	0x40013400
 80051a0:	40015000 	.word	0x40015000
 80051a4:	40014000 	.word	0x40014000
 80051a8:	40014400 	.word	0x40014400
 80051ac:	40014800 	.word	0x40014800

080051b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80051f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	041b      	lsls	r3, r3, #16
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	4313      	orrs	r3, r2
 8005200:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a19      	ldr	r2, [pc, #100]	@ (800526c <TIM_OC5_SetConfig+0xbc>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d013      	beq.n	8005232 <TIM_OC5_SetConfig+0x82>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a18      	ldr	r2, [pc, #96]	@ (8005270 <TIM_OC5_SetConfig+0xc0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00f      	beq.n	8005232 <TIM_OC5_SetConfig+0x82>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a17      	ldr	r2, [pc, #92]	@ (8005274 <TIM_OC5_SetConfig+0xc4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00b      	beq.n	8005232 <TIM_OC5_SetConfig+0x82>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a16      	ldr	r2, [pc, #88]	@ (8005278 <TIM_OC5_SetConfig+0xc8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d007      	beq.n	8005232 <TIM_OC5_SetConfig+0x82>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a15      	ldr	r2, [pc, #84]	@ (800527c <TIM_OC5_SetConfig+0xcc>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d003      	beq.n	8005232 <TIM_OC5_SetConfig+0x82>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a14      	ldr	r2, [pc, #80]	@ (8005280 <TIM_OC5_SetConfig+0xd0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d109      	bne.n	8005246 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005238:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	621a      	str	r2, [r3, #32]
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	40012c00 	.word	0x40012c00
 8005270:	40013400 	.word	0x40013400
 8005274:	40014000 	.word	0x40014000
 8005278:	40014400 	.word	0x40014400
 800527c:	40014800 	.word	0x40014800
 8005280:	40015000 	.word	0x40015000

08005284 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	021b      	lsls	r3, r3, #8
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	051b      	lsls	r3, r3, #20
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a1a      	ldr	r2, [pc, #104]	@ (8005344 <TIM_OC6_SetConfig+0xc0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d013      	beq.n	8005308 <TIM_OC6_SetConfig+0x84>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a19      	ldr	r2, [pc, #100]	@ (8005348 <TIM_OC6_SetConfig+0xc4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00f      	beq.n	8005308 <TIM_OC6_SetConfig+0x84>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a18      	ldr	r2, [pc, #96]	@ (800534c <TIM_OC6_SetConfig+0xc8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00b      	beq.n	8005308 <TIM_OC6_SetConfig+0x84>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a17      	ldr	r2, [pc, #92]	@ (8005350 <TIM_OC6_SetConfig+0xcc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d007      	beq.n	8005308 <TIM_OC6_SetConfig+0x84>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a16      	ldr	r2, [pc, #88]	@ (8005354 <TIM_OC6_SetConfig+0xd0>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d003      	beq.n	8005308 <TIM_OC6_SetConfig+0x84>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a15      	ldr	r2, [pc, #84]	@ (8005358 <TIM_OC6_SetConfig+0xd4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d109      	bne.n	800531c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800530e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	029b      	lsls	r3, r3, #10
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40012c00 	.word	0x40012c00
 8005348:	40013400 	.word	0x40013400
 800534c:	40014000 	.word	0x40014000
 8005350:	40014400 	.word	0x40014400
 8005354:	40014800 	.word	0x40014800
 8005358:	40015000 	.word	0x40015000

0800535c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f023 0201 	bic.w	r2, r3, #1
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f023 030a 	bic.w	r3, r3, #10
 8005398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b087      	sub	sp, #28
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	f023 0210 	bic.w	r2, r3, #16
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	031b      	lsls	r3, r3, #12
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	4313      	orrs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	621a      	str	r2, [r3, #32]
}
 800540e:	bf00      	nop
 8005410:	371c      	adds	r7, #28
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800541a:	b480      	push	{r7}
 800541c:	b085      	sub	sp, #20
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005434:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4313      	orrs	r3, r2
 800543c:	f043 0307 	orr.w	r3, r3, #7
 8005440:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	609a      	str	r2, [r3, #8]
}
 8005448:	bf00      	nop
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800546e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	021a      	lsls	r2, r3, #8
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	431a      	orrs	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4313      	orrs	r3, r2
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	609a      	str	r2, [r3, #8]
}
 8005488:	bf00      	nop
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f003 031f 	and.w	r3, r3, #31
 80054a6:	2201      	movs	r2, #1
 80054a8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a1a      	ldr	r2, [r3, #32]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	43db      	mvns	r3, r3
 80054b6:	401a      	ands	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a1a      	ldr	r2, [r3, #32]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	fa01 f303 	lsl.w	r3, r1, r3
 80054cc:	431a      	orrs	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	621a      	str	r2, [r3, #32]
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
	...

080054e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d101      	bne.n	80054f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054f4:	2302      	movs	r3, #2
 80054f6:	e074      	b.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a34      	ldr	r2, [pc, #208]	@ (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d009      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a33      	ldr	r2, [pc, #204]	@ (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d004      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a31      	ldr	r2, [pc, #196]	@ (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d108      	bne.n	8005548 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800553c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800554e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a21      	ldr	r2, [pc, #132]	@ (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d022      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005578:	d01d      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a1f      	ldr	r2, [pc, #124]	@ (80055fc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d018      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a1d      	ldr	r2, [pc, #116]	@ (8005600 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d013      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1c      	ldr	r2, [pc, #112]	@ (8005604 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00e      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a15      	ldr	r2, [pc, #84]	@ (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d009      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a18      	ldr	r2, [pc, #96]	@ (8005608 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d004      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a11      	ldr	r2, [pc, #68]	@ (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d10c      	bne.n	80055d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40012c00 	.word	0x40012c00
 80055f4:	40013400 	.word	0x40013400
 80055f8:	40015000 	.word	0x40015000
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	40000c00 	.word	0x40000c00
 8005608:	40014000 	.word	0x40014000

0800560c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005624:	2302      	movs	r3, #2
 8005626:	e078      	b.n	800571a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	041b      	lsls	r3, r3, #16
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005728 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d009      	beq.n	80056ce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1b      	ldr	r2, [pc, #108]	@ (800572c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d004      	beq.n	80056ce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a19      	ldr	r2, [pc, #100]	@ (8005730 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d11c      	bne.n	8005708 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d8:	051b      	lsls	r3, r3, #20
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40012c00 	.word	0x40012c00
 800572c:	40013400 	.word	0x40013400
 8005730:	40015000 	.word	0x40015000

08005734 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e042      	b.n	8005858 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d106      	bne.n	80057ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7fc fbcf 	bl	8001f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2224      	movs	r2, #36	@ 0x24
 80057ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fb24 	bl	8005e58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f825 	bl	8005860 <UART_SetConfig>
 8005816:	4603      	mov	r3, r0
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e01b      	b.n	8005858 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800582e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800583e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fba3 	bl	8005f9c <UART_CheckIdleState>
 8005856:	4603      	mov	r3, r0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005864:	b08c      	sub	sp, #48	@ 0x30
 8005866:	af00      	add	r7, sp, #0
 8005868:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	431a      	orrs	r2, r3
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	431a      	orrs	r2, r3
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	4313      	orrs	r3, r2
 8005886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4baa      	ldr	r3, [pc, #680]	@ (8005b38 <UART_SetConfig+0x2d8>)
 8005890:	4013      	ands	r3, r2
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	6812      	ldr	r2, [r2, #0]
 8005896:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005898:	430b      	orrs	r3, r1
 800589a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a9f      	ldr	r2, [pc, #636]	@ (8005b3c <UART_SetConfig+0x2dc>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d004      	beq.n	80058cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058c8:	4313      	orrs	r3, r2
 80058ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80058d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058e0:	430b      	orrs	r3, r1
 80058e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ea:	f023 010f 	bic.w	r1, r3, #15
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a90      	ldr	r2, [pc, #576]	@ (8005b40 <UART_SetConfig+0x2e0>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d125      	bne.n	8005950 <UART_SetConfig+0xf0>
 8005904:	4b8f      	ldr	r3, [pc, #572]	@ (8005b44 <UART_SetConfig+0x2e4>)
 8005906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	2b03      	cmp	r3, #3
 8005910:	d81a      	bhi.n	8005948 <UART_SetConfig+0xe8>
 8005912:	a201      	add	r2, pc, #4	@ (adr r2, 8005918 <UART_SetConfig+0xb8>)
 8005914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005918:	08005929 	.word	0x08005929
 800591c:	08005939 	.word	0x08005939
 8005920:	08005931 	.word	0x08005931
 8005924:	08005941 	.word	0x08005941
 8005928:	2301      	movs	r3, #1
 800592a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800592e:	e116      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005930:	2302      	movs	r3, #2
 8005932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005936:	e112      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005938:	2304      	movs	r3, #4
 800593a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800593e:	e10e      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005940:	2308      	movs	r3, #8
 8005942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005946:	e10a      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005948:	2310      	movs	r3, #16
 800594a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800594e:	e106      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a7c      	ldr	r2, [pc, #496]	@ (8005b48 <UART_SetConfig+0x2e8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d138      	bne.n	80059cc <UART_SetConfig+0x16c>
 800595a:	4b7a      	ldr	r3, [pc, #488]	@ (8005b44 <UART_SetConfig+0x2e4>)
 800595c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005960:	f003 030c 	and.w	r3, r3, #12
 8005964:	2b0c      	cmp	r3, #12
 8005966:	d82d      	bhi.n	80059c4 <UART_SetConfig+0x164>
 8005968:	a201      	add	r2, pc, #4	@ (adr r2, 8005970 <UART_SetConfig+0x110>)
 800596a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596e:	bf00      	nop
 8005970:	080059a5 	.word	0x080059a5
 8005974:	080059c5 	.word	0x080059c5
 8005978:	080059c5 	.word	0x080059c5
 800597c:	080059c5 	.word	0x080059c5
 8005980:	080059b5 	.word	0x080059b5
 8005984:	080059c5 	.word	0x080059c5
 8005988:	080059c5 	.word	0x080059c5
 800598c:	080059c5 	.word	0x080059c5
 8005990:	080059ad 	.word	0x080059ad
 8005994:	080059c5 	.word	0x080059c5
 8005998:	080059c5 	.word	0x080059c5
 800599c:	080059c5 	.word	0x080059c5
 80059a0:	080059bd 	.word	0x080059bd
 80059a4:	2300      	movs	r3, #0
 80059a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059aa:	e0d8      	b.n	8005b5e <UART_SetConfig+0x2fe>
 80059ac:	2302      	movs	r3, #2
 80059ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059b2:	e0d4      	b.n	8005b5e <UART_SetConfig+0x2fe>
 80059b4:	2304      	movs	r3, #4
 80059b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ba:	e0d0      	b.n	8005b5e <UART_SetConfig+0x2fe>
 80059bc:	2308      	movs	r3, #8
 80059be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059c2:	e0cc      	b.n	8005b5e <UART_SetConfig+0x2fe>
 80059c4:	2310      	movs	r3, #16
 80059c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ca:	e0c8      	b.n	8005b5e <UART_SetConfig+0x2fe>
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a5e      	ldr	r2, [pc, #376]	@ (8005b4c <UART_SetConfig+0x2ec>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d125      	bne.n	8005a22 <UART_SetConfig+0x1c2>
 80059d6:	4b5b      	ldr	r3, [pc, #364]	@ (8005b44 <UART_SetConfig+0x2e4>)
 80059d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80059e0:	2b30      	cmp	r3, #48	@ 0x30
 80059e2:	d016      	beq.n	8005a12 <UART_SetConfig+0x1b2>
 80059e4:	2b30      	cmp	r3, #48	@ 0x30
 80059e6:	d818      	bhi.n	8005a1a <UART_SetConfig+0x1ba>
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d00a      	beq.n	8005a02 <UART_SetConfig+0x1a2>
 80059ec:	2b20      	cmp	r3, #32
 80059ee:	d814      	bhi.n	8005a1a <UART_SetConfig+0x1ba>
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <UART_SetConfig+0x19a>
 80059f4:	2b10      	cmp	r3, #16
 80059f6:	d008      	beq.n	8005a0a <UART_SetConfig+0x1aa>
 80059f8:	e00f      	b.n	8005a1a <UART_SetConfig+0x1ba>
 80059fa:	2300      	movs	r3, #0
 80059fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a00:	e0ad      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005a02:	2302      	movs	r3, #2
 8005a04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a08:	e0a9      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005a0a:	2304      	movs	r3, #4
 8005a0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a10:	e0a5      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005a12:	2308      	movs	r3, #8
 8005a14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a18:	e0a1      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005a1a:	2310      	movs	r3, #16
 8005a1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a20:	e09d      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a4a      	ldr	r2, [pc, #296]	@ (8005b50 <UART_SetConfig+0x2f0>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d125      	bne.n	8005a78 <UART_SetConfig+0x218>
 8005a2c:	4b45      	ldr	r3, [pc, #276]	@ (8005b44 <UART_SetConfig+0x2e4>)
 8005a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a36:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a38:	d016      	beq.n	8005a68 <UART_SetConfig+0x208>
 8005a3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a3c:	d818      	bhi.n	8005a70 <UART_SetConfig+0x210>
 8005a3e:	2b80      	cmp	r3, #128	@ 0x80
 8005a40:	d00a      	beq.n	8005a58 <UART_SetConfig+0x1f8>
 8005a42:	2b80      	cmp	r3, #128	@ 0x80
 8005a44:	d814      	bhi.n	8005a70 <UART_SetConfig+0x210>
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <UART_SetConfig+0x1f0>
 8005a4a:	2b40      	cmp	r3, #64	@ 0x40
 8005a4c:	d008      	beq.n	8005a60 <UART_SetConfig+0x200>
 8005a4e:	e00f      	b.n	8005a70 <UART_SetConfig+0x210>
 8005a50:	2300      	movs	r3, #0
 8005a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a56:	e082      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a5e:	e07e      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005a60:	2304      	movs	r3, #4
 8005a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a66:	e07a      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005a68:	2308      	movs	r3, #8
 8005a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a6e:	e076      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005a70:	2310      	movs	r3, #16
 8005a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a76:	e072      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a35      	ldr	r2, [pc, #212]	@ (8005b54 <UART_SetConfig+0x2f4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d12a      	bne.n	8005ad8 <UART_SetConfig+0x278>
 8005a82:	4b30      	ldr	r3, [pc, #192]	@ (8005b44 <UART_SetConfig+0x2e4>)
 8005a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a90:	d01a      	beq.n	8005ac8 <UART_SetConfig+0x268>
 8005a92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a96:	d81b      	bhi.n	8005ad0 <UART_SetConfig+0x270>
 8005a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a9c:	d00c      	beq.n	8005ab8 <UART_SetConfig+0x258>
 8005a9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005aa2:	d815      	bhi.n	8005ad0 <UART_SetConfig+0x270>
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <UART_SetConfig+0x250>
 8005aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aac:	d008      	beq.n	8005ac0 <UART_SetConfig+0x260>
 8005aae:	e00f      	b.n	8005ad0 <UART_SetConfig+0x270>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ab6:	e052      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005abe:	e04e      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005ac0:	2304      	movs	r3, #4
 8005ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ac6:	e04a      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005ac8:	2308      	movs	r3, #8
 8005aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ace:	e046      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005ad0:	2310      	movs	r3, #16
 8005ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ad6:	e042      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a17      	ldr	r2, [pc, #92]	@ (8005b3c <UART_SetConfig+0x2dc>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d13a      	bne.n	8005b58 <UART_SetConfig+0x2f8>
 8005ae2:	4b18      	ldr	r3, [pc, #96]	@ (8005b44 <UART_SetConfig+0x2e4>)
 8005ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005aec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005af0:	d01a      	beq.n	8005b28 <UART_SetConfig+0x2c8>
 8005af2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005af6:	d81b      	bhi.n	8005b30 <UART_SetConfig+0x2d0>
 8005af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005afc:	d00c      	beq.n	8005b18 <UART_SetConfig+0x2b8>
 8005afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b02:	d815      	bhi.n	8005b30 <UART_SetConfig+0x2d0>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <UART_SetConfig+0x2b0>
 8005b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b0c:	d008      	beq.n	8005b20 <UART_SetConfig+0x2c0>
 8005b0e:	e00f      	b.n	8005b30 <UART_SetConfig+0x2d0>
 8005b10:	2300      	movs	r3, #0
 8005b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b16:	e022      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b1e:	e01e      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005b20:	2304      	movs	r3, #4
 8005b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b26:	e01a      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005b28:	2308      	movs	r3, #8
 8005b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b2e:	e016      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005b30:	2310      	movs	r3, #16
 8005b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b36:	e012      	b.n	8005b5e <UART_SetConfig+0x2fe>
 8005b38:	cfff69f3 	.word	0xcfff69f3
 8005b3c:	40008000 	.word	0x40008000
 8005b40:	40013800 	.word	0x40013800
 8005b44:	40021000 	.word	0x40021000
 8005b48:	40004400 	.word	0x40004400
 8005b4c:	40004800 	.word	0x40004800
 8005b50:	40004c00 	.word	0x40004c00
 8005b54:	40005000 	.word	0x40005000
 8005b58:	2310      	movs	r3, #16
 8005b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4aae      	ldr	r2, [pc, #696]	@ (8005e1c <UART_SetConfig+0x5bc>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	f040 8097 	bne.w	8005c98 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d823      	bhi.n	8005bba <UART_SetConfig+0x35a>
 8005b72:	a201      	add	r2, pc, #4	@ (adr r2, 8005b78 <UART_SetConfig+0x318>)
 8005b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b78:	08005b9d 	.word	0x08005b9d
 8005b7c:	08005bbb 	.word	0x08005bbb
 8005b80:	08005ba5 	.word	0x08005ba5
 8005b84:	08005bbb 	.word	0x08005bbb
 8005b88:	08005bab 	.word	0x08005bab
 8005b8c:	08005bbb 	.word	0x08005bbb
 8005b90:	08005bbb 	.word	0x08005bbb
 8005b94:	08005bbb 	.word	0x08005bbb
 8005b98:	08005bb3 	.word	0x08005bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b9c:	f7fd fdc0 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
 8005ba0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ba2:	e010      	b.n	8005bc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba4:	4b9e      	ldr	r3, [pc, #632]	@ (8005e20 <UART_SetConfig+0x5c0>)
 8005ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ba8:	e00d      	b.n	8005bc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005baa:	f7fd fd4b 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 8005bae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bb0:	e009      	b.n	8005bc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bb8:	e005      	b.n	8005bc6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005bc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 8130 	beq.w	8005e2e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd2:	4a94      	ldr	r2, [pc, #592]	@ (8005e24 <UART_SetConfig+0x5c4>)
 8005bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005be0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	4613      	mov	r3, r2
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	4413      	add	r3, r2
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d305      	bcc.n	8005bfe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d903      	bls.n	8005c06 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c04:	e113      	b.n	8005e2e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	2200      	movs	r2, #0
 8005c0a:	60bb      	str	r3, [r7, #8]
 8005c0c:	60fa      	str	r2, [r7, #12]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c12:	4a84      	ldr	r2, [pc, #528]	@ (8005e24 <UART_SetConfig+0x5c4>)
 8005c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	603b      	str	r3, [r7, #0]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c28:	f7fa ffc4 	bl	8000bb4 <__aeabi_uldivmod>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4610      	mov	r0, r2
 8005c32:	4619      	mov	r1, r3
 8005c34:	f04f 0200 	mov.w	r2, #0
 8005c38:	f04f 0300 	mov.w	r3, #0
 8005c3c:	020b      	lsls	r3, r1, #8
 8005c3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c42:	0202      	lsls	r2, r0, #8
 8005c44:	6979      	ldr	r1, [r7, #20]
 8005c46:	6849      	ldr	r1, [r1, #4]
 8005c48:	0849      	lsrs	r1, r1, #1
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	4605      	mov	r5, r0
 8005c50:	eb12 0804 	adds.w	r8, r2, r4
 8005c54:	eb43 0905 	adc.w	r9, r3, r5
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	469a      	mov	sl, r3
 8005c60:	4693      	mov	fp, r2
 8005c62:	4652      	mov	r2, sl
 8005c64:	465b      	mov	r3, fp
 8005c66:	4640      	mov	r0, r8
 8005c68:	4649      	mov	r1, r9
 8005c6a:	f7fa ffa3 	bl	8000bb4 <__aeabi_uldivmod>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4613      	mov	r3, r2
 8005c74:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c7c:	d308      	bcc.n	8005c90 <UART_SetConfig+0x430>
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c84:	d204      	bcs.n	8005c90 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6a3a      	ldr	r2, [r7, #32]
 8005c8c:	60da      	str	r2, [r3, #12]
 8005c8e:	e0ce      	b.n	8005e2e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c96:	e0ca      	b.n	8005e2e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ca0:	d166      	bne.n	8005d70 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005ca2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ca6:	2b08      	cmp	r3, #8
 8005ca8:	d827      	bhi.n	8005cfa <UART_SetConfig+0x49a>
 8005caa:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb0 <UART_SetConfig+0x450>)
 8005cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb0:	08005cd5 	.word	0x08005cd5
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	08005ce5 	.word	0x08005ce5
 8005cbc:	08005cfb 	.word	0x08005cfb
 8005cc0:	08005ceb 	.word	0x08005ceb
 8005cc4:	08005cfb 	.word	0x08005cfb
 8005cc8:	08005cfb 	.word	0x08005cfb
 8005ccc:	08005cfb 	.word	0x08005cfb
 8005cd0:	08005cf3 	.word	0x08005cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd4:	f7fd fd24 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
 8005cd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cda:	e014      	b.n	8005d06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cdc:	f7fd fd36 	bl	800374c <HAL_RCC_GetPCLK2Freq>
 8005ce0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ce2:	e010      	b.n	8005d06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ce4:	4b4e      	ldr	r3, [pc, #312]	@ (8005e20 <UART_SetConfig+0x5c0>)
 8005ce6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ce8:	e00d      	b.n	8005d06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cea:	f7fd fcab 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 8005cee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cf0:	e009      	b.n	8005d06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cf6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cf8:	e005      	b.n	8005d06 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005d04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 8090 	beq.w	8005e2e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d12:	4a44      	ldr	r2, [pc, #272]	@ (8005e24 <UART_SetConfig+0x5c4>)
 8005d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d20:	005a      	lsls	r2, r3, #1
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	085b      	lsrs	r3, r3, #1
 8005d28:	441a      	add	r2, r3
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	2b0f      	cmp	r3, #15
 8005d38:	d916      	bls.n	8005d68 <UART_SetConfig+0x508>
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d40:	d212      	bcs.n	8005d68 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f023 030f 	bic.w	r3, r3, #15
 8005d4a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	085b      	lsrs	r3, r3, #1
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	8bfb      	ldrh	r3, [r7, #30]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	8bfa      	ldrh	r2, [r7, #30]
 8005d64:	60da      	str	r2, [r3, #12]
 8005d66:	e062      	b.n	8005e2e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d6e:	e05e      	b.n	8005e2e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d74:	2b08      	cmp	r3, #8
 8005d76:	d828      	bhi.n	8005dca <UART_SetConfig+0x56a>
 8005d78:	a201      	add	r2, pc, #4	@ (adr r2, 8005d80 <UART_SetConfig+0x520>)
 8005d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7e:	bf00      	nop
 8005d80:	08005da5 	.word	0x08005da5
 8005d84:	08005dad 	.word	0x08005dad
 8005d88:	08005db5 	.word	0x08005db5
 8005d8c:	08005dcb 	.word	0x08005dcb
 8005d90:	08005dbb 	.word	0x08005dbb
 8005d94:	08005dcb 	.word	0x08005dcb
 8005d98:	08005dcb 	.word	0x08005dcb
 8005d9c:	08005dcb 	.word	0x08005dcb
 8005da0:	08005dc3 	.word	0x08005dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005da4:	f7fd fcbc 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
 8005da8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005daa:	e014      	b.n	8005dd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dac:	f7fd fcce 	bl	800374c <HAL_RCC_GetPCLK2Freq>
 8005db0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005db2:	e010      	b.n	8005dd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005db4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e20 <UART_SetConfig+0x5c0>)
 8005db6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005db8:	e00d      	b.n	8005dd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dba:	f7fd fc43 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 8005dbe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dc0:	e009      	b.n	8005dd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005dc8:	e005      	b.n	8005dd6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005dd4:	bf00      	nop
    }

    if (pclk != 0U)
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d028      	beq.n	8005e2e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de0:	4a10      	ldr	r2, [pc, #64]	@ (8005e24 <UART_SetConfig+0x5c4>)
 8005de2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005de6:	461a      	mov	r2, r3
 8005de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dea:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	441a      	add	r2, r3
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	2b0f      	cmp	r3, #15
 8005e04:	d910      	bls.n	8005e28 <UART_SetConfig+0x5c8>
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e0c:	d20c      	bcs.n	8005e28 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60da      	str	r2, [r3, #12]
 8005e18:	e009      	b.n	8005e2e <UART_SetConfig+0x5ce>
 8005e1a:	bf00      	nop
 8005e1c:	40008000 	.word	0x40008000
 8005e20:	00f42400 	.word	0x00f42400
 8005e24:	08006524 	.word	0x08006524
      }
      else
      {
        ret = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2200      	movs	r2, #0
 8005e42:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2200      	movs	r2, #0
 8005e48:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e4a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3730      	adds	r7, #48	@ 0x30
 8005e52:	46bd      	mov	sp, r7
 8005e54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00a      	beq.n	8005ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eec:	f003 0310 	and.w	r3, r3, #16
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00a      	beq.n	8005f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0e:	f003 0320 	and.w	r3, r3, #32
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01a      	beq.n	8005f6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f56:	d10a      	bne.n	8005f6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	605a      	str	r2, [r3, #4]
  }
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b098      	sub	sp, #96	@ 0x60
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fac:	f7fc fa0a 	bl	80023c4 <HAL_GetTick>
 8005fb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b08      	cmp	r3, #8
 8005fbe:	d12f      	bne.n	8006020 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f88e 	bl	80060f0 <UART_WaitOnFlagUntilTimeout>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d022      	beq.n	8006020 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ffa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ffe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e6      	bne.n	8005fda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e063      	b.n	80060e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0304 	and.w	r3, r3, #4
 800602a:	2b04      	cmp	r3, #4
 800602c:	d149      	bne.n	80060c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800602e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006036:	2200      	movs	r2, #0
 8006038:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f857 	bl	80060f0 <UART_WaitOnFlagUntilTimeout>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d03c      	beq.n	80060c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	623b      	str	r3, [r7, #32]
   return(result);
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800605c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006066:	633b      	str	r3, [r7, #48]	@ 0x30
 8006068:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800606c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e6      	bne.n	8006048 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3308      	adds	r3, #8
 8006080:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	60fb      	str	r3, [r7, #12]
   return(result);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f023 0301 	bic.w	r3, r3, #1
 8006090:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3308      	adds	r3, #8
 8006098:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800609a:	61fa      	str	r2, [r7, #28]
 800609c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	69b9      	ldr	r1, [r7, #24]
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	617b      	str	r3, [r7, #20]
   return(result);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e5      	bne.n	800607a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e012      	b.n	80060e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3758      	adds	r7, #88	@ 0x58
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	603b      	str	r3, [r7, #0]
 80060fc:	4613      	mov	r3, r2
 80060fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006100:	e04f      	b.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006108:	d04b      	beq.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610a:	f7fc f95b 	bl	80023c4 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	429a      	cmp	r2, r3
 8006118:	d302      	bcc.n	8006120 <UART_WaitOnFlagUntilTimeout+0x30>
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e04e      	b.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0304 	and.w	r3, r3, #4
 800612e:	2b00      	cmp	r3, #0
 8006130:	d037      	beq.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2b80      	cmp	r3, #128	@ 0x80
 8006136:	d034      	beq.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b40      	cmp	r3, #64	@ 0x40
 800613c:	d031      	beq.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	f003 0308 	and.w	r3, r3, #8
 8006148:	2b08      	cmp	r3, #8
 800614a:	d110      	bne.n	800616e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2208      	movs	r2, #8
 8006152:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 f838 	bl	80061ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2208      	movs	r2, #8
 800615e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e029      	b.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006178:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800617c:	d111      	bne.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006186:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 f81e 	bl	80061ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2220      	movs	r2, #32
 8006192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e00f      	b.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69da      	ldr	r2, [r3, #28]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	4013      	ands	r3, r2
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	bf0c      	ite	eq
 80061b2:	2301      	moveq	r3, #1
 80061b4:	2300      	movne	r3, #0
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	79fb      	ldrb	r3, [r7, #7]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d0a0      	beq.n	8006102 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b095      	sub	sp, #84	@ 0x54
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80061f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e6      	bne.n	80061d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3308      	adds	r3, #8
 800620a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	e853 3f00 	ldrex	r3, [r3]
 8006212:	61fb      	str	r3, [r7, #28]
   return(result);
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800621a:	f023 0301 	bic.w	r3, r3, #1
 800621e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3308      	adds	r3, #8
 8006226:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006228:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800622a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800622e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006230:	e841 2300 	strex	r3, r2, [r1]
 8006234:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e3      	bne.n	8006204 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006240:	2b01      	cmp	r3, #1
 8006242:	d118      	bne.n	8006276 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	60bb      	str	r3, [r7, #8]
   return(result);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f023 0310 	bic.w	r3, r3, #16
 8006258:	647b      	str	r3, [r7, #68]	@ 0x44
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006262:	61bb      	str	r3, [r7, #24]
 8006264:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	6979      	ldr	r1, [r7, #20]
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	613b      	str	r3, [r7, #16]
   return(result);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e6      	bne.n	8006244 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800628a:	bf00      	nop
 800628c:	3754      	adds	r7, #84	@ 0x54
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006296:	b480      	push	{r7}
 8006298:	b085      	sub	sp, #20
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_UARTEx_DisableFifoMode+0x16>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e027      	b.n	80062fc <HAL_UARTEx_DisableFifoMode+0x66>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2224      	movs	r2, #36	@ 0x24
 80062b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0201 	bic.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80062da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800631c:	2302      	movs	r3, #2
 800631e:	e02d      	b.n	800637c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2224      	movs	r2, #36	@ 0x24
 800632c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0201 	bic.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f84f 	bl	8006400 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2220      	movs	r2, #32
 800636e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006398:	2302      	movs	r3, #2
 800639a:	e02d      	b.n	80063f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2224      	movs	r2, #36	@ 0x24
 80063a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0201 	bic.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f811 	bl	8006400 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800640c:	2b00      	cmp	r3, #0
 800640e:	d108      	bne.n	8006422 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006420:	e031      	b.n	8006486 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006422:	2308      	movs	r3, #8
 8006424:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006426:	2308      	movs	r3, #8
 8006428:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	0e5b      	lsrs	r3, r3, #25
 8006432:	b2db      	uxtb	r3, r3
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	0f5b      	lsrs	r3, r3, #29
 8006442:	b2db      	uxtb	r3, r3
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800644a:	7bbb      	ldrb	r3, [r7, #14]
 800644c:	7b3a      	ldrb	r2, [r7, #12]
 800644e:	4911      	ldr	r1, [pc, #68]	@ (8006494 <UARTEx_SetNbDataToProcess+0x94>)
 8006450:	5c8a      	ldrb	r2, [r1, r2]
 8006452:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006456:	7b3a      	ldrb	r2, [r7, #12]
 8006458:	490f      	ldr	r1, [pc, #60]	@ (8006498 <UARTEx_SetNbDataToProcess+0x98>)
 800645a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800645c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006460:	b29a      	uxth	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	7b7a      	ldrb	r2, [r7, #13]
 800646c:	4909      	ldr	r1, [pc, #36]	@ (8006494 <UARTEx_SetNbDataToProcess+0x94>)
 800646e:	5c8a      	ldrb	r2, [r1, r2]
 8006470:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006474:	7b7a      	ldrb	r2, [r7, #13]
 8006476:	4908      	ldr	r1, [pc, #32]	@ (8006498 <UARTEx_SetNbDataToProcess+0x98>)
 8006478:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800647a:	fb93 f3f2 	sdiv	r3, r3, r2
 800647e:	b29a      	uxth	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006486:	bf00      	nop
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	0800653c 	.word	0x0800653c
 8006498:	08006544 	.word	0x08006544

0800649c <memset>:
 800649c:	4402      	add	r2, r0
 800649e:	4603      	mov	r3, r0
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d100      	bne.n	80064a6 <memset+0xa>
 80064a4:	4770      	bx	lr
 80064a6:	f803 1b01 	strb.w	r1, [r3], #1
 80064aa:	e7f9      	b.n	80064a0 <memset+0x4>

080064ac <__libc_init_array>:
 80064ac:	b570      	push	{r4, r5, r6, lr}
 80064ae:	4d0d      	ldr	r5, [pc, #52]	@ (80064e4 <__libc_init_array+0x38>)
 80064b0:	4c0d      	ldr	r4, [pc, #52]	@ (80064e8 <__libc_init_array+0x3c>)
 80064b2:	1b64      	subs	r4, r4, r5
 80064b4:	10a4      	asrs	r4, r4, #2
 80064b6:	2600      	movs	r6, #0
 80064b8:	42a6      	cmp	r6, r4
 80064ba:	d109      	bne.n	80064d0 <__libc_init_array+0x24>
 80064bc:	4d0b      	ldr	r5, [pc, #44]	@ (80064ec <__libc_init_array+0x40>)
 80064be:	4c0c      	ldr	r4, [pc, #48]	@ (80064f0 <__libc_init_array+0x44>)
 80064c0:	f000 f818 	bl	80064f4 <_init>
 80064c4:	1b64      	subs	r4, r4, r5
 80064c6:	10a4      	asrs	r4, r4, #2
 80064c8:	2600      	movs	r6, #0
 80064ca:	42a6      	cmp	r6, r4
 80064cc:	d105      	bne.n	80064da <__libc_init_array+0x2e>
 80064ce:	bd70      	pop	{r4, r5, r6, pc}
 80064d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d4:	4798      	blx	r3
 80064d6:	3601      	adds	r6, #1
 80064d8:	e7ee      	b.n	80064b8 <__libc_init_array+0xc>
 80064da:	f855 3b04 	ldr.w	r3, [r5], #4
 80064de:	4798      	blx	r3
 80064e0:	3601      	adds	r6, #1
 80064e2:	e7f2      	b.n	80064ca <__libc_init_array+0x1e>
 80064e4:	08006554 	.word	0x08006554
 80064e8:	08006554 	.word	0x08006554
 80064ec:	08006554 	.word	0x08006554
 80064f0:	08006558 	.word	0x08006558

080064f4 <_init>:
 80064f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f6:	bf00      	nop
 80064f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064fa:	bc08      	pop	{r3}
 80064fc:	469e      	mov	lr, r3
 80064fe:	4770      	bx	lr

08006500 <_fini>:
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006502:	bf00      	nop
 8006504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006506:	bc08      	pop	{r3}
 8006508:	469e      	mov	lr, r3
 800650a:	4770      	bx	lr
