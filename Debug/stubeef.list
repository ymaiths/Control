
stubeef.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006354  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800652c  0800652c  0000752c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800656c  0800656c  00008020  2**0
                  CONTENTS
  4 .ARM          00000008  0800656c  0800656c  0000756c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006574  08006574  00008020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006574  08006574  00007574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006578  08006578  00007578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800657c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000020  0800659c  00008020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  0800659c  000082ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e1e  00000000  00000000  00008050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002854  00000000  00000000  0001de6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  000206c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f39  00000000  00000000  00021a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027643  00000000  00000000  00022951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e74  00000000  00000000  00049f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fffc1  00000000  00000000  00061e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161dc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005518  00000000  00000000  00161e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a7  00000000  00000000  00167324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006514 	.word	0x08006514

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08006514 	.word	0x08006514

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b96a 	b.w	8000ea0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	460c      	mov	r4, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14e      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	458c      	cmp	ip, r1
 8000bf4:	4686      	mov	lr, r0
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	d962      	bls.n	8000cc2 <__udivmoddi4+0xde>
 8000bfc:	b14a      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	4091      	lsls	r1, r2
 8000c04:	fa20 f303 	lsr.w	r3, r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f f68c 	uxth.w	r6, ip
 8000c1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c22:	fb07 1114 	mls	r1, r7, r4, r1
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb04 f106 	mul.w	r1, r4, r6
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3a:	f080 8112 	bcs.w	8000e62 <__udivmoddi4+0x27e>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 810f 	bls.w	8000e62 <__udivmoddi4+0x27e>
 8000c44:	3c02      	subs	r4, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a59      	subs	r1, r3, r1
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c52:	fb07 1110 	mls	r1, r7, r0, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb00 f606 	mul.w	r6, r0, r6
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x94>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6a:	f080 80fc 	bcs.w	8000e66 <__udivmoddi4+0x282>
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	f240 80f9 	bls.w	8000e66 <__udivmoddi4+0x282>
 8000c74:	4463      	add	r3, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	1b9b      	subs	r3, r3, r6
 8000c7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa6>
 8000c82:	40d3      	lsrs	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xba>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb4>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x150>
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xcc>
 8000caa:	4290      	cmp	r0, r2
 8000cac:	f0c0 80f0 	bcc.w	8000e90 <__udivmoddi4+0x2ac>
 8000cb0:	1a86      	subs	r6, r0, r2
 8000cb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d0e6      	beq.n	8000c8a <__udivmoddi4+0xa6>
 8000cbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc0:	e7e3      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x204>
 8000cc8:	eba1 040c 	sub.w	r4, r1, ip
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa1f f78c 	uxth.w	r7, ip
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cde:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb07 f006 	mul.w	r0, r7, r6
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x11c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x11a>
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cfe:	4626      	mov	r6, r4
 8000d00:	1a1c      	subs	r4, r3, r0
 8000d02:	fa1f f38e 	uxth.w	r3, lr
 8000d06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	429f      	cmp	r7, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x148>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x146>
 8000d24:	429f      	cmp	r7, r3
 8000d26:	f200 80b0 	bhi.w	8000e8a <__udivmoddi4+0x2a6>
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	1bdb      	subs	r3, r3, r7
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x9c>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d44:	fa04 f301 	lsl.w	r3, r4, r1
 8000d48:	ea43 030c 	orr.w	r3, r3, ip
 8000d4c:	40f4      	lsrs	r4, r6
 8000d4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d52:	0c38      	lsrs	r0, r7, #16
 8000d54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d58:	fbb4 fef0 	udiv	lr, r4, r0
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fb00 441e 	mls	r4, r0, lr, r4
 8000d64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d68:	fb0e f90c 	mul.w	r9, lr, ip
 8000d6c:	45a1      	cmp	r9, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x1a6>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7a:	f080 8084 	bcs.w	8000e86 <__udivmoddi4+0x2a2>
 8000d7e:	45a1      	cmp	r9, r4
 8000d80:	f240 8081 	bls.w	8000e86 <__udivmoddi4+0x2a2>
 8000d84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	eba4 0409 	sub.w	r4, r4, r9
 8000d8e:	fa1f f983 	uxth.w	r9, r3
 8000d92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d96:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1d2>
 8000da6:	193c      	adds	r4, r7, r4
 8000da8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dac:	d267      	bcs.n	8000e7e <__udivmoddi4+0x29a>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d965      	bls.n	8000e7e <__udivmoddi4+0x29a>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dba:	fba0 9302 	umull	r9, r3, r0, r2
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	429c      	cmp	r4, r3
 8000dc4:	46ce      	mov	lr, r9
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	d351      	bcc.n	8000e6e <__udivmoddi4+0x28a>
 8000dca:	d04e      	beq.n	8000e6a <__udivmoddi4+0x286>
 8000dcc:	b155      	cbz	r5, 8000de4 <__udivmoddi4+0x200>
 8000dce:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	40cb      	lsrs	r3, r1
 8000ddc:	431e      	orrs	r6, r3
 8000dde:	40cc      	lsrs	r4, r1
 8000de0:	e9c5 6400 	strd	r6, r4, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	e750      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f103 	lsr.w	r1, r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa24 f303 	lsr.w	r3, r4, r3
 8000df8:	4094      	lsls	r4, r2
 8000dfa:	430c      	orrs	r4, r1
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e16:	fb00 f107 	mul.w	r1, r0, r7
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x24c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e26:	d22c      	bcs.n	8000e82 <__udivmoddi4+0x29e>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d92a      	bls.n	8000e82 <__udivmoddi4+0x29e>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e38:	fb08 3311 	mls	r3, r8, r1, r3
 8000e3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e40:	fb01 f307 	mul.w	r3, r1, r7
 8000e44:	42a3      	cmp	r3, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x276>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e50:	d213      	bcs.n	8000e7a <__udivmoddi4+0x296>
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	d911      	bls.n	8000e7a <__udivmoddi4+0x296>
 8000e56:	3902      	subs	r1, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	1ae4      	subs	r4, r4, r3
 8000e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e60:	e739      	b.n	8000cd6 <__udivmoddi4+0xf2>
 8000e62:	4604      	mov	r4, r0
 8000e64:	e6f0      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e706      	b.n	8000c78 <__udivmoddi4+0x94>
 8000e6a:	45c8      	cmp	r8, r9
 8000e6c:	d2ae      	bcs.n	8000dcc <__udivmoddi4+0x1e8>
 8000e6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e76:	3801      	subs	r0, #1
 8000e78:	e7a8      	b.n	8000dcc <__udivmoddi4+0x1e8>
 8000e7a:	4631      	mov	r1, r6
 8000e7c:	e7ed      	b.n	8000e5a <__udivmoddi4+0x276>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e799      	b.n	8000db6 <__udivmoddi4+0x1d2>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e7d4      	b.n	8000e30 <__udivmoddi4+0x24c>
 8000e86:	46d6      	mov	lr, sl
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1a6>
 8000e8a:	4463      	add	r3, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e74d      	b.n	8000d2c <__udivmoddi4+0x148>
 8000e90:	4606      	mov	r6, r0
 8000e92:	4623      	mov	r3, r4
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70f      	b.n	8000cb8 <__udivmoddi4+0xd4>
 8000e98:	3e02      	subs	r6, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	e730      	b.n	8000d00 <__udivmoddi4+0x11c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eac:	f001 fa35 	bl	800231a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb0:	f000 f8f2 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb4:	f000 fb4c 	bl	8001550 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000eb8:	f000 f97a 	bl	80011b0 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8000ebc:	f000 f938 	bl	8001130 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000ec0:	f000 f9c0 	bl	8001244 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ec4:	f000 faa0 	bl	8001408 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000ec8:	f000 fa50 	bl	800136c <MX_TIM2_Init>
  MX_TIM5_Init();
 8000ecc:	f000 faf2 	bl	80014b4 <MX_TIM5_Init>
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
//
//  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
//  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 500);
//pwm setup
	HAL_TIM_Base_Start(&htim1);
 8000ed0:	485a      	ldr	r0, [pc, #360]	@ (800103c <main+0x198>)
 8000ed2:	f002 ff4d 	bl	8003d70 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4858      	ldr	r0, [pc, #352]	@ (800103c <main+0x198>)
 8000eda:	f003 f889 	bl	8003ff0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000ede:	4b57      	ldr	r3, [pc, #348]	@ (800103c <main+0x198>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000ee6:	213c      	movs	r1, #60	@ 0x3c
 8000ee8:	4855      	ldr	r0, [pc, #340]	@ (8001040 <main+0x19c>)
 8000eea:	f003 fa39 	bl	8004360 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8000eee:	4855      	ldr	r0, [pc, #340]	@ (8001044 <main+0x1a0>)
 8000ef0:	f002 ffae 	bl	8003e50 <HAL_TIM_Base_Start_IT>
	upper = 0;
 8000ef4:	4954      	ldr	r1, [pc, #336]	@ (8001048 <main+0x1a4>)
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	f04f 0300 	mov.w	r3, #0
 8000efe:	e9c1 2300 	strd	r2, r3, [r1]

	PID_init(&pid_control, pid_p, pid_i, pid_d ,timerange);
 8000f02:	4b52      	ldr	r3, [pc, #328]	@ (800104c <main+0x1a8>)
 8000f04:	edd3 7a00 	vldr	s15, [r3]
 8000f08:	4b51      	ldr	r3, [pc, #324]	@ (8001050 <main+0x1ac>)
 8000f0a:	ed93 7a00 	vldr	s14, [r3]
 8000f0e:	4b51      	ldr	r3, [pc, #324]	@ (8001054 <main+0x1b0>)
 8000f10:	edd3 6a00 	vldr	s13, [r3]
 8000f14:	4b50      	ldr	r3, [pc, #320]	@ (8001058 <main+0x1b4>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	ee06 3a10 	vmov	s12, r3
 8000f1c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8000f20:	eef0 1a46 	vmov.f32	s3, s12
 8000f24:	eeb0 1a66 	vmov.f32	s2, s13
 8000f28:	eef0 0a47 	vmov.f32	s1, s14
 8000f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f30:	484a      	ldr	r0, [pc, #296]	@ (800105c <main+0x1b8>)
 8000f32:	f000 fe31 	bl	8001b98 <PID_init>
//	  _micros = Micros();
//	 Degree = QEIReadRaw*360/8192;
//	 Radian = QEIReadRaw*(2*3.14)/8192;
		//Call every 0.1 s
		static uint64_t timestamp = 0;
		int64_t currentTime = Micros();
 8000f36:	f000 fbe9 	bl	800170c <Micros>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	e9c7 2300 	strd	r2, r3, [r7]
		ReadLimit();
 8000f42:	f000 fd57 	bl	80019f4 <ReadLimit>
		if (currentTime > timestamp) {
 8000f46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f4a:	4945      	ldr	r1, [pc, #276]	@ (8001060 <main+0x1bc>)
 8000f4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f50:	4290      	cmp	r0, r2
 8000f52:	eb71 0303 	sbcs.w	r3, r1, r3
 8000f56:	d26d      	bcs.n	8001034 <main+0x190>
			timestamp = currentTime + timerange;	 //us
 8000f58:	4b3f      	ldr	r3, [pc, #252]	@ (8001058 <main+0x1b4>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	2200      	movs	r2, #0
 8000f60:	461c      	mov	r4, r3
 8000f62:	4615      	mov	r5, r2
 8000f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f68:	eb14 0802 	adds.w	r8, r4, r2
 8000f6c:	eb45 0903 	adc.w	r9, r5, r3
 8000f70:	4642      	mov	r2, r8
 8000f72:	464b      	mov	r3, r9
 8000f74:	493a      	ldr	r1, [pc, #232]	@ (8001060 <main+0x1bc>)
 8000f76:	e9c1 2300 	strd	r2, r3, [r1]
//		 QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
			QEIEncoderPosVel_Update();
 8000f7a:	f000 fbf9 	bl	8001770 <QEIEncoderPosVel_Update>
//		 }
//		 if (diffPos < -100) {
//			 numOfRound += 1;
//		 }

			realPos = QEIReadRaw + numOfRound * 200;
 8000f7e:	4b39      	ldr	r3, [pc, #228]	@ (8001064 <main+0x1c0>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	23c8      	movs	r3, #200	@ 0xc8
 8000f86:	fb02 f303 	mul.w	r3, r2, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b36      	ldr	r3, [pc, #216]	@ (8001068 <main+0x1c4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a36      	ldr	r2, [pc, #216]	@ (800106c <main+0x1c8>)
 8000f94:	6013      	str	r3, [r2, #0]
			velodegree = QEIdata.QEIAngularVelocity;
 8000f96:	4b36      	ldr	r3, [pc, #216]	@ (8001070 <main+0x1cc>)
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	4a36      	ldr	r2, [pc, #216]	@ (8001074 <main+0x1d0>)
 8000f9c:	6013      	str	r3, [r2, #0]
			velodegree = (velodegree * 60) / 800;
 8000f9e:	4b35      	ldr	r3, [pc, #212]	@ (8001074 <main+0x1d0>)
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001078 <main+0x1d4>
 8000fa8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fac:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800107c <main+0x1d8>
 8000fb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	@ (8001074 <main+0x1d0>)
 8000fb6:	edc3 7a00 	vstr	s15, [r3]
			linearspeed = velodegree * 14 / 60.0;
 8000fba:	4b2e      	ldr	r3, [pc, #184]	@ (8001074 <main+0x1d0>)
 8000fbc:	edd3 7a00 	vldr	s15, [r3]
 8000fc0:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 8000fc4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fc8:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001078 <main+0x1d4>
 8000fcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8001080 <main+0x1dc>)
 8000fd2:	edc3 7a00 	vstr	s15, [r3]

//		 if(velodegree > 0){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,1);}
//		 else{HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,0);}
			if (mode == 1) {
 8000fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001084 <main+0x1e0>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d124      	bne.n	8001028 <main+0x184>
				ReadButton();
 8000fde:	f000 fcc9 	bl	8001974 <ReadButton>
				if (bt3 == 0) {
 8000fe2:	4b29      	ldr	r3, [pc, #164]	@ (8001088 <main+0x1e4>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10a      	bne.n	8001000 <main+0x15c>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2108      	movs	r1, #8
 8000fee:	4827      	ldr	r0, [pc, #156]	@ (800108c <main+0x1e8>)
 8000ff0:	f001 fcae 	bl	8002950 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 8000ff4:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <main+0x1ec>)
 8000ff6:	881a      	ldrh	r2, [r3, #0]
 8000ff8:	4b10      	ldr	r3, [pc, #64]	@ (800103c <main+0x198>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ffe:	e019      	b.n	8001034 <main+0x190>
				} else if (bt2 == 0) {
 8001000:	4b24      	ldr	r3, [pc, #144]	@ (8001094 <main+0x1f0>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d10a      	bne.n	800101e <main+0x17a>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2108      	movs	r1, #8
 800100c:	481f      	ldr	r0, [pc, #124]	@ (800108c <main+0x1e8>)
 800100e:	f001 fc9f 	bl	8002950 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 8001012:	4b1f      	ldr	r3, [pc, #124]	@ (8001090 <main+0x1ec>)
 8001014:	881a      	ldrh	r2, [r3, #0]
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <main+0x198>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	635a      	str	r2, [r3, #52]	@ 0x34
 800101c:	e00a      	b.n	8001034 <main+0x190>
				} else {
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800101e:	4b07      	ldr	r3, [pc, #28]	@ (800103c <main+0x198>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2200      	movs	r2, #0
 8001024:	635a      	str	r2, [r3, #52]	@ 0x34
 8001026:	e005      	b.n	8001034 <main+0x190>
				}
			} else if (mode == 2) {
 8001028:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <main+0x1e0>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d101      	bne.n	8001034 <main+0x190>
				MotorDrive();
 8001030:	f000 fcfe 	bl	8001a30 <MotorDrive>
			}
		}

		ReadLogicConv();
 8001034:	f000 fc6c 	bl	8001910 <ReadLogicConv>
	while (1) {
 8001038:	e77d      	b.n	8000f36 <main+0x92>
 800103a:	bf00      	nop
 800103c:	20000124 	.word	0x20000124
 8001040:	200001bc 	.word	0x200001bc
 8001044:	20000208 	.word	0x20000208
 8001048:	20000258 	.word	0x20000258
 800104c:	20000008 	.word	0x20000008
 8001050:	2000000c 	.word	0x2000000c
 8001054:	20000010 	.word	0x20000010
 8001058:	20000000 	.word	0x20000000
 800105c:	200002c0 	.word	0x200002c0
 8001060:	200002d8 	.word	0x200002d8
 8001064:	20000264 	.word	0x20000264
 8001068:	2000026c 	.word	0x2000026c
 800106c:	20000268 	.word	0x20000268
 8001070:	20000278 	.word	0x20000278
 8001074:	20000270 	.word	0x20000270
 8001078:	42700000 	.word	0x42700000
 800107c:	44480000 	.word	0x44480000
 8001080:	20000260 	.word	0x20000260
 8001084:	20000004 	.word	0x20000004
 8001088:	200002ae 	.word	0x200002ae
 800108c:	48000800 	.word	0x48000800
 8001090:	20000002 	.word	0x20000002
 8001094:	200002ad 	.word	0x200002ad

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b094      	sub	sp, #80	@ 0x50
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0318 	add.w	r3, r7, #24
 80010a2:	2238      	movs	r2, #56	@ 0x38
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f005 fa08 	bl	80064bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f001 fdd0 	bl	8002c60 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ca:	2340      	movs	r3, #64	@ 0x40
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ce:	2302      	movs	r3, #2
 80010d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d2:	2302      	movs	r3, #2
 80010d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010d6:	2304      	movs	r3, #4
 80010d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010da:	2355      	movs	r3, #85	@ 0x55
 80010dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010de:	2302      	movs	r3, #2
 80010e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010e2:	2302      	movs	r3, #2
 80010e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	f107 0318 	add.w	r3, r7, #24
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 fe6a 	bl	8002dc8 <HAL_RCC_OscConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010fa:	f000 fd47 	bl	8001b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fe:	230f      	movs	r3, #15
 8001100:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001102:	2303      	movs	r3, #3
 8001104:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2104      	movs	r1, #4
 8001116:	4618      	mov	r0, r3
 8001118:	f002 f968 	bl	80033ec <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001122:	f000 fd33 	bl	8001b8c <Error_Handler>
  }
}
 8001126:	bf00      	nop
 8001128:	3750      	adds	r7, #80	@ 0x50
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001134:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <MX_I2C1_Init+0x74>)
 8001136:	4a1c      	ldr	r2, [pc, #112]	@ (80011a8 <MX_I2C1_Init+0x78>)
 8001138:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800113a:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <MX_I2C1_Init+0x74>)
 800113c:	4a1b      	ldr	r2, [pc, #108]	@ (80011ac <MX_I2C1_Init+0x7c>)
 800113e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001140:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001146:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <MX_I2C1_Init+0x74>)
 8001148:	2201      	movs	r2, #1
 800114a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800114c:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001152:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <MX_I2C1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <MX_I2C1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <MX_I2C1_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <MX_I2C1_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800116a:	480e      	ldr	r0, [pc, #56]	@ (80011a4 <MX_I2C1_Init+0x74>)
 800116c:	f001 fc45 	bl	80029fa <HAL_I2C_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001176:	f000 fd09 	bl	8001b8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800117a:	2100      	movs	r1, #0
 800117c:	4809      	ldr	r0, [pc, #36]	@ (80011a4 <MX_I2C1_Init+0x74>)
 800117e:	f001 fcd7 	bl	8002b30 <HAL_I2CEx_ConfigAnalogFilter>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001188:	f000 fd00 	bl	8001b8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800118c:	2100      	movs	r1, #0
 800118e:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <MX_I2C1_Init+0x74>)
 8001190:	f001 fd19 	bl	8002bc6 <HAL_I2CEx_ConfigDigitalFilter>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800119a:	f000 fcf7 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000003c 	.word	0x2000003c
 80011a8:	40005400 	.word	0x40005400
 80011ac:	30a0a7fb 	.word	0x30a0a7fb

080011b0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011b4:	4b21      	ldr	r3, [pc, #132]	@ (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011b6:	4a22      	ldr	r2, [pc, #136]	@ (8001240 <MX_LPUART1_UART_Init+0x90>)
 80011b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80011ba:	4b20      	ldr	r3, [pc, #128]	@ (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011c8:	4b1c      	ldr	r3, [pc, #112]	@ (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011ce:	4b1b      	ldr	r3, [pc, #108]	@ (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011d4:	4b19      	ldr	r3, [pc, #100]	@ (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011d6:	220c      	movs	r2, #12
 80011d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e0:	4b16      	ldr	r3, [pc, #88]	@ (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ec:	4b13      	ldr	r3, [pc, #76]	@ (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011f2:	4812      	ldr	r0, [pc, #72]	@ (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011f4:	f004 faf4 	bl	80057e0 <HAL_UART_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80011fe:	f000 fcc5 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001202:	2100      	movs	r1, #0
 8001204:	480d      	ldr	r0, [pc, #52]	@ (800123c <MX_LPUART1_UART_Init+0x8c>)
 8001206:	f005 f88f 	bl	8006328 <HAL_UARTEx_SetTxFifoThreshold>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001210:	f000 fcbc 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001214:	2100      	movs	r1, #0
 8001216:	4809      	ldr	r0, [pc, #36]	@ (800123c <MX_LPUART1_UART_Init+0x8c>)
 8001218:	f005 f8c4 	bl	80063a4 <HAL_UARTEx_SetRxFifoThreshold>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001222:	f000 fcb3 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_LPUART1_UART_Init+0x8c>)
 8001228:	f005 f845 	bl	80062b6 <HAL_UARTEx_DisableFifoMode>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001232:	f000 fcab 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000090 	.word	0x20000090
 8001240:	40008000 	.word	0x40008000

08001244 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b098      	sub	sp, #96	@ 0x60
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001256:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
 8001266:	615a      	str	r2, [r3, #20]
 8001268:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2234      	movs	r2, #52	@ 0x34
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f005 f923 	bl	80064bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001276:	4b3b      	ldr	r3, [pc, #236]	@ (8001364 <MX_TIM1_Init+0x120>)
 8001278:	4a3b      	ldr	r2, [pc, #236]	@ (8001368 <MX_TIM1_Init+0x124>)
 800127a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 800127c:	4b39      	ldr	r3, [pc, #228]	@ (8001364 <MX_TIM1_Init+0x120>)
 800127e:	22a9      	movs	r2, #169	@ 0xa9
 8001280:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001282:	4b38      	ldr	r3, [pc, #224]	@ (8001364 <MX_TIM1_Init+0x120>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 8001288:	4b36      	ldr	r3, [pc, #216]	@ (8001364 <MX_TIM1_Init+0x120>)
 800128a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800128e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001290:	4b34      	ldr	r3, [pc, #208]	@ (8001364 <MX_TIM1_Init+0x120>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001296:	4b33      	ldr	r3, [pc, #204]	@ (8001364 <MX_TIM1_Init+0x120>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129c:	4b31      	ldr	r3, [pc, #196]	@ (8001364 <MX_TIM1_Init+0x120>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012a2:	4830      	ldr	r0, [pc, #192]	@ (8001364 <MX_TIM1_Init+0x120>)
 80012a4:	f002 fe4c 	bl	8003f40 <HAL_TIM_PWM_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80012ae:	f000 fc6d 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012be:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012c2:	4619      	mov	r1, r3
 80012c4:	4827      	ldr	r0, [pc, #156]	@ (8001364 <MX_TIM1_Init+0x120>)
 80012c6:	f004 f91b 	bl	8005500 <HAL_TIMEx_MasterConfigSynchronization>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012d0:	f000 fc5c 	bl	8001b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d4:	2360      	movs	r3, #96	@ 0x60
 80012d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012dc:	2300      	movs	r3, #0
 80012de:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012e0:	2300      	movs	r3, #0
 80012e2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012f4:	2200      	movs	r2, #0
 80012f6:	4619      	mov	r1, r3
 80012f8:	481a      	ldr	r0, [pc, #104]	@ (8001364 <MX_TIM1_Init+0x120>)
 80012fa:	f003 fa0f 	bl	800471c <HAL_TIM_PWM_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001304:	f000 fc42 	bl	8001b8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800131c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001320:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800132e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001338:	2300      	movs	r3, #0
 800133a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	4619      	mov	r1, r3
 8001344:	4807      	ldr	r0, [pc, #28]	@ (8001364 <MX_TIM1_Init+0x120>)
 8001346:	f004 f971 	bl	800562c <HAL_TIMEx_ConfigBreakDeadTime>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001350:	f000 fc1c 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001354:	4803      	ldr	r0, [pc, #12]	@ (8001364 <MX_TIM1_Init+0x120>)
 8001356:	f000 ff21 	bl	800219c <HAL_TIM_MspPostInit>

}
 800135a:	bf00      	nop
 800135c:	3760      	adds	r7, #96	@ 0x60
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000124 	.word	0x20000124
 8001368:	40012c00 	.word	0x40012c00

0800136c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800138a:	4b1e      	ldr	r3, [pc, #120]	@ (8001404 <MX_TIM2_Init+0x98>)
 800138c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001390:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001392:	4b1c      	ldr	r3, [pc, #112]	@ (8001404 <MX_TIM2_Init+0x98>)
 8001394:	2200      	movs	r2, #0
 8001396:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001398:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <MX_TIM2_Init+0x98>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800139e:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <MX_TIM2_Init+0x98>)
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295
 80013a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a6:	4b17      	ldr	r3, [pc, #92]	@ (8001404 <MX_TIM2_Init+0x98>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ac:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <MX_TIM2_Init+0x98>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013b2:	4814      	ldr	r0, [pc, #80]	@ (8001404 <MX_TIM2_Init+0x98>)
 80013b4:	f002 fc84 	bl	8003cc0 <HAL_TIM_Base_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013be:	f000 fbe5 	bl	8001b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	4619      	mov	r1, r3
 80013ce:	480d      	ldr	r0, [pc, #52]	@ (8001404 <MX_TIM2_Init+0x98>)
 80013d0:	f003 fab8 	bl	8004944 <HAL_TIM_ConfigClockSource>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013da:	f000 fbd7 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	4619      	mov	r1, r3
 80013ea:	4806      	ldr	r0, [pc, #24]	@ (8001404 <MX_TIM2_Init+0x98>)
 80013ec:	f004 f888 	bl	8005500 <HAL_TIMEx_MasterConfigSynchronization>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013f6:	f000 fbc9 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000170 	.word	0x20000170

08001408 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08c      	sub	sp, #48	@ 0x30
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	2224      	movs	r2, #36	@ 0x24
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f005 f850 	bl	80064bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	463b      	mov	r3, r7
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001426:	4b21      	ldr	r3, [pc, #132]	@ (80014ac <MX_TIM3_Init+0xa4>)
 8001428:	4a21      	ldr	r2, [pc, #132]	@ (80014b0 <MX_TIM3_Init+0xa8>)
 800142a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800142c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ac <MX_TIM3_Init+0xa4>)
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001432:	4b1e      	ldr	r3, [pc, #120]	@ (80014ac <MX_TIM3_Init+0xa4>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64799;
 8001438:	4b1c      	ldr	r3, [pc, #112]	@ (80014ac <MX_TIM3_Init+0xa4>)
 800143a:	f64f 521f 	movw	r2, #64799	@ 0xfd1f
 800143e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b1a      	ldr	r3, [pc, #104]	@ (80014ac <MX_TIM3_Init+0xa4>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001446:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <MX_TIM3_Init+0xa4>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800144c:	2303      	movs	r3, #3
 800144e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001454:	2301      	movs	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001464:	2301      	movs	r3, #1
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	4619      	mov	r1, r3
 8001476:	480d      	ldr	r0, [pc, #52]	@ (80014ac <MX_TIM3_Init+0xa4>)
 8001478:	f002 fecc 	bl	8004214 <HAL_TIM_Encoder_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001482:	f000 fb83 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800148e:	463b      	mov	r3, r7
 8001490:	4619      	mov	r1, r3
 8001492:	4806      	ldr	r0, [pc, #24]	@ (80014ac <MX_TIM3_Init+0xa4>)
 8001494:	f004 f834 	bl	8005500 <HAL_TIMEx_MasterConfigSynchronization>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800149e:	f000 fb75 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	3730      	adds	r7, #48	@ 0x30
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200001bc 	.word	0x200001bc
 80014b0:	40000400 	.word	0x40000400

080014b4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001548 <MX_TIM5_Init+0x94>)
 80014d4:	4a1d      	ldr	r2, [pc, #116]	@ (800154c <MX_TIM5_Init+0x98>)
 80014d6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170-1;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <MX_TIM5_Init+0x94>)
 80014da:	22a9      	movs	r2, #169	@ 0xa9
 80014dc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <MX_TIM5_Init+0x94>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <MX_TIM5_Init+0x94>)
 80014e6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ec:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <MX_TIM5_Init+0x94>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <MX_TIM5_Init+0x94>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014f8:	4813      	ldr	r0, [pc, #76]	@ (8001548 <MX_TIM5_Init+0x94>)
 80014fa:	f002 fbe1 	bl	8003cc0 <HAL_TIM_Base_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001504:	f000 fb42 	bl	8001b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001508:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800150c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	4619      	mov	r1, r3
 8001514:	480c      	ldr	r0, [pc, #48]	@ (8001548 <MX_TIM5_Init+0x94>)
 8001516:	f003 fa15 	bl	8004944 <HAL_TIM_ConfigClockSource>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001520:	f000 fb34 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	@ (8001548 <MX_TIM5_Init+0x94>)
 8001532:	f003 ffe5 	bl	8005500 <HAL_TIMEx_MasterConfigSynchronization>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800153c:	f000 fb26 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	3720      	adds	r7, #32
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000208 	.word	0x20000208
 800154c:	40000c00 	.word	0x40000c00

08001550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001566:	4b57      	ldr	r3, [pc, #348]	@ (80016c4 <MX_GPIO_Init+0x174>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	4a56      	ldr	r2, [pc, #344]	@ (80016c4 <MX_GPIO_Init+0x174>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001572:	4b54      	ldr	r3, [pc, #336]	@ (80016c4 <MX_GPIO_Init+0x174>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800157e:	4b51      	ldr	r3, [pc, #324]	@ (80016c4 <MX_GPIO_Init+0x174>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	4a50      	ldr	r2, [pc, #320]	@ (80016c4 <MX_GPIO_Init+0x174>)
 8001584:	f043 0320 	orr.w	r3, r3, #32
 8001588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800158a:	4b4e      	ldr	r3, [pc, #312]	@ (80016c4 <MX_GPIO_Init+0x174>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	f003 0320 	and.w	r3, r3, #32
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b4b      	ldr	r3, [pc, #300]	@ (80016c4 <MX_GPIO_Init+0x174>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	4a4a      	ldr	r2, [pc, #296]	@ (80016c4 <MX_GPIO_Init+0x174>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a2:	4b48      	ldr	r3, [pc, #288]	@ (80016c4 <MX_GPIO_Init+0x174>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	4b45      	ldr	r3, [pc, #276]	@ (80016c4 <MX_GPIO_Init+0x174>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	4a44      	ldr	r2, [pc, #272]	@ (80016c4 <MX_GPIO_Init+0x174>)
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ba:	4b42      	ldr	r3, [pc, #264]	@ (80016c4 <MX_GPIO_Init+0x174>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Relay1_Pin|DIROUT_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	210a      	movs	r1, #10
 80015ca:	483f      	ldr	r0, [pc, #252]	@ (80016c8 <MX_GPIO_Init+0x178>)
 80015cc:	f001 f9c0 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2120      	movs	r1, #32
 80015d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d8:	f001 f9ba 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay2_Pin|Relay3_Pin|Relay4_Pin, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	f240 2106 	movw	r1, #518	@ 0x206
 80015e2:	483a      	ldr	r0, [pc, #232]	@ (80016cc <MX_GPIO_Init+0x17c>)
 80015e4:	f001 f9b4 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	4832      	ldr	r0, [pc, #200]	@ (80016c8 <MX_GPIO_Init+0x178>)
 8001600:	f001 f80c 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin DIROUT_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|DIROUT_Pin;
 8001604:	230a      	movs	r3, #10
 8001606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001608:	2301      	movs	r3, #1
 800160a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	482b      	ldr	r0, [pc, #172]	@ (80016c8 <MX_GPIO_Init+0x178>)
 800161c:	f000 fffe 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : LogicCon1_Pin LogicCon2_Pin LogicCon3_Pin BT3_Pin
                           BT4_Pin BT5_Pin */
  GPIO_InitStruct.Pin = LogicCon1_Pin|LogicCon2_Pin|LogicCon3_Pin|BT3_Pin
 8001620:	f240 7313 	movw	r3, #1811	@ 0x713
 8001624:	617b      	str	r3, [r7, #20]
                          |BT4_Pin|BT5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162a:	2301      	movs	r3, #1
 800162c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001638:	f000 fff0 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800163c:	2320      	movs	r3, #32
 800163e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001656:	f000 ffe1 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : LogicCon4_Pin LimitBottom_Pin */
  GPIO_InitStruct.Pin = LogicCon4_Pin|LimitBottom_Pin;
 800165a:	2341      	movs	r3, #65	@ 0x41
 800165c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001662:	2301      	movs	r3, #1
 8001664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4817      	ldr	r0, [pc, #92]	@ (80016cc <MX_GPIO_Init+0x17c>)
 800166e:	f000 ffd5 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay2_Pin Relay3_Pin Relay4_Pin */
  GPIO_InitStruct.Pin = Relay2_Pin|Relay3_Pin|Relay4_Pin;
 8001672:	f240 2306 	movw	r3, #518	@ 0x206
 8001676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001678:	2301      	movs	r3, #1
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4810      	ldr	r0, [pc, #64]	@ (80016cc <MX_GPIO_Init+0x17c>)
 800168c:	f000 ffc6 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : LimitTop_Pin BT1_Pin BT2_Pin */
  GPIO_InitStruct.Pin = LimitTop_Pin|BT1_Pin|BT2_Pin;
 8001690:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800169a:	2301      	movs	r3, #1
 800169c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	4808      	ldr	r0, [pc, #32]	@ (80016c8 <MX_GPIO_Init+0x178>)
 80016a6:	f000 ffb9 	bl	800261c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	2028      	movs	r0, #40	@ 0x28
 80016b0:	f000 ff7f 	bl	80025b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016b4:	2028      	movs	r0, #40	@ 0x28
 80016b6:	f000 ff96 	bl	80025e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016ba:	bf00      	nop
 80016bc:	3728      	adds	r7, #40	@ 0x28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000
 80016c8:	48000800 	.word	0x48000800
 80016cc:	48000400 	.word	0x48000400

080016d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d10d      	bne.n	80016fc <HAL_TIM_PeriodElapsedCallback+0x2c>
		upper += 1;
 80016e0:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	1c54      	adds	r4, r2, #1
 80016e8:	f143 0500 	adc.w	r5, r3, #0
 80016ec:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80016ee:	e9c3 4500 	strd	r4, r5, [r3]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80016f2:	2120      	movs	r1, #32
 80016f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f8:	f001 f942 	bl	8002980 <HAL_GPIO_TogglePin>
	}
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bdb0      	pop	{r4, r5, r7, pc}
 8001704:	20000208 	.word	0x20000208
 8001708:	20000258 	.word	0x20000258

0800170c <Micros>:

uint64_t Micros() {
 800170c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
//	static uint32_t timestamp = 0;
	uint32_t lower = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
	uint64_t time = 0;
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	e9c7 2300 	strd	r2, r3, [r7]
	lower = __HAL_TIM_GET_COUNTER(&htim5);
 8001724:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <Micros+0x5c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172a:	60fb      	str	r3, [r7, #12]
	time = (upper << 32) | lower;
 800172c:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <Micros+0x60>)
 800172e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	4643      	mov	r3, r8
 800173c:	2200      	movs	r2, #0
 800173e:	68fe      	ldr	r6, [r7, #12]
 8001740:	f04f 0c00 	mov.w	ip, #0
 8001744:	4630      	mov	r0, r6
 8001746:	4661      	mov	r1, ip
 8001748:	ea42 0400 	orr.w	r4, r2, r0
 800174c:	ea43 0501 	orr.w	r5, r3, r1
 8001750:	e9c7 4500 	strd	r4, r5, [r7]
	return time;
 8001754:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000208 	.word	0x20000208
 800176c:	20000258 	.word	0x20000258

08001770 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update() {
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = Micros();
 8001776:	f7ff ffc9 	bl	800170c <Micros>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	495e      	ldr	r1, [pc, #376]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 8001780:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8001784:	4b5d      	ldr	r3, [pc, #372]	@ (80018fc <QEIEncoderPosVel_Update+0x18c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178a:	4a5b      	ldr	r2, [pc, #364]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 800178c:	6013      	str	r3, [r2, #0]
	//Position 1 turn calculation
	QEIdata.QEIPostion_1turn[NEW] = QEIdata.Position[NEW] % 800;
 800178e:	4b5a      	ldr	r3, [pc, #360]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4b5b      	ldr	r3, [pc, #364]	@ (8001900 <QEIEncoderPosVel_Update+0x190>)
 8001794:	fba3 1302 	umull	r1, r3, r3, r2
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ac:	4b52      	ldr	r3, [pc, #328]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 80017ae:	edc3 7a06 	vstr	s15, [r3, #24]
	QEIdata.Angle = QEIdata.QEIPostion_1turn[NEW] * 360 / 800;
 80017b2:	4b51      	ldr	r3, [pc, #324]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 80017b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80017b8:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001904 <QEIEncoderPosVel_Update+0x194>
 80017bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017c0:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8001908 <QEIEncoderPosVel_Update+0x198>
 80017c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017c8:	4b4b      	ldr	r3, [pc, #300]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 80017ca:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 80017ce:	4b4a      	ldr	r3, [pc, #296]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b49      	ldr	r3, [pc, #292]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	60fb      	str	r3, [r7, #12]
	int32_t diff1turn = QEIdata.QEIPostion_1turn[NEW]
 80017da:	4b47      	ldr	r3, [pc, #284]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 80017dc:	ed93 7a06 	vldr	s14, [r3, #24]
			- QEIdata.QEIPostion_1turn[OLD];
 80017e0:	4b45      	ldr	r3, [pc, #276]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 80017e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80017e6:	ee77 7a67 	vsub.f32	s15, s14, s15
	int32_t diff1turn = QEIdata.QEIPostion_1turn[NEW]
 80017ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ee:	ee17 3a90 	vmov	r3, s15
 80017f2:	60bb      	str	r3, [r7, #8]
	//Handle Warp around
	if (diffPosition > 32400) {
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f647 6290 	movw	r2, #32400	@ 0x7e90
 80017fa:	4293      	cmp	r3, r2
 80017fc:	dd04      	ble.n	8001808 <QEIEncoderPosVel_Update+0x98>
		diffPosition -= 64800;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f5a3 437d 	sub.w	r3, r3, #64768	@ 0xfd00
 8001804:	3b20      	subs	r3, #32
 8001806:	60fb      	str	r3, [r7, #12]
	}
	if (diffPosition < -32400) {
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4a40      	ldr	r2, [pc, #256]	@ (800190c <QEIEncoderPosVel_Update+0x19c>)
 800180c:	4293      	cmp	r3, r2
 800180e:	da04      	bge.n	800181a <QEIEncoderPosVel_Update+0xaa>
		diffPosition += 64800;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f503 437d 	add.w	r3, r3, #64768	@ 0xfd00
 8001816:	3320      	adds	r3, #32
 8001818:	60fb      	str	r3, [r7, #12]
	}
	//Calculate Linear Position in mm unit
	if (diff1turn > 400) {
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001820:	dd09      	ble.n	8001836 <QEIEncoderPosVel_Update+0xc6>
		QEIdata.QEIRound -= 1;
 8001822:	4b35      	ldr	r3, [pc, #212]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 8001824:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001828:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800182c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001830:	4b31      	ldr	r3, [pc, #196]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 8001832:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}
	if (diff1turn < -400) {
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f513 7fc8 	cmn.w	r3, #400	@ 0x190
 800183c:	da09      	bge.n	8001852 <QEIEncoderPosVel_Update+0xe2>
		QEIdata.QEIRound += 1;
 800183e:	4b2e      	ldr	r3, [pc, #184]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 8001840:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001844:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001848:	ee77 7a87 	vadd.f32	s15, s15, s14
 800184c:	4b2a      	ldr	r3, [pc, #168]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 800184e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}
	QEIdata.TotalPos = (QEIdata.QEIRound * 14) + QEIdata.QEIPostion_1turn[NEW] * 14 / 800; //linear pos in mm uint
 8001852:	4b29      	ldr	r3, [pc, #164]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 8001854:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001858:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 800185c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001860:	4b25      	ldr	r3, [pc, #148]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 8001862:	edd3 7a06 	vldr	s15, [r3, #24]
 8001866:	eef2 6a0c 	vmov.f32	s13, #44	@ 0x41600000  14.0
 800186a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800186e:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 8001908 <QEIEncoderPosVel_Update+0x198>
 8001872:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187a:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 800187c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

			//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW] - QEIdata.TimeStamp[OLD])
 8001880:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 8001882:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001886:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 8001888:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800188c:	1a84      	subs	r4, r0, r2
 800188e:	eb61 0503 	sbc.w	r5, r1, r3
			* 1e-6;
 8001892:	4620      	mov	r0, r4
 8001894:	4629      	mov	r1, r5
 8001896:	f7fe fe45 	bl	8000524 <__aeabi_ul2d>
 800189a:	a315      	add	r3, pc, #84	@ (adr r3, 80018f0 <QEIEncoderPosVel_Update+0x180>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	f7fe fe76 	bl	8000590 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
	float diffTime = (QEIdata.TimeStamp[NEW] - QEIdata.TimeStamp[OLD])
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff f932 	bl	8000b14 <__aeabi_d2f>
 80018b0:	4603      	mov	r3, r0
 80018b2:	607b      	str	r3, [r7, #4]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	ee07 3a90 	vmov	s15, r3
 80018ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018be:	ed97 7a01 	vldr	s14, [r7, #4]
 80018c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018c6:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 80018c8:	edc3 7a08 	vstr	s15, [r3, #32]
	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 80018cc:	4b0a      	ldr	r3, [pc, #40]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a09      	ldr	r2, [pc, #36]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 80018d2:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD] = QEIdata.TimeStamp[NEW];
 80018d4:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 80018d6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018da:	4907      	ldr	r1, [pc, #28]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 80018dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata.QEIPostion_1turn[OLD] = QEIdata.QEIPostion_1turn[NEW];
 80018e0:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a04      	ldr	r2, [pc, #16]	@ (80018f8 <QEIEncoderPosVel_Update+0x188>)
 80018e6:	61d3      	str	r3, [r2, #28]

}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bdb0      	pop	{r4, r5, r7, pc}
 80018f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80018f4:	3eb0c6f7 	.word	0x3eb0c6f7
 80018f8:	20000278 	.word	0x20000278
 80018fc:	200001bc 	.word	0x200001bc
 8001900:	51eb851f 	.word	0x51eb851f
 8001904:	43b40000 	.word	0x43b40000
 8001908:	44480000 	.word	0x44480000
 800190c:	ffff8170 	.word	0xffff8170

08001910 <ReadLogicConv>:

void ReadLogicConv() {
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	Lo1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); //Lo1
 8001914:	2101      	movs	r1, #1
 8001916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800191a:	f001 f801 	bl	8002920 <HAL_GPIO_ReadPin>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <ReadLogicConv+0x50>)
 8001924:	701a      	strb	r2, [r3, #0]
	Lo2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1); //Lo2
 8001926:	2102      	movs	r1, #2
 8001928:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800192c:	f000 fff8 	bl	8002920 <HAL_GPIO_ReadPin>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <ReadLogicConv+0x54>)
 8001936:	701a      	strb	r2, [r3, #0]
	Lo3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4); //Lo3
 8001938:	2110      	movs	r1, #16
 800193a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800193e:	f000 ffef 	bl	8002920 <HAL_GPIO_ReadPin>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <ReadLogicConv+0x58>)
 8001948:	701a      	strb	r2, [r3, #0]
	Lo4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0); //Lo4
 800194a:	2101      	movs	r1, #1
 800194c:	4807      	ldr	r0, [pc, #28]	@ (800196c <ReadLogicConv+0x5c>)
 800194e:	f000 ffe7 	bl	8002920 <HAL_GPIO_ReadPin>
 8001952:	4603      	mov	r3, r0
 8001954:	461a      	mov	r2, r3
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <ReadLogicConv+0x60>)
 8001958:	701a      	strb	r2, [r3, #0]
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200002a8 	.word	0x200002a8
 8001964:	200002a9 	.word	0x200002a9
 8001968:	200002aa 	.word	0x200002aa
 800196c:	48000400 	.word	0x48000400
 8001970:	200002ab 	.word	0x200002ab

08001974 <ReadButton>:

void ReadButton() {
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	bt1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8); //BT1
 8001978:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800197c:	4817      	ldr	r0, [pc, #92]	@ (80019dc <ReadButton+0x68>)
 800197e:	f000 ffcf 	bl	8002920 <HAL_GPIO_ReadPin>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	4b16      	ldr	r3, [pc, #88]	@ (80019e0 <ReadButton+0x6c>)
 8001988:	701a      	strb	r2, [r3, #0]
	bt2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9); //BT2
 800198a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800198e:	4813      	ldr	r0, [pc, #76]	@ (80019dc <ReadButton+0x68>)
 8001990:	f000 ffc6 	bl	8002920 <HAL_GPIO_ReadPin>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
 8001998:	4b12      	ldr	r3, [pc, #72]	@ (80019e4 <ReadButton+0x70>)
 800199a:	701a      	strb	r2, [r3, #0]
	bt3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8); //BT3
 800199c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019a4:	f000 ffbc 	bl	8002920 <HAL_GPIO_ReadPin>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <ReadButton+0x74>)
 80019ae:	701a      	strb	r2, [r3, #0]
	bt4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9); //BT4
 80019b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b8:	f000 ffb2 	bl	8002920 <HAL_GPIO_ReadPin>
 80019bc:	4603      	mov	r3, r0
 80019be:	461a      	mov	r2, r3
 80019c0:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <ReadButton+0x78>)
 80019c2:	701a      	strb	r2, [r3, #0]
	bt5 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10); //BT5
 80019c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019cc:	f000 ffa8 	bl	8002920 <HAL_GPIO_ReadPin>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <ReadButton+0x7c>)
 80019d6:	701a      	strb	r2, [r3, #0]
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	48000800 	.word	0x48000800
 80019e0:	200002ac 	.word	0x200002ac
 80019e4:	200002ad 	.word	0x200002ad
 80019e8:	200002ae 	.word	0x200002ae
 80019ec:	200002af 	.word	0x200002af
 80019f0:	200002b0 	.word	0x200002b0

080019f4 <ReadLimit>:

void ReadLimit() {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	LimitBottom = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7); // LimitTop
 80019f8:	2180      	movs	r1, #128	@ 0x80
 80019fa:	4808      	ldr	r0, [pc, #32]	@ (8001a1c <ReadLimit+0x28>)
 80019fc:	f000 ff90 	bl	8002920 <HAL_GPIO_ReadPin>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <ReadLimit+0x2c>)
 8001a06:	701a      	strb	r2, [r3, #0]
	LimitTop = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6); // LimitBottom
 8001a08:	2140      	movs	r1, #64	@ 0x40
 8001a0a:	4806      	ldr	r0, [pc, #24]	@ (8001a24 <ReadLimit+0x30>)
 8001a0c:	f000 ff88 	bl	8002920 <HAL_GPIO_ReadPin>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <ReadLimit+0x34>)
 8001a16:	701a      	strb	r2, [r3, #0]

}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	48000800 	.word	0x48000800
 8001a20:	200002b2 	.word	0x200002b2
 8001a24:	48000400 	.word	0x48000400
 8001a28:	200002b1 	.word	0x200002b1
 8001a2c:	00000000 	.word	0x00000000

08001a30 <MotorDrive>:

void MotorDrive() {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	if((Goal - QEIdata.TotalPos) > 0.2 || (Goal - QEIdata.TotalPos) < -0.2){
 8001a34:	4b4c      	ldr	r3, [pc, #304]	@ (8001b68 <MotorDrive+0x138>)
 8001a36:	ed93 7a00 	vldr	s14, [r3]
 8001a3a:	4b4c      	ldr	r3, [pc, #304]	@ (8001b6c <MotorDrive+0x13c>)
 8001a3c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a44:	ee17 0a90 	vmov	r0, s15
 8001a48:	f7fe fd4a 	bl	80004e0 <__aeabi_f2d>
 8001a4c:	a340      	add	r3, pc, #256	@ (adr r3, 8001b50 <MotorDrive+0x120>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	f7ff f82d 	bl	8000ab0 <__aeabi_dcmpgt>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d114      	bne.n	8001a86 <MotorDrive+0x56>
 8001a5c:	4b42      	ldr	r3, [pc, #264]	@ (8001b68 <MotorDrive+0x138>)
 8001a5e:	ed93 7a00 	vldr	s14, [r3]
 8001a62:	4b42      	ldr	r3, [pc, #264]	@ (8001b6c <MotorDrive+0x13c>)
 8001a64:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a6c:	ee17 0a90 	vmov	r0, s15
 8001a70:	f7fe fd36 	bl	80004e0 <__aeabi_f2d>
 8001a74:	a338      	add	r3, pc, #224	@ (adr r3, 8001b58 <MotorDrive+0x128>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f7fe fffb 	bl	8000a74 <__aeabi_dcmplt>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d100      	bne.n	8001a86 <MotorDrive+0x56>
			Vfeedback = 0.4;
		}
		duty_cycle_pid = Vfeedback * 4000 / 12;
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle_pid);
	}
}
 8001a84:	e061      	b.n	8001b4a <MotorDrive+0x11a>
		Vfeedback = Update_pid(&pid_control, Goal - QEIdata.TotalPos, 8, 9);
 8001a86:	4b38      	ldr	r3, [pc, #224]	@ (8001b68 <MotorDrive+0x138>)
 8001a88:	ed93 7a00 	vldr	s14, [r3]
 8001a8c:	4b37      	ldr	r3, [pc, #220]	@ (8001b6c <MotorDrive+0x13c>)
 8001a8e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a96:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 8001a9a:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 8001a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa2:	4833      	ldr	r0, [pc, #204]	@ (8001b70 <MotorDrive+0x140>)
 8001aa4:	f000 f89e 	bl	8001be4 <Update_pid>
 8001aa8:	ee07 0a90 	vmov	s15, r0
 8001aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab0:	4b30      	ldr	r3, [pc, #192]	@ (8001b74 <MotorDrive+0x144>)
 8001ab2:	edc3 7a00 	vstr	s15, [r3]
		if (Vfeedback > 0) {
 8001ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8001b74 <MotorDrive+0x144>)
 8001ab8:	edd3 7a00 	vldr	s15, [r3]
 8001abc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	dd05      	ble.n	8001ad2 <MotorDrive+0xa2>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2108      	movs	r1, #8
 8001aca:	482b      	ldr	r0, [pc, #172]	@ (8001b78 <MotorDrive+0x148>)
 8001acc:	f000 ff40 	bl	8002950 <HAL_GPIO_WritePin>
 8001ad0:	e00c      	b.n	8001aec <MotorDrive+0xbc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	2108      	movs	r1, #8
 8001ad6:	4828      	ldr	r0, [pc, #160]	@ (8001b78 <MotorDrive+0x148>)
 8001ad8:	f000 ff3a 	bl	8002950 <HAL_GPIO_WritePin>
			Vfeedback = Vfeedback * (-1);
 8001adc:	4b25      	ldr	r3, [pc, #148]	@ (8001b74 <MotorDrive+0x144>)
 8001ade:	edd3 7a00 	vldr	s15, [r3]
 8001ae2:	eef1 7a67 	vneg.f32	s15, s15
 8001ae6:	4b23      	ldr	r3, [pc, #140]	@ (8001b74 <MotorDrive+0x144>)
 8001ae8:	edc3 7a00 	vstr	s15, [r3]
		if(Vfeedback < 0.4 && Vfeedback != 0){
 8001aec:	4b21      	ldr	r3, [pc, #132]	@ (8001b74 <MotorDrive+0x144>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fcf5 	bl	80004e0 <__aeabi_f2d>
 8001af6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001b60 <MotorDrive+0x130>)
 8001af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afc:	f7fe ffba 	bl	8000a74 <__aeabi_dcmplt>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00a      	beq.n	8001b1c <MotorDrive+0xec>
 8001b06:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <MotorDrive+0x144>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b14:	d002      	beq.n	8001b1c <MotorDrive+0xec>
			Vfeedback = 0.4;
 8001b16:	4b17      	ldr	r3, [pc, #92]	@ (8001b74 <MotorDrive+0x144>)
 8001b18:	4a18      	ldr	r2, [pc, #96]	@ (8001b7c <MotorDrive+0x14c>)
 8001b1a:	601a      	str	r2, [r3, #0]
		duty_cycle_pid = Vfeedback * 4000 / 12;
 8001b1c:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <MotorDrive+0x144>)
 8001b1e:	edd3 7a00 	vldr	s15, [r3]
 8001b22:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001b80 <MotorDrive+0x150>
 8001b26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b2a:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8001b2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b36:	ee17 3a90 	vmov	r3, s15
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <MotorDrive+0x154>)
 8001b3e:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle_pid);
 8001b40:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <MotorDrive+0x154>)
 8001b42:	881a      	ldrh	r2, [r3, #0]
 8001b44:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <MotorDrive+0x158>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	9999999a 	.word	0x9999999a
 8001b54:	3fc99999 	.word	0x3fc99999
 8001b58:	9999999a 	.word	0x9999999a
 8001b5c:	bfc99999 	.word	0xbfc99999
 8001b60:	9999999a 	.word	0x9999999a
 8001b64:	3fd99999 	.word	0x3fd99999
 8001b68:	200002b8 	.word	0x200002b8
 8001b6c:	20000278 	.word	0x20000278
 8001b70:	200002c0 	.word	0x200002c0
 8001b74:	200002b4 	.word	0x200002b4
 8001b78:	48000800 	.word	0x48000800
 8001b7c:	3ecccccd 	.word	0x3ecccccd
 8001b80:	457a0000 	.word	0x457a0000
 8001b84:	200002bc 	.word	0x200002bc
 8001b88:	20000124 	.word	0x20000124

08001b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b90:	b672      	cpsid	i
}
 8001b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <Error_Handler+0x8>

08001b98 <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float32_t _kp,  float32_t _ki, float32_t _kd, float32_t _sampt){
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6178      	str	r0, [r7, #20]
 8001ba0:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ba4:	edc7 0a03 	vstr	s1, [r7, #12]
 8001ba8:	ed87 1a02 	vstr	s2, [r7, #8]
 8001bac:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 8001bc8:	6979      	ldr	r1, [r7, #20]
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001bd6:	bf00      	nop
 8001bd8:	371c      	adds	r7, #28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <Update_pid>:
int32_t Update_pid(PID *pid, float32_t error, float32_t pid_sat, float32_t plant_sat) {
 8001be4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001be8:	b08a      	sub	sp, #40	@ 0x28
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bf2:	edc7 0a01 	vstr	s1, [r7, #4]
 8001bf6:	ed87 1a00 	vstr	s2, [r7]
//	static float32_t y_n = 0; // Output[n]
	static float32_t y_n_1 = 0; // Output[n-1]
	float32_t e_n = error; // error[n]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	61bb      	str	r3, [r7, #24]
	static float32_t e_n_1 = 0; // error[n-1]

	float32_t p_term = e_n * pid -> kp;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c0c:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t d_term = ((e_n - e_n_1) * pid -> kd) / pid -> sampt;
 8001c10:	4b96      	ldr	r3, [pc, #600]	@ (8001e6c <Update_pid+0x288>)
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c24:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c32:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float32_t i_term = ((pid -> ki * pid -> sampt / 2.0)*(e_n + e_n_1)) + y_n_1;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c46:	ee17 0a90 	vmov	r0, s15
 8001c4a:	f7fe fc49 	bl	80004e0 <__aeabi_f2d>
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c56:	f7fe fdc5 	bl	80007e4 <__aeabi_ddiv>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4690      	mov	r8, r2
 8001c60:	4699      	mov	r9, r3
 8001c62:	4b82      	ldr	r3, [pc, #520]	@ (8001e6c <Update_pid+0x288>)
 8001c64:	ed93 7a00 	vldr	s14, [r3]
 8001c68:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c70:	ee17 0a90 	vmov	r0, s15
 8001c74:	f7fe fc34 	bl	80004e0 <__aeabi_f2d>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4640      	mov	r0, r8
 8001c7e:	4649      	mov	r1, r9
 8001c80:	f7fe fc86 	bl	8000590 <__aeabi_dmul>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4690      	mov	r8, r2
 8001c8a:	4699      	mov	r9, r3
 8001c8c:	4b78      	ldr	r3, [pc, #480]	@ (8001e70 <Update_pid+0x28c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc25 	bl	80004e0 <__aeabi_f2d>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4640      	mov	r0, r8
 8001c9c:	4649      	mov	r1, r9
 8001c9e:	f7fe fac1 	bl	8000224 <__adddf3>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f7fe ff33 	bl	8000b14 <__aeabi_d2f>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	623b      	str	r3, [r7, #32]

	if(pid -> ki == 0){
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cb8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc0:	d102      	bne.n	8001cc8 <Update_pid+0xe4>
		i_term = 0;
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	623b      	str	r3, [r7, #32]
	}
	if(pid -> kd == 0){
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cce:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	d102      	bne.n	8001cde <Update_pid+0xfa>
		d_term = 0;
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	pid -> y_n = p_term + d_term + i_term; // pid output
 8001cde:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ce2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001ce6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cea:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf2:	ee17 0a90 	vmov	r0, s15
 8001cf6:	f7fe fbf3 	bl	80004e0 <__aeabi_f2d>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	68f9      	ldr	r1, [r7, #12]
 8001d00:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint8_t is_sat = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	77fb      	strb	r3, [r7, #31]
	// check is pid output is saturating
	if(pid -> y_n > pid_sat){
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7fe fbe6 	bl	80004e0 <__aeabi_f2d>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4640      	mov	r0, r8
 8001d1a:	4649      	mov	r1, r9
 8001d1c:	f7fe fec8 	bl	8000ab0 <__aeabi_dcmpgt>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <Update_pid+0x148>
		is_sat = 1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	77fb      	strb	r3, [r7, #31]
 8001d2a:	e016      	b.n	8001d5a <Update_pid+0x176>
	}
	else if(pid -> y_n < -(pid_sat)){
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001d32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d36:	eef1 7a67 	vneg.f32	s15, s15
 8001d3a:	ee17 3a90 	vmov	r3, s15
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fbce 	bl	80004e0 <__aeabi_f2d>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4640      	mov	r0, r8
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	f7fe fe92 	bl	8000a74 <__aeabi_dcmplt>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <Update_pid+0x176>
		is_sat = 1;
 8001d56:	2301      	movs	r3, #1
 8001d58:	77fb      	strb	r3, [r7, #31]
	}
	// check is error sign and output sign is equal
	if(e_n * pid -> y_n == fabs(e_n * pid -> y_n)){
 8001d5a:	69b8      	ldr	r0, [r7, #24]
 8001d5c:	f7fe fbc0 	bl	80004e0 <__aeabi_f2d>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d66:	f7fe fc13 	bl	8000590 <__aeabi_dmul>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4690      	mov	r8, r2
 8001d70:	4699      	mov	r9, r3
 8001d72:	69b8      	ldr	r0, [r7, #24]
 8001d74:	f7fe fbb4 	bl	80004e0 <__aeabi_f2d>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d7e:	f7fe fc07 	bl	8000590 <__aeabi_dmul>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4614      	mov	r4, r2
 8001d88:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001d8c:	4622      	mov	r2, r4
 8001d8e:	462b      	mov	r3, r5
 8001d90:	4640      	mov	r0, r8
 8001d92:	4649      	mov	r1, r9
 8001d94:	f7fe fe64 	bl	8000a60 <__aeabi_dcmpeq>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d011      	beq.n	8001dc2 <Update_pid+0x1de>
		// if pid output is saturating and error sign and output sign is  i_term = 0;
		if(is_sat == 1){
 8001d9e:	7ffb      	ldrb	r3, [r7, #31]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d10e      	bne.n	8001dc2 <Update_pid+0x1de>
			pid -> y_n = p_term + d_term;
 8001da4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001da8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db0:	ee17 0a90 	vmov	r0, s15
 8001db4:	f7fe fb94 	bl	80004e0 <__aeabi_f2d>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	68f9      	ldr	r1, [r7, #12]
 8001dbe:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
	}
	// Plant saturation
	if(pid -> y_n > plant_sat){
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001dc8:	6838      	ldr	r0, [r7, #0]
 8001dca:	f7fe fb89 	bl	80004e0 <__aeabi_f2d>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	f7fe fe6b 	bl	8000ab0 <__aeabi_dcmpgt>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <Update_pid+0x20e>
		pid -> y_n = plant_sat;
 8001de0:	6838      	ldr	r0, [r7, #0]
 8001de2:	f7fe fb7d 	bl	80004e0 <__aeabi_f2d>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	68f9      	ldr	r1, [r7, #12]
 8001dec:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001df0:	e022      	b.n	8001e38 <Update_pid+0x254>
	}
	else if(pid -> y_n < -(plant_sat)){
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001df8:	edd7 7a00 	vldr	s15, [r7]
 8001dfc:	eef1 7a67 	vneg.f32	s15, s15
 8001e00:	ee17 3a90 	vmov	r3, s15
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb6b 	bl	80004e0 <__aeabi_f2d>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4620      	mov	r0, r4
 8001e10:	4629      	mov	r1, r5
 8001e12:	f7fe fe2f 	bl	8000a74 <__aeabi_dcmplt>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00d      	beq.n	8001e38 <Update_pid+0x254>
		pid -> y_n = (-(plant_sat));
 8001e1c:	edd7 7a00 	vldr	s15, [r7]
 8001e20:	eef1 7a67 	vneg.f32	s15, s15
 8001e24:	ee17 3a90 	vmov	r3, s15
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fb59 	bl	80004e0 <__aeabi_f2d>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	68f9      	ldr	r1, [r7, #12]
 8001e34:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	// Update value
	y_n_1 = pid -> y_n;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	f7fe fe67 	bl	8000b14 <__aeabi_d2f>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4a09      	ldr	r2, [pc, #36]	@ (8001e70 <Update_pid+0x28c>)
 8001e4a:	6013      	str	r3, [r2, #0]
	e_n_1 = e_n;
 8001e4c:	4a07      	ldr	r2, [pc, #28]	@ (8001e6c <Update_pid+0x288>)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	6013      	str	r3, [r2, #0]
	return pid -> y_n;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7fe fe32 	bl	8000ac4 <__aeabi_d2iz>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3728      	adds	r7, #40	@ 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e6c:	200002e0 	.word	0x200002e0
 8001e70:	200002e4 	.word	0x200002e4

08001e74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb8 <HAL_MspInit+0x44>)
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb8 <HAL_MspInit+0x44>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e86:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <HAL_MspInit+0x44>)
 8001e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <HAL_MspInit+0x44>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e96:	4a08      	ldr	r2, [pc, #32]	@ (8001eb8 <HAL_MspInit+0x44>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e9e:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_MspInit+0x44>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001eaa:	f000 ff7d 	bl	8002da8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000

08001ebc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b0a0      	sub	sp, #128	@ 0x80
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ed4:	f107 0318 	add.w	r3, r7, #24
 8001ed8:	2254      	movs	r2, #84	@ 0x54
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f004 faed 	bl	80064bc <memset>
  if(hi2c->Instance==I2C1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a2d      	ldr	r2, [pc, #180]	@ (8001f9c <HAL_I2C_MspInit+0xe0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d153      	bne.n	8001f94 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001eec:	2340      	movs	r3, #64	@ 0x40
 8001eee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ef4:	f107 0318 	add.w	r3, r7, #24
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f001 fc93 	bl	8003824 <HAL_RCCEx_PeriphCLKConfig>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f04:	f7ff fe42 	bl	8001b8c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f08:	4b25      	ldr	r3, [pc, #148]	@ (8001fa0 <HAL_I2C_MspInit+0xe4>)
 8001f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0c:	4a24      	ldr	r2, [pc, #144]	@ (8001fa0 <HAL_I2C_MspInit+0xe4>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f14:	4b22      	ldr	r3, [pc, #136]	@ (8001fa0 <HAL_I2C_MspInit+0xe4>)
 8001f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f20:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa0 <HAL_I2C_MspInit+0xe4>)
 8001f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f24:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa0 <HAL_I2C_MspInit+0xe4>)
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa0 <HAL_I2C_MspInit+0xe4>)
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f3e:	2312      	movs	r3, #18
 8001f40:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	2300      	movs	r3, #0
 8001f48:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f52:	4619      	mov	r1, r3
 8001f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f58:	f000 fb60 	bl	800261c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f60:	2312      	movs	r3, #18
 8001f62:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f6c:	2304      	movs	r3, #4
 8001f6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f70:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f74:	4619      	mov	r1, r3
 8001f76:	480b      	ldr	r0, [pc, #44]	@ (8001fa4 <HAL_I2C_MspInit+0xe8>)
 8001f78:	f000 fb50 	bl	800261c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f7c:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <HAL_I2C_MspInit+0xe4>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f80:	4a07      	ldr	r2, [pc, #28]	@ (8001fa0 <HAL_I2C_MspInit+0xe4>)
 8001f82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f88:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <HAL_I2C_MspInit+0xe4>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f94:	bf00      	nop
 8001f96:	3780      	adds	r7, #128	@ 0x80
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40005400 	.word	0x40005400
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	48000400 	.word	0x48000400

08001fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b09e      	sub	sp, #120	@ 0x78
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fc0:	f107 0310 	add.w	r3, r7, #16
 8001fc4:	2254      	movs	r2, #84	@ 0x54
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f004 fa77 	bl	80064bc <memset>
  if(huart->Instance==LPUART1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8002050 <HAL_UART_MspInit+0xa8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d136      	bne.n	8002046 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001fd8:	2320      	movs	r3, #32
 8001fda:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fe0:	f107 0310 	add.w	r3, r7, #16
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f001 fc1d 	bl	8003824 <HAL_RCCEx_PeriphCLKConfig>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ff0:	f7ff fdcc 	bl	8001b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ff4:	4b17      	ldr	r3, [pc, #92]	@ (8002054 <HAL_UART_MspInit+0xac>)
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff8:	4a16      	ldr	r2, [pc, #88]	@ (8002054 <HAL_UART_MspInit+0xac>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002000:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <HAL_UART_MspInit+0xac>)
 8002002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <HAL_UART_MspInit+0xac>)
 800200e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002010:	4a10      	ldr	r2, [pc, #64]	@ (8002054 <HAL_UART_MspInit+0xac>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002018:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <HAL_UART_MspInit+0xac>)
 800201a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002024:	230c      	movs	r3, #12
 8002026:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002034:	230c      	movs	r3, #12
 8002036:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002038:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800203c:	4619      	mov	r1, r3
 800203e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002042:	f000 faeb 	bl	800261c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002046:	bf00      	nop
 8002048:	3778      	adds	r7, #120	@ 0x78
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40008000 	.word	0x40008000
 8002054:	40021000 	.word	0x40021000

08002058 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <HAL_TIM_PWM_MspInit+0x38>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d10b      	bne.n	8002082 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800206a:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <HAL_TIM_PWM_MspInit+0x3c>)
 800206c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800206e:	4a09      	ldr	r2, [pc, #36]	@ (8002094 <HAL_TIM_PWM_MspInit+0x3c>)
 8002070:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002074:	6613      	str	r3, [r2, #96]	@ 0x60
 8002076:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <HAL_TIM_PWM_MspInit+0x3c>)
 8002078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800207a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40012c00 	.word	0x40012c00
 8002094:	40021000 	.word	0x40021000

08002098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020a8:	d10c      	bne.n	80020c4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020aa:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <HAL_TIM_Base_MspInit+0x68>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ae:	4a14      	ldr	r2, [pc, #80]	@ (8002100 <HAL_TIM_Base_MspInit+0x68>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80020b6:	4b12      	ldr	r3, [pc, #72]	@ (8002100 <HAL_TIM_Base_MspInit+0x68>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80020c2:	e018      	b.n	80020f6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002104 <HAL_TIM_Base_MspInit+0x6c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d113      	bne.n	80020f6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <HAL_TIM_Base_MspInit+0x68>)
 80020d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002100 <HAL_TIM_Base_MspInit+0x68>)
 80020d4:	f043 0308 	orr.w	r3, r3, #8
 80020d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020da:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <HAL_TIM_Base_MspInit+0x68>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	2032      	movs	r0, #50	@ 0x32
 80020ec:	f000 fa61 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80020f0:	2032      	movs	r0, #50	@ 0x32
 80020f2:	f000 fa78 	bl	80025e6 <HAL_NVIC_EnableIRQ>
}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	40000c00 	.word	0x40000c00

08002108 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	@ 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1b      	ldr	r2, [pc, #108]	@ (8002194 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d130      	bne.n	800218c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800212a:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <HAL_TIM_Encoder_MspInit+0x90>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212e:	4a1a      	ldr	r2, [pc, #104]	@ (8002198 <HAL_TIM_Encoder_MspInit+0x90>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6593      	str	r3, [r2, #88]	@ 0x58
 8002136:	4b18      	ldr	r3, [pc, #96]	@ (8002198 <HAL_TIM_Encoder_MspInit+0x90>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	4b15      	ldr	r3, [pc, #84]	@ (8002198 <HAL_TIM_Encoder_MspInit+0x90>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002146:	4a14      	ldr	r2, [pc, #80]	@ (8002198 <HAL_TIM_Encoder_MspInit+0x90>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800214e:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <HAL_TIM_Encoder_MspInit+0x90>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_Pin|EncoderB_Pin;
 800215a:	23c0      	movs	r3, #192	@ 0xc0
 800215c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800216a:	2302      	movs	r3, #2
 800216c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	4619      	mov	r1, r3
 8002174:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002178:	f000 fa50 	bl	800261c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800217c:	2200      	movs	r2, #0
 800217e:	2100      	movs	r1, #0
 8002180:	201d      	movs	r0, #29
 8002182:	f000 fa16 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002186:	201d      	movs	r0, #29
 8002188:	f000 fa2d 	bl	80025e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800218c:	bf00      	nop
 800218e:	3728      	adds	r7, #40	@ 0x28
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40000400 	.word	0x40000400
 8002198:	40021000 	.word	0x40021000

0800219c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 030c 	add.w	r3, r7, #12
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a11      	ldr	r2, [pc, #68]	@ (8002200 <HAL_TIM_MspPostInit+0x64>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d11b      	bne.n	80021f6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021be:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <HAL_TIM_MspPostInit+0x68>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c2:	4a10      	ldr	r2, [pc, #64]	@ (8002204 <HAL_TIM_MspPostInit+0x68>)
 80021c4:	f043 0304 	orr.w	r3, r3, #4
 80021c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002204 <HAL_TIM_MspPostInit+0x68>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWMOUT_Pin;
 80021d6:	2301      	movs	r3, #1
 80021d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80021e6:	2302      	movs	r3, #2
 80021e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMOUT_GPIO_Port, &GPIO_InitStruct);
 80021ea:	f107 030c 	add.w	r3, r7, #12
 80021ee:	4619      	mov	r1, r3
 80021f0:	4805      	ldr	r0, [pc, #20]	@ (8002208 <HAL_TIM_MspPostInit+0x6c>)
 80021f2:	f000 fa13 	bl	800261c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021f6:	bf00      	nop
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40012c00 	.word	0x40012c00
 8002204:	40021000 	.word	0x40021000
 8002208:	48000800 	.word	0x48000800

0800220c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <NMI_Handler+0x4>

08002214 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <HardFault_Handler+0x4>

0800221c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <MemManage_Handler+0x4>

08002224 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002228:	bf00      	nop
 800222a:	e7fd      	b.n	8002228 <BusFault_Handler+0x4>

0800222c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <UsageFault_Handler+0x4>

08002234 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002262:	f000 f8ad 	bl	80023c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002270:	4802      	ldr	r0, [pc, #8]	@ (800227c <TIM3_IRQHandler+0x10>)
 8002272:	f002 f903 	bl	800447c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200001bc 	.word	0x200001bc

08002280 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002284:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002288:	f000 fb94 	bl	80029b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}

08002290 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002294:	4802      	ldr	r0, [pc, #8]	@ (80022a0 <TIM5_IRQHandler+0x10>)
 8002296:	f002 f8f1 	bl	800447c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000208 	.word	0x20000208

080022a4 <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */

void SystemInit(void) {
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <SystemInit+0x20>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ae:	4a05      	ldr	r2, [pc, #20]	@ (80022c4 <SystemInit+0x20>)
 80022b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	/* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022c8:	480d      	ldr	r0, [pc, #52]	@ (8002300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022cc:	f7ff ffea 	bl	80022a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d0:	480c      	ldr	r0, [pc, #48]	@ (8002304 <LoopForever+0x6>)
  ldr r1, =_edata
 80022d2:	490d      	ldr	r1, [pc, #52]	@ (8002308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022d4:	4a0d      	ldr	r2, [pc, #52]	@ (800230c <LoopForever+0xe>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022d8:	e002      	b.n	80022e0 <LoopCopyDataInit>

080022da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022de:	3304      	adds	r3, #4

080022e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e4:	d3f9      	bcc.n	80022da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002314 <LoopForever+0x16>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ec:	e001      	b.n	80022f2 <LoopFillZerobss>

080022ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f0:	3204      	adds	r2, #4

080022f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f4:	d3fb      	bcc.n	80022ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022f6:	f004 f8e9 	bl	80064cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022fa:	f7fe fdd3 	bl	8000ea4 <main>

080022fe <LoopForever>:

LoopForever:
    b LoopForever
 80022fe:	e7fe      	b.n	80022fe <LoopForever>
  ldr   r0, =_estack
 8002300:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002308:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800230c:	0800657c 	.word	0x0800657c
  ldr r2, =_sbss
 8002310:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8002314:	200002ec 	.word	0x200002ec

08002318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002318:	e7fe      	b.n	8002318 <ADC1_2_IRQHandler>

0800231a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f000 f939 	bl	800259c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800232a:	2000      	movs	r0, #0
 800232c:	f000 f80e 	bl	800234c <HAL_InitTick>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	71fb      	strb	r3, [r7, #7]
 800233a:	e001      	b.n	8002340 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800233c:	f7ff fd9a 	bl	8001e74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002340:	79fb      	ldrb	r3, [r7, #7]

}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002358:	4b16      	ldr	r3, [pc, #88]	@ (80023b4 <HAL_InitTick+0x68>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d022      	beq.n	80023a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002360:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <HAL_InitTick+0x6c>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b13      	ldr	r3, [pc, #76]	@ (80023b4 <HAL_InitTick+0x68>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800236c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002370:	fbb2 f3f3 	udiv	r3, r2, r3
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f944 	bl	8002602 <HAL_SYSTICK_Config>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10f      	bne.n	80023a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b0f      	cmp	r3, #15
 8002384:	d809      	bhi.n	800239a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002386:	2200      	movs	r2, #0
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	f04f 30ff 	mov.w	r0, #4294967295
 800238e:	f000 f910 	bl	80025b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002392:	4a0a      	ldr	r2, [pc, #40]	@ (80023bc <HAL_InitTick+0x70>)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	e007      	b.n	80023aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	e004      	b.n	80023aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e001      	b.n	80023aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	2000001c 	.word	0x2000001c
 80023b8:	20000014 	.word	0x20000014
 80023bc:	20000018 	.word	0x20000018

080023c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c4:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <HAL_IncTick+0x1c>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <HAL_IncTick+0x20>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	4a03      	ldr	r2, [pc, #12]	@ (80023dc <HAL_IncTick+0x1c>)
 80023d0:	6013      	str	r3, [r2, #0]
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	200002e8 	.word	0x200002e8
 80023e0:	2000001c 	.word	0x2000001c

080023e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return uwTick;
 80023e8:	4b03      	ldr	r3, [pc, #12]	@ (80023f8 <HAL_GetTick+0x14>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	200002e8 	.word	0x200002e8

080023fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800240c:	4b0c      	ldr	r3, [pc, #48]	@ (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002418:	4013      	ands	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002424:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800242c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242e:	4a04      	ldr	r2, [pc, #16]	@ (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	60d3      	str	r3, [r2, #12]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002448:	4b04      	ldr	r3, [pc, #16]	@ (800245c <__NVIC_GetPriorityGrouping+0x18>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	f003 0307 	and.w	r3, r3, #7
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	2b00      	cmp	r3, #0
 8002470:	db0b      	blt.n	800248a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	f003 021f 	and.w	r2, r3, #31
 8002478:	4907      	ldr	r1, [pc, #28]	@ (8002498 <__NVIC_EnableIRQ+0x38>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	2001      	movs	r0, #1
 8002482:	fa00 f202 	lsl.w	r2, r0, r2
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000e100 	.word	0xe000e100

0800249c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	db0a      	blt.n	80024c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	490c      	ldr	r1, [pc, #48]	@ (80024e8 <__NVIC_SetPriority+0x4c>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	440b      	add	r3, r1
 80024c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c4:	e00a      	b.n	80024dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4908      	ldr	r1, [pc, #32]	@ (80024ec <__NVIC_SetPriority+0x50>)
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	3b04      	subs	r3, #4
 80024d4:	0112      	lsls	r2, r2, #4
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	440b      	add	r3, r1
 80024da:	761a      	strb	r2, [r3, #24]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000e100 	.word	0xe000e100
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	@ 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f1c3 0307 	rsb	r3, r3, #7
 800250a:	2b04      	cmp	r3, #4
 800250c:	bf28      	it	cs
 800250e:	2304      	movcs	r3, #4
 8002510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3304      	adds	r3, #4
 8002516:	2b06      	cmp	r3, #6
 8002518:	d902      	bls.n	8002520 <NVIC_EncodePriority+0x30>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3b03      	subs	r3, #3
 800251e:	e000      	b.n	8002522 <NVIC_EncodePriority+0x32>
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	f04f 32ff 	mov.w	r2, #4294967295
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	401a      	ands	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002538:	f04f 31ff 	mov.w	r1, #4294967295
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	43d9      	mvns	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	4313      	orrs	r3, r2
         );
}
 800254a:	4618      	mov	r0, r3
 800254c:	3724      	adds	r7, #36	@ 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002568:	d301      	bcc.n	800256e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800256a:	2301      	movs	r3, #1
 800256c:	e00f      	b.n	800258e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256e:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <SysTick_Config+0x40>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002576:	210f      	movs	r1, #15
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	f7ff ff8e 	bl	800249c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <SysTick_Config+0x40>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002586:	4b04      	ldr	r3, [pc, #16]	@ (8002598 <SysTick_Config+0x40>)
 8002588:	2207      	movs	r2, #7
 800258a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	e000e010 	.word	0xe000e010

0800259c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff29 	bl	80023fc <__NVIC_SetPriorityGrouping>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025c0:	f7ff ff40 	bl	8002444 <__NVIC_GetPriorityGrouping>
 80025c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	6978      	ldr	r0, [r7, #20]
 80025cc:	f7ff ff90 	bl	80024f0 <NVIC_EncodePriority>
 80025d0:	4602      	mov	r2, r0
 80025d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff5f 	bl	800249c <__NVIC_SetPriority>
}
 80025de:	bf00      	nop
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff33 	bl	8002460 <__NVIC_EnableIRQ>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff ffa4 	bl	8002558 <SysTick_Config>
 8002610:	4603      	mov	r3, r0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800261c:	b480      	push	{r7}
 800261e:	b087      	sub	sp, #28
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800262a:	e15a      	b.n	80028e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	2101      	movs	r1, #1
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	4013      	ands	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 814c 	beq.w	80028dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d005      	beq.n	800265c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002658:	2b02      	cmp	r3, #2
 800265a:	d130      	bne.n	80026be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	2203      	movs	r2, #3
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002692:	2201      	movs	r2, #1
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4013      	ands	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	091b      	lsrs	r3, r3, #4
 80026a8:	f003 0201 	and.w	r2, r3, #1
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d017      	beq.n	80026fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	2203      	movs	r2, #3
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4013      	ands	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d123      	bne.n	800274e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	08da      	lsrs	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3208      	adds	r2, #8
 800270e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002712:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	220f      	movs	r2, #15
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	08da      	lsrs	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3208      	adds	r2, #8
 8002748:	6939      	ldr	r1, [r7, #16]
 800274a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	2203      	movs	r2, #3
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4013      	ands	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0203 	and.w	r2, r3, #3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80a6 	beq.w	80028dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002790:	4b5b      	ldr	r3, [pc, #364]	@ (8002900 <HAL_GPIO_Init+0x2e4>)
 8002792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002794:	4a5a      	ldr	r2, [pc, #360]	@ (8002900 <HAL_GPIO_Init+0x2e4>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6613      	str	r3, [r2, #96]	@ 0x60
 800279c:	4b58      	ldr	r3, [pc, #352]	@ (8002900 <HAL_GPIO_Init+0x2e4>)
 800279e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027a8:	4a56      	ldr	r2, [pc, #344]	@ (8002904 <HAL_GPIO_Init+0x2e8>)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	3302      	adds	r3, #2
 80027b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027d2:	d01f      	beq.n	8002814 <HAL_GPIO_Init+0x1f8>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a4c      	ldr	r2, [pc, #304]	@ (8002908 <HAL_GPIO_Init+0x2ec>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d019      	beq.n	8002810 <HAL_GPIO_Init+0x1f4>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a4b      	ldr	r2, [pc, #300]	@ (800290c <HAL_GPIO_Init+0x2f0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d013      	beq.n	800280c <HAL_GPIO_Init+0x1f0>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002910 <HAL_GPIO_Init+0x2f4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00d      	beq.n	8002808 <HAL_GPIO_Init+0x1ec>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a49      	ldr	r2, [pc, #292]	@ (8002914 <HAL_GPIO_Init+0x2f8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d007      	beq.n	8002804 <HAL_GPIO_Init+0x1e8>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a48      	ldr	r2, [pc, #288]	@ (8002918 <HAL_GPIO_Init+0x2fc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d101      	bne.n	8002800 <HAL_GPIO_Init+0x1e4>
 80027fc:	2305      	movs	r3, #5
 80027fe:	e00a      	b.n	8002816 <HAL_GPIO_Init+0x1fa>
 8002800:	2306      	movs	r3, #6
 8002802:	e008      	b.n	8002816 <HAL_GPIO_Init+0x1fa>
 8002804:	2304      	movs	r3, #4
 8002806:	e006      	b.n	8002816 <HAL_GPIO_Init+0x1fa>
 8002808:	2303      	movs	r3, #3
 800280a:	e004      	b.n	8002816 <HAL_GPIO_Init+0x1fa>
 800280c:	2302      	movs	r3, #2
 800280e:	e002      	b.n	8002816 <HAL_GPIO_Init+0x1fa>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <HAL_GPIO_Init+0x1fa>
 8002814:	2300      	movs	r3, #0
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	f002 0203 	and.w	r2, r2, #3
 800281c:	0092      	lsls	r2, r2, #2
 800281e:	4093      	lsls	r3, r2
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002826:	4937      	ldr	r1, [pc, #220]	@ (8002904 <HAL_GPIO_Init+0x2e8>)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	3302      	adds	r3, #2
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002834:	4b39      	ldr	r3, [pc, #228]	@ (800291c <HAL_GPIO_Init+0x300>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	43db      	mvns	r3, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002858:	4a30      	ldr	r2, [pc, #192]	@ (800291c <HAL_GPIO_Init+0x300>)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800285e:	4b2f      	ldr	r3, [pc, #188]	@ (800291c <HAL_GPIO_Init+0x300>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	43db      	mvns	r3, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002882:	4a26      	ldr	r2, [pc, #152]	@ (800291c <HAL_GPIO_Init+0x300>)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002888:	4b24      	ldr	r3, [pc, #144]	@ (800291c <HAL_GPIO_Init+0x300>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	43db      	mvns	r3, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028ac:	4a1b      	ldr	r2, [pc, #108]	@ (800291c <HAL_GPIO_Init+0x300>)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028b2:	4b1a      	ldr	r3, [pc, #104]	@ (800291c <HAL_GPIO_Init+0x300>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028d6:	4a11      	ldr	r2, [pc, #68]	@ (800291c <HAL_GPIO_Init+0x300>)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	3301      	adds	r3, #1
 80028e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f47f ae9d 	bne.w	800262c <HAL_GPIO_Init+0x10>
  }
}
 80028f2:	bf00      	nop
 80028f4:	bf00      	nop
 80028f6:	371c      	adds	r7, #28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	40021000 	.word	0x40021000
 8002904:	40010000 	.word	0x40010000
 8002908:	48000400 	.word	0x48000400
 800290c:	48000800 	.word	0x48000800
 8002910:	48000c00 	.word	0x48000c00
 8002914:	48001000 	.word	0x48001000
 8002918:	48001400 	.word	0x48001400
 800291c:	40010400 	.word	0x40010400

08002920 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	887b      	ldrh	r3, [r7, #2]
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
 800293c:	e001      	b.n	8002942 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002942:	7bfb      	ldrb	r3, [r7, #15]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	807b      	strh	r3, [r7, #2]
 800295c:	4613      	mov	r3, r2
 800295e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002960:	787b      	ldrb	r3, [r7, #1]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002966:	887a      	ldrh	r2, [r7, #2]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800296c:	e002      	b.n	8002974 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002992:	887a      	ldrh	r2, [r7, #2]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4013      	ands	r3, r2
 8002998:	041a      	lsls	r2, r3, #16
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	43d9      	mvns	r1, r3
 800299e:	887b      	ldrh	r3, [r7, #2]
 80029a0:	400b      	ands	r3, r1
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	619a      	str	r2, [r3, #24]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029be:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d006      	beq.n	80029d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ca:	4a05      	ldr	r2, [pc, #20]	@ (80029e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f806 	bl	80029e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40010400 	.word	0x40010400

080029e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e08d      	b.n	8002b28 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d106      	bne.n	8002a26 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff fa4b 	bl	8001ebc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2224      	movs	r2, #36	@ 0x24
 8002a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0201 	bic.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a4a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a5a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d107      	bne.n	8002a74 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a70:	609a      	str	r2, [r3, #8]
 8002a72:	e006      	b.n	8002a82 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002a80:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d108      	bne.n	8002a9c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	e007      	b.n	8002aac <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aaa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002abe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ace:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69d9      	ldr	r1, [r3, #28]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1a      	ldr	r2, [r3, #32]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d138      	bne.n	8002bb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e032      	b.n	8002bba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2224      	movs	r2, #36	@ 0x24
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0201 	bic.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6819      	ldr	r1, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e000      	b.n	8002bba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bb8:	2302      	movs	r3, #2
  }
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b085      	sub	sp, #20
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d139      	bne.n	8002c50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e033      	b.n	8002c52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2224      	movs	r2, #36	@ 0x24
 8002bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	e000      	b.n	8002c52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c50:	2302      	movs	r3, #2
  }
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d141      	bne.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c6e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c7a:	d131      	bne.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c7c:	4b47      	ldr	r3, [pc, #284]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c82:	4a46      	ldr	r2, [pc, #280]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c8c:	4b43      	ldr	r3, [pc, #268]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c94:	4a41      	ldr	r2, [pc, #260]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c9c:	4b40      	ldr	r3, [pc, #256]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2232      	movs	r2, #50	@ 0x32
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	4a3f      	ldr	r2, [pc, #252]	@ (8002da4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	0c9b      	lsrs	r3, r3, #18
 8002cae:	3301      	adds	r3, #1
 8002cb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cb2:	e002      	b.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cba:	4b38      	ldr	r3, [pc, #224]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cc6:	d102      	bne.n	8002cce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f2      	bne.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cce:	4b33      	ldr	r3, [pc, #204]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cda:	d158      	bne.n	8002d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e057      	b.n	8002d90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002cf0:	e04d      	b.n	8002d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cf8:	d141      	bne.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cfa:	4b28      	ldr	r3, [pc, #160]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d06:	d131      	bne.n	8002d6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d08:	4b24      	ldr	r3, [pc, #144]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d0e:	4a23      	ldr	r2, [pc, #140]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d18:	4b20      	ldr	r3, [pc, #128]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d20:	4a1e      	ldr	r2, [pc, #120]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d28:	4b1d      	ldr	r3, [pc, #116]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2232      	movs	r2, #50	@ 0x32
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	4a1c      	ldr	r2, [pc, #112]	@ (8002da4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	0c9b      	lsrs	r3, r3, #18
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d3e:	e002      	b.n	8002d46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d46:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d52:	d102      	bne.n	8002d5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f2      	bne.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d5a:	4b10      	ldr	r3, [pc, #64]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d66:	d112      	bne.n	8002d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e011      	b.n	8002d90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d72:	4a0a      	ldr	r2, [pc, #40]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d7c:	e007      	b.n	8002d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d7e:	4b07      	ldr	r3, [pc, #28]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d86:	4a05      	ldr	r2, [pc, #20]	@ (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	40007000 	.word	0x40007000
 8002da0:	20000014 	.word	0x20000014
 8002da4:	431bde83 	.word	0x431bde83

08002da8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002dac:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4a04      	ldr	r2, [pc, #16]	@ (8002dc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002db2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002db6:	6093      	str	r3, [r2, #8]
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40007000 	.word	0x40007000

08002dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e2fe      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d075      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002de6:	4b97      	ldr	r3, [pc, #604]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002df0:	4b94      	ldr	r3, [pc, #592]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	2b0c      	cmp	r3, #12
 8002dfe:	d102      	bne.n	8002e06 <HAL_RCC_OscConfig+0x3e>
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d002      	beq.n	8002e0c <HAL_RCC_OscConfig+0x44>
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d10b      	bne.n	8002e24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	4b8d      	ldr	r3, [pc, #564]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d05b      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x108>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d157      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e2d9      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e2c:	d106      	bne.n	8002e3c <HAL_RCC_OscConfig+0x74>
 8002e2e:	4b85      	ldr	r3, [pc, #532]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a84      	ldr	r2, [pc, #528]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e01d      	b.n	8002e78 <HAL_RCC_OscConfig+0xb0>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e44:	d10c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x98>
 8002e46:	4b7f      	ldr	r3, [pc, #508]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	4b7c      	ldr	r3, [pc, #496]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a7b      	ldr	r2, [pc, #492]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e00b      	b.n	8002e78 <HAL_RCC_OscConfig+0xb0>
 8002e60:	4b78      	ldr	r3, [pc, #480]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a77      	ldr	r2, [pc, #476]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	4b75      	ldr	r3, [pc, #468]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a74      	ldr	r2, [pc, #464]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d013      	beq.n	8002ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7ff fab0 	bl	80023e4 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e88:	f7ff faac 	bl	80023e4 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	@ 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e29e      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e9a:	4b6a      	ldr	r3, [pc, #424]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0xc0>
 8002ea6:	e014      	b.n	8002ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7ff fa9c 	bl	80023e4 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb0:	f7ff fa98 	bl	80023e4 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b64      	cmp	r3, #100	@ 0x64
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e28a      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ec2:	4b60      	ldr	r3, [pc, #384]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0xe8>
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d075      	beq.n	8002fca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ede:	4b59      	ldr	r3, [pc, #356]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ee8:	4b56      	ldr	r3, [pc, #344]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	2b0c      	cmp	r3, #12
 8002ef6:	d102      	bne.n	8002efe <HAL_RCC_OscConfig+0x136>
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d002      	beq.n	8002f04 <HAL_RCC_OscConfig+0x13c>
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d11f      	bne.n	8002f44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f04:	4b4f      	ldr	r3, [pc, #316]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_OscConfig+0x154>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e25d      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1c:	4b49      	ldr	r3, [pc, #292]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	061b      	lsls	r3, r3, #24
 8002f2a:	4946      	ldr	r1, [pc, #280]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f30:	4b45      	ldr	r3, [pc, #276]	@ (8003048 <HAL_RCC_OscConfig+0x280>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fa09 	bl	800234c <HAL_InitTick>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d043      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e249      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d023      	beq.n	8002f94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a3c      	ldr	r2, [pc, #240]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7ff fa44 	bl	80023e4 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f60:	f7ff fa40 	bl	80023e4 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e232      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f72:	4b34      	ldr	r3, [pc, #208]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7e:	4b31      	ldr	r3, [pc, #196]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	061b      	lsls	r3, r3, #24
 8002f8c:	492d      	ldr	r1, [pc, #180]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	604b      	str	r3, [r1, #4]
 8002f92:	e01a      	b.n	8002fca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f94:	4b2b      	ldr	r3, [pc, #172]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a2a      	ldr	r2, [pc, #168]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002f9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7ff fa20 	bl	80023e4 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa8:	f7ff fa1c 	bl	80023e4 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e20e      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fba:	4b22      	ldr	r3, [pc, #136]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x1e0>
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d041      	beq.n	800305a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01c      	beq.n	8003018 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fde:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fe4:	4a17      	ldr	r2, [pc, #92]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fee:	f7ff f9f9 	bl	80023e4 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff6:	f7ff f9f5 	bl	80023e4 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e1e7      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003008:	4b0e      	ldr	r3, [pc, #56]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 800300a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0ef      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x22e>
 8003016:	e020      	b.n	800305a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003018:	4b0a      	ldr	r3, [pc, #40]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 800301a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800301e:	4a09      	ldr	r2, [pc, #36]	@ (8003044 <HAL_RCC_OscConfig+0x27c>)
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003028:	f7ff f9dc 	bl	80023e4 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800302e:	e00d      	b.n	800304c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003030:	f7ff f9d8 	bl	80023e4 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d906      	bls.n	800304c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e1ca      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000
 8003048:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800304c:	4b8c      	ldr	r3, [pc, #560]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 800304e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1ea      	bne.n	8003030 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 80a6 	beq.w	80031b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003068:	2300      	movs	r3, #0
 800306a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800306c:	4b84      	ldr	r3, [pc, #528]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 800306e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_RCC_OscConfig+0x2b4>
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <HAL_RCC_OscConfig+0x2b6>
 800307c:	2300      	movs	r3, #0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00d      	beq.n	800309e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003082:	4b7f      	ldr	r3, [pc, #508]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003086:	4a7e      	ldr	r2, [pc, #504]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 8003088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800308c:	6593      	str	r3, [r2, #88]	@ 0x58
 800308e:	4b7c      	ldr	r3, [pc, #496]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800309a:	2301      	movs	r3, #1
 800309c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800309e:	4b79      	ldr	r3, [pc, #484]	@ (8003284 <HAL_RCC_OscConfig+0x4bc>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d118      	bne.n	80030dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030aa:	4b76      	ldr	r3, [pc, #472]	@ (8003284 <HAL_RCC_OscConfig+0x4bc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a75      	ldr	r2, [pc, #468]	@ (8003284 <HAL_RCC_OscConfig+0x4bc>)
 80030b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b6:	f7ff f995 	bl	80023e4 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030be:	f7ff f991 	bl	80023e4 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e183      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003284 <HAL_RCC_OscConfig+0x4bc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d108      	bne.n	80030f6 <HAL_RCC_OscConfig+0x32e>
 80030e4:	4b66      	ldr	r3, [pc, #408]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ea:	4a65      	ldr	r2, [pc, #404]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030f4:	e024      	b.n	8003140 <HAL_RCC_OscConfig+0x378>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b05      	cmp	r3, #5
 80030fc:	d110      	bne.n	8003120 <HAL_RCC_OscConfig+0x358>
 80030fe:	4b60      	ldr	r3, [pc, #384]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003104:	4a5e      	ldr	r2, [pc, #376]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 8003106:	f043 0304 	orr.w	r3, r3, #4
 800310a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800310e:	4b5c      	ldr	r3, [pc, #368]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 8003110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003114:	4a5a      	ldr	r2, [pc, #360]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800311e:	e00f      	b.n	8003140 <HAL_RCC_OscConfig+0x378>
 8003120:	4b57      	ldr	r3, [pc, #348]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 8003122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003126:	4a56      	ldr	r2, [pc, #344]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003130:	4b53      	ldr	r3, [pc, #332]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003136:	4a52      	ldr	r2, [pc, #328]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 8003138:	f023 0304 	bic.w	r3, r3, #4
 800313c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d016      	beq.n	8003176 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7ff f94c 	bl	80023e4 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800314e:	e00a      	b.n	8003166 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003150:	f7ff f948 	bl	80023e4 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e138      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003166:	4b46      	ldr	r3, [pc, #280]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0ed      	beq.n	8003150 <HAL_RCC_OscConfig+0x388>
 8003174:	e015      	b.n	80031a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003176:	f7ff f935 	bl	80023e4 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800317c:	e00a      	b.n	8003194 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7ff f931 	bl	80023e4 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e121      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003194:	4b3a      	ldr	r3, [pc, #232]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1ed      	bne.n	800317e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031a2:	7ffb      	ldrb	r3, [r7, #31]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d105      	bne.n	80031b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a8:	4b35      	ldr	r3, [pc, #212]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ac:	4a34      	ldr	r2, [pc, #208]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 80031ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d03c      	beq.n	800323a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01c      	beq.n	8003202 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 80031ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7ff f904 	bl	80023e4 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031e0:	f7ff f900 	bl	80023e4 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e0f2      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031f2:	4b23      	ldr	r3, [pc, #140]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 80031f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ef      	beq.n	80031e0 <HAL_RCC_OscConfig+0x418>
 8003200:	e01b      	b.n	800323a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003202:	4b1f      	ldr	r3, [pc, #124]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 8003204:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003208:	4a1d      	ldr	r2, [pc, #116]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003212:	f7ff f8e7 	bl	80023e4 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800321a:	f7ff f8e3 	bl	80023e4 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e0d5      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800322c:	4b14      	ldr	r3, [pc, #80]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 800322e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1ef      	bne.n	800321a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 80c9 	beq.w	80033d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003244:	4b0e      	ldr	r3, [pc, #56]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b0c      	cmp	r3, #12
 800324e:	f000 8083 	beq.w	8003358 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d15e      	bne.n	8003318 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b09      	ldr	r3, [pc, #36]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a08      	ldr	r2, [pc, #32]	@ (8003280 <HAL_RCC_OscConfig+0x4b8>)
 8003260:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003266:	f7ff f8bd 	bl	80023e4 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800326c:	e00c      	b.n	8003288 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326e:	f7ff f8b9 	bl	80023e4 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d905      	bls.n	8003288 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e0ab      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
 8003280:	40021000 	.word	0x40021000
 8003284:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003288:	4b55      	ldr	r3, [pc, #340]	@ (80033e0 <HAL_RCC_OscConfig+0x618>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1ec      	bne.n	800326e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003294:	4b52      	ldr	r3, [pc, #328]	@ (80033e0 <HAL_RCC_OscConfig+0x618>)
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	4b52      	ldr	r3, [pc, #328]	@ (80033e4 <HAL_RCC_OscConfig+0x61c>)
 800329a:	4013      	ands	r3, r2
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6a11      	ldr	r1, [r2, #32]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032a4:	3a01      	subs	r2, #1
 80032a6:	0112      	lsls	r2, r2, #4
 80032a8:	4311      	orrs	r1, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80032ae:	0212      	lsls	r2, r2, #8
 80032b0:	4311      	orrs	r1, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80032b6:	0852      	lsrs	r2, r2, #1
 80032b8:	3a01      	subs	r2, #1
 80032ba:	0552      	lsls	r2, r2, #21
 80032bc:	4311      	orrs	r1, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80032c2:	0852      	lsrs	r2, r2, #1
 80032c4:	3a01      	subs	r2, #1
 80032c6:	0652      	lsls	r2, r2, #25
 80032c8:	4311      	orrs	r1, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80032ce:	06d2      	lsls	r2, r2, #27
 80032d0:	430a      	orrs	r2, r1
 80032d2:	4943      	ldr	r1, [pc, #268]	@ (80033e0 <HAL_RCC_OscConfig+0x618>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d8:	4b41      	ldr	r3, [pc, #260]	@ (80033e0 <HAL_RCC_OscConfig+0x618>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a40      	ldr	r2, [pc, #256]	@ (80033e0 <HAL_RCC_OscConfig+0x618>)
 80032de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032e4:	4b3e      	ldr	r3, [pc, #248]	@ (80033e0 <HAL_RCC_OscConfig+0x618>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4a3d      	ldr	r2, [pc, #244]	@ (80033e0 <HAL_RCC_OscConfig+0x618>)
 80032ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7ff f878 	bl	80023e4 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f8:	f7ff f874 	bl	80023e4 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e066      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330a:	4b35      	ldr	r3, [pc, #212]	@ (80033e0 <HAL_RCC_OscConfig+0x618>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0x530>
 8003316:	e05e      	b.n	80033d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003318:	4b31      	ldr	r3, [pc, #196]	@ (80033e0 <HAL_RCC_OscConfig+0x618>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a30      	ldr	r2, [pc, #192]	@ (80033e0 <HAL_RCC_OscConfig+0x618>)
 800331e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7ff f85e 	bl	80023e4 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332c:	f7ff f85a 	bl	80023e4 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e04c      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800333e:	4b28      	ldr	r3, [pc, #160]	@ (80033e0 <HAL_RCC_OscConfig+0x618>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800334a:	4b25      	ldr	r3, [pc, #148]	@ (80033e0 <HAL_RCC_OscConfig+0x618>)
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	4924      	ldr	r1, [pc, #144]	@ (80033e0 <HAL_RCC_OscConfig+0x618>)
 8003350:	4b25      	ldr	r3, [pc, #148]	@ (80033e8 <HAL_RCC_OscConfig+0x620>)
 8003352:	4013      	ands	r3, r2
 8003354:	60cb      	str	r3, [r1, #12]
 8003356:	e03e      	b.n	80033d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e039      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003364:	4b1e      	ldr	r3, [pc, #120]	@ (80033e0 <HAL_RCC_OscConfig+0x618>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f003 0203 	and.w	r2, r3, #3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	429a      	cmp	r2, r3
 8003376:	d12c      	bne.n	80033d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003382:	3b01      	subs	r3, #1
 8003384:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d123      	bne.n	80033d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003394:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003396:	429a      	cmp	r2, r3
 8003398:	d11b      	bne.n	80033d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d113      	bne.n	80033d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	3b01      	subs	r3, #1
 80033b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d109      	bne.n	80033d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	3b01      	subs	r3, #1
 80033cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d001      	beq.n	80033d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3720      	adds	r7, #32
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	019f800c 	.word	0x019f800c
 80033e8:	feeefffc 	.word	0xfeeefffc

080033ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e11e      	b.n	8003642 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003404:	4b91      	ldr	r3, [pc, #580]	@ (800364c <HAL_RCC_ClockConfig+0x260>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d910      	bls.n	8003434 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003412:	4b8e      	ldr	r3, [pc, #568]	@ (800364c <HAL_RCC_ClockConfig+0x260>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 020f 	bic.w	r2, r3, #15
 800341a:	498c      	ldr	r1, [pc, #560]	@ (800364c <HAL_RCC_ClockConfig+0x260>)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	4313      	orrs	r3, r2
 8003420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003422:	4b8a      	ldr	r3, [pc, #552]	@ (800364c <HAL_RCC_ClockConfig+0x260>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d001      	beq.n	8003434 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e106      	b.n	8003642 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d073      	beq.n	8003528 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b03      	cmp	r3, #3
 8003446:	d129      	bne.n	800349c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003448:	4b81      	ldr	r3, [pc, #516]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0f4      	b.n	8003642 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003458:	f000 f99e 	bl	8003798 <RCC_GetSysClockFreqFromPLLSource>
 800345c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4a7c      	ldr	r2, [pc, #496]	@ (8003654 <HAL_RCC_ClockConfig+0x268>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d93f      	bls.n	80034e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003466:	4b7a      	ldr	r3, [pc, #488]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800347a:	2b00      	cmp	r3, #0
 800347c:	d033      	beq.n	80034e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003482:	2b00      	cmp	r3, #0
 8003484:	d12f      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003486:	4b72      	ldr	r3, [pc, #456]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800348e:	4a70      	ldr	r2, [pc, #448]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 8003490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003494:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003496:	2380      	movs	r3, #128	@ 0x80
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	e024      	b.n	80034e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d107      	bne.n	80034b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d109      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0c6      	b.n	8003642 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b4:	4b66      	ldr	r3, [pc, #408]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0be      	b.n	8003642 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034c4:	f000 f8ce 	bl	8003664 <HAL_RCC_GetSysClockFreq>
 80034c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4a61      	ldr	r2, [pc, #388]	@ (8003654 <HAL_RCC_ClockConfig+0x268>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d909      	bls.n	80034e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034da:	4a5d      	ldr	r2, [pc, #372]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 80034dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034e2:	2380      	movs	r3, #128	@ 0x80
 80034e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034e6:	4b5a      	ldr	r3, [pc, #360]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f023 0203 	bic.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4957      	ldr	r1, [pc, #348]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f8:	f7fe ff74 	bl	80023e4 <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003500:	f7fe ff70 	bl	80023e4 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e095      	b.n	8003642 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	4b4e      	ldr	r3, [pc, #312]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 020c 	and.w	r2, r3, #12
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	429a      	cmp	r2, r3
 8003526:	d1eb      	bne.n	8003500 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d023      	beq.n	800357c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003540:	4b43      	ldr	r3, [pc, #268]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4a42      	ldr	r2, [pc, #264]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 8003546:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800354a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b00      	cmp	r3, #0
 8003556:	d007      	beq.n	8003568 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003558:	4b3d      	ldr	r3, [pc, #244]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003560:	4a3b      	ldr	r2, [pc, #236]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 8003562:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003566:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003568:	4b39      	ldr	r3, [pc, #228]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	4936      	ldr	r1, [pc, #216]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
 800357a:	e008      	b.n	800358e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	2b80      	cmp	r3, #128	@ 0x80
 8003580:	d105      	bne.n	800358e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003582:	4b33      	ldr	r3, [pc, #204]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	4a32      	ldr	r2, [pc, #200]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 8003588:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800358c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800358e:	4b2f      	ldr	r3, [pc, #188]	@ (800364c <HAL_RCC_ClockConfig+0x260>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d21d      	bcs.n	80035d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359c:	4b2b      	ldr	r3, [pc, #172]	@ (800364c <HAL_RCC_ClockConfig+0x260>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f023 020f 	bic.w	r2, r3, #15
 80035a4:	4929      	ldr	r1, [pc, #164]	@ (800364c <HAL_RCC_ClockConfig+0x260>)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035ac:	f7fe ff1a 	bl	80023e4 <HAL_GetTick>
 80035b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	e00a      	b.n	80035ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b4:	f7fe ff16 	bl	80023e4 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e03b      	b.n	8003642 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ca:	4b20      	ldr	r3, [pc, #128]	@ (800364c <HAL_RCC_ClockConfig+0x260>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d1ed      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4917      	ldr	r1, [pc, #92]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003602:	4b13      	ldr	r3, [pc, #76]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	490f      	ldr	r1, [pc, #60]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003616:	f000 f825 	bl	8003664 <HAL_RCC_GetSysClockFreq>
 800361a:	4602      	mov	r2, r0
 800361c:	4b0c      	ldr	r3, [pc, #48]	@ (8003650 <HAL_RCC_ClockConfig+0x264>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	490c      	ldr	r1, [pc, #48]	@ (8003658 <HAL_RCC_ClockConfig+0x26c>)
 8003628:	5ccb      	ldrb	r3, [r1, r3]
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	fa22 f303 	lsr.w	r3, r2, r3
 8003632:	4a0a      	ldr	r2, [pc, #40]	@ (800365c <HAL_RCC_ClockConfig+0x270>)
 8003634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003636:	4b0a      	ldr	r3, [pc, #40]	@ (8003660 <HAL_RCC_ClockConfig+0x274>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe fe86 	bl	800234c <HAL_InitTick>
 8003640:	4603      	mov	r3, r0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40022000 	.word	0x40022000
 8003650:	40021000 	.word	0x40021000
 8003654:	04c4b400 	.word	0x04c4b400
 8003658:	0800652c 	.word	0x0800652c
 800365c:	20000014 	.word	0x20000014
 8003660:	20000018 	.word	0x20000018

08003664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800366a:	4b2c      	ldr	r3, [pc, #176]	@ (800371c <HAL_RCC_GetSysClockFreq+0xb8>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b04      	cmp	r3, #4
 8003674:	d102      	bne.n	800367c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003676:	4b2a      	ldr	r3, [pc, #168]	@ (8003720 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	e047      	b.n	800370c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800367c:	4b27      	ldr	r3, [pc, #156]	@ (800371c <HAL_RCC_GetSysClockFreq+0xb8>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 030c 	and.w	r3, r3, #12
 8003684:	2b08      	cmp	r3, #8
 8003686:	d102      	bne.n	800368e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003688:	4b26      	ldr	r3, [pc, #152]	@ (8003724 <HAL_RCC_GetSysClockFreq+0xc0>)
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	e03e      	b.n	800370c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800368e:	4b23      	ldr	r3, [pc, #140]	@ (800371c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 030c 	and.w	r3, r3, #12
 8003696:	2b0c      	cmp	r3, #12
 8003698:	d136      	bne.n	8003708 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800369a:	4b20      	ldr	r3, [pc, #128]	@ (800371c <HAL_RCC_GetSysClockFreq+0xb8>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036a4:	4b1d      	ldr	r3, [pc, #116]	@ (800371c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	3301      	adds	r3, #1
 80036b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d10c      	bne.n	80036d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003724 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c0:	4a16      	ldr	r2, [pc, #88]	@ (800371c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036c2:	68d2      	ldr	r2, [r2, #12]
 80036c4:	0a12      	lsrs	r2, r2, #8
 80036c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	617b      	str	r3, [r7, #20]
      break;
 80036d0:	e00c      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036d2:	4a13      	ldr	r2, [pc, #76]	@ (8003720 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036da:	4a10      	ldr	r2, [pc, #64]	@ (800371c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036dc:	68d2      	ldr	r2, [r2, #12]
 80036de:	0a12      	lsrs	r2, r2, #8
 80036e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036e4:	fb02 f303 	mul.w	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]
      break;
 80036ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036ec:	4b0b      	ldr	r3, [pc, #44]	@ (800371c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	0e5b      	lsrs	r3, r3, #25
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	3301      	adds	r3, #1
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	e001      	b.n	800370c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800370c:	693b      	ldr	r3, [r7, #16]
}
 800370e:	4618      	mov	r0, r3
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000
 8003720:	00f42400 	.word	0x00f42400
 8003724:	016e3600 	.word	0x016e3600

08003728 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800372c:	4b03      	ldr	r3, [pc, #12]	@ (800373c <HAL_RCC_GetHCLKFreq+0x14>)
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20000014 	.word	0x20000014

08003740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003744:	f7ff fff0 	bl	8003728 <HAL_RCC_GetHCLKFreq>
 8003748:	4602      	mov	r2, r0
 800374a:	4b06      	ldr	r3, [pc, #24]	@ (8003764 <HAL_RCC_GetPCLK1Freq+0x24>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	0a1b      	lsrs	r3, r3, #8
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	4904      	ldr	r1, [pc, #16]	@ (8003768 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003756:	5ccb      	ldrb	r3, [r1, r3]
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003760:	4618      	mov	r0, r3
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021000 	.word	0x40021000
 8003768:	0800653c 	.word	0x0800653c

0800376c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003770:	f7ff ffda 	bl	8003728 <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	0adb      	lsrs	r3, r3, #11
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4904      	ldr	r1, [pc, #16]	@ (8003794 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021000 	.word	0x40021000
 8003794:	0800653c 	.word	0x0800653c

08003798 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800379e:	4b1e      	ldr	r3, [pc, #120]	@ (8003818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	3301      	adds	r3, #1
 80037b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d10c      	bne.n	80037d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037bc:	4a17      	ldr	r2, [pc, #92]	@ (800381c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	4a14      	ldr	r2, [pc, #80]	@ (8003818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037c6:	68d2      	ldr	r2, [r2, #12]
 80037c8:	0a12      	lsrs	r2, r2, #8
 80037ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
 80037d2:	617b      	str	r3, [r7, #20]
    break;
 80037d4:	e00c      	b.n	80037f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037d6:	4a12      	ldr	r2, [pc, #72]	@ (8003820 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	fbb2 f3f3 	udiv	r3, r2, r3
 80037de:	4a0e      	ldr	r2, [pc, #56]	@ (8003818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037e0:	68d2      	ldr	r2, [r2, #12]
 80037e2:	0a12      	lsrs	r2, r2, #8
 80037e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037e8:	fb02 f303 	mul.w	r3, r2, r3
 80037ec:	617b      	str	r3, [r7, #20]
    break;
 80037ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037f0:	4b09      	ldr	r3, [pc, #36]	@ (8003818 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	0e5b      	lsrs	r3, r3, #25
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	3301      	adds	r3, #1
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	fbb2 f3f3 	udiv	r3, r2, r3
 8003808:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800380a:	687b      	ldr	r3, [r7, #4]
}
 800380c:	4618      	mov	r0, r3
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	40021000 	.word	0x40021000
 800381c:	016e3600 	.word	0x016e3600
 8003820:	00f42400 	.word	0x00f42400

08003824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800382c:	2300      	movs	r3, #0
 800382e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003830:	2300      	movs	r3, #0
 8003832:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 8098 	beq.w	8003972 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003842:	2300      	movs	r3, #0
 8003844:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003846:	4b43      	ldr	r3, [pc, #268]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10d      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003852:	4b40      	ldr	r3, [pc, #256]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003856:	4a3f      	ldr	r2, [pc, #252]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800385c:	6593      	str	r3, [r2, #88]	@ 0x58
 800385e:	4b3d      	ldr	r3, [pc, #244]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386a:	2301      	movs	r3, #1
 800386c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800386e:	4b3a      	ldr	r3, [pc, #232]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a39      	ldr	r2, [pc, #228]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003878:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800387a:	f7fe fdb3 	bl	80023e4 <HAL_GetTick>
 800387e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003880:	e009      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003882:	f7fe fdaf 	bl	80023e4 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d902      	bls.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	74fb      	strb	r3, [r7, #19]
        break;
 8003894:	e005      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003896:	4b30      	ldr	r3, [pc, #192]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0ef      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80038a2:	7cfb      	ldrb	r3, [r7, #19]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d159      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d01e      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d019      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038c4:	4b23      	ldr	r3, [pc, #140]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038d0:	4b20      	ldr	r3, [pc, #128]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038f0:	4a18      	ldr	r2, [pc, #96]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d016      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003902:	f7fe fd6f 	bl	80023e4 <HAL_GetTick>
 8003906:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003908:	e00b      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390a:	f7fe fd6b 	bl	80023e4 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003918:	4293      	cmp	r3, r2
 800391a:	d902      	bls.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	74fb      	strb	r3, [r7, #19]
            break;
 8003920:	e006      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003922:	4b0c      	ldr	r3, [pc, #48]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ec      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003930:	7cfb      	ldrb	r3, [r7, #19]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10b      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003936:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003944:	4903      	ldr	r1, [pc, #12]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800394c:	e008      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800394e:	7cfb      	ldrb	r3, [r7, #19]
 8003950:	74bb      	strb	r3, [r7, #18]
 8003952:	e005      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003954:	40021000 	.word	0x40021000
 8003958:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395c:	7cfb      	ldrb	r3, [r7, #19]
 800395e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003960:	7c7b      	ldrb	r3, [r7, #17]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d105      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003966:	4ba7      	ldr	r3, [pc, #668]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396a:	4aa6      	ldr	r2, [pc, #664]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003970:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800397e:	4ba1      	ldr	r3, [pc, #644]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003984:	f023 0203 	bic.w	r2, r3, #3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	499d      	ldr	r1, [pc, #628]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039a0:	4b98      	ldr	r3, [pc, #608]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a6:	f023 020c 	bic.w	r2, r3, #12
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	4995      	ldr	r1, [pc, #596]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039c2:	4b90      	ldr	r3, [pc, #576]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	498c      	ldr	r1, [pc, #560]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039e4:	4b87      	ldr	r3, [pc, #540]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	4984      	ldr	r1, [pc, #528]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a06:	4b7f      	ldr	r3, [pc, #508]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	497b      	ldr	r1, [pc, #492]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a28:	4b76      	ldr	r3, [pc, #472]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	4973      	ldr	r1, [pc, #460]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a4a:	4b6e      	ldr	r3, [pc, #440]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a50:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	496a      	ldr	r1, [pc, #424]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a6c:	4b65      	ldr	r3, [pc, #404]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a72:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	4962      	ldr	r1, [pc, #392]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a8e:	4b5d      	ldr	r3, [pc, #372]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	4959      	ldr	r1, [pc, #356]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ab0:	4b54      	ldr	r3, [pc, #336]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ab6:	f023 0203 	bic.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abe:	4951      	ldr	r1, [pc, #324]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ad2:	4b4c      	ldr	r3, [pc, #304]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae0:	4948      	ldr	r1, [pc, #288]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d015      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003af4:	4b43      	ldr	r3, [pc, #268]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b02:	4940      	ldr	r1, [pc, #256]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b12:	d105      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b14:	4b3b      	ldr	r3, [pc, #236]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a3a      	ldr	r2, [pc, #232]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d015      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b2c:	4b35      	ldr	r3, [pc, #212]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b32:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3a:	4932      	ldr	r1, [pc, #200]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b4a:	d105      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4a2c      	ldr	r2, [pc, #176]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b56:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d015      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b64:	4b27      	ldr	r3, [pc, #156]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b72:	4924      	ldr	r1, [pc, #144]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b82:	d105      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b84:	4b1f      	ldr	r3, [pc, #124]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a1e      	ldr	r2, [pc, #120]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b8e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d015      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b9c:	4b19      	ldr	r3, [pc, #100]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003baa:	4916      	ldr	r1, [pc, #88]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bba:	d105      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bbc:	4b11      	ldr	r3, [pc, #68]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4a10      	ldr	r2, [pc, #64]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bc6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d019      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	4908      	ldr	r1, [pc, #32]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bf2:	d109      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bf4:	4b03      	ldr	r3, [pc, #12]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4a02      	ldr	r2, [pc, #8]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bfe:	60d3      	str	r3, [r2, #12]
 8003c00:	e002      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d015      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c14:	4b29      	ldr	r3, [pc, #164]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c22:	4926      	ldr	r1, [pc, #152]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c32:	d105      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c34:	4b21      	ldr	r3, [pc, #132]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	4a20      	ldr	r2, [pc, #128]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c3e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d015      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c52:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c5a:	4918      	ldr	r1, [pc, #96]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c6a:	d105      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c6c:	4b13      	ldr	r3, [pc, #76]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a12      	ldr	r2, [pc, #72]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c76:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d015      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c84:	4b0d      	ldr	r3, [pc, #52]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c92:	490a      	ldr	r1, [pc, #40]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ca2:	d105      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca4:	4b05      	ldr	r3, [pc, #20]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4a04      	ldr	r2, [pc, #16]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003caa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003cb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40021000 	.word	0x40021000

08003cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e049      	b.n	8003d66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fe f9d6 	bl	8002098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4610      	mov	r0, r2
 8003d00:	f000 ff5e 	bl	8004bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d001      	beq.n	8003d88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e04c      	b.n	8003e22 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a26      	ldr	r2, [pc, #152]	@ (8003e30 <HAL_TIM_Base_Start+0xc0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d022      	beq.n	8003de0 <HAL_TIM_Base_Start+0x70>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da2:	d01d      	beq.n	8003de0 <HAL_TIM_Base_Start+0x70>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a22      	ldr	r2, [pc, #136]	@ (8003e34 <HAL_TIM_Base_Start+0xc4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d018      	beq.n	8003de0 <HAL_TIM_Base_Start+0x70>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a21      	ldr	r2, [pc, #132]	@ (8003e38 <HAL_TIM_Base_Start+0xc8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d013      	beq.n	8003de0 <HAL_TIM_Base_Start+0x70>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e3c <HAL_TIM_Base_Start+0xcc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00e      	beq.n	8003de0 <HAL_TIM_Base_Start+0x70>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8003e40 <HAL_TIM_Base_Start+0xd0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d009      	beq.n	8003de0 <HAL_TIM_Base_Start+0x70>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e44 <HAL_TIM_Base_Start+0xd4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d004      	beq.n	8003de0 <HAL_TIM_Base_Start+0x70>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1b      	ldr	r2, [pc, #108]	@ (8003e48 <HAL_TIM_Base_Start+0xd8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d115      	bne.n	8003e0c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	4b19      	ldr	r3, [pc, #100]	@ (8003e4c <HAL_TIM_Base_Start+0xdc>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b06      	cmp	r3, #6
 8003df0:	d015      	beq.n	8003e1e <HAL_TIM_Base_Start+0xae>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003df8:	d011      	beq.n	8003e1e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0201 	orr.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0a:	e008      	b.n	8003e1e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	e000      	b.n	8003e20 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40012c00 	.word	0x40012c00
 8003e34:	40000400 	.word	0x40000400
 8003e38:	40000800 	.word	0x40000800
 8003e3c:	40000c00 	.word	0x40000c00
 8003e40:	40013400 	.word	0x40013400
 8003e44:	40014000 	.word	0x40014000
 8003e48:	40015000 	.word	0x40015000
 8003e4c:	00010007 	.word	0x00010007

08003e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d001      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e054      	b.n	8003f12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a26      	ldr	r2, [pc, #152]	@ (8003f20 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d022      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x80>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e92:	d01d      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x80>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a22      	ldr	r2, [pc, #136]	@ (8003f24 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d018      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x80>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a21      	ldr	r2, [pc, #132]	@ (8003f28 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d013      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x80>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1f      	ldr	r2, [pc, #124]	@ (8003f2c <HAL_TIM_Base_Start_IT+0xdc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00e      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x80>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f30 <HAL_TIM_Base_Start_IT+0xe0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d009      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x80>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f34 <HAL_TIM_Base_Start_IT+0xe4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d004      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x80>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1b      	ldr	r2, [pc, #108]	@ (8003f38 <HAL_TIM_Base_Start_IT+0xe8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d115      	bne.n	8003efc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	4b19      	ldr	r3, [pc, #100]	@ (8003f3c <HAL_TIM_Base_Start_IT+0xec>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b06      	cmp	r3, #6
 8003ee0:	d015      	beq.n	8003f0e <HAL_TIM_Base_Start_IT+0xbe>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ee8:	d011      	beq.n	8003f0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0201 	orr.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efa:	e008      	b.n	8003f0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	e000      	b.n	8003f10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40012c00 	.word	0x40012c00
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40013400 	.word	0x40013400
 8003f34:	40014000 	.word	0x40014000
 8003f38:	40015000 	.word	0x40015000
 8003f3c:	00010007 	.word	0x00010007

08003f40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e049      	b.n	8003fe6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fe f876 	bl	8002058 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4610      	mov	r0, r2
 8003f80:	f000 fe1e 	bl	8004bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d109      	bne.n	8004014 <HAL_TIM_PWM_Start+0x24>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b01      	cmp	r3, #1
 800400a:	bf14      	ite	ne
 800400c:	2301      	movne	r3, #1
 800400e:	2300      	moveq	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	e03c      	b.n	800408e <HAL_TIM_PWM_Start+0x9e>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2b04      	cmp	r3, #4
 8004018:	d109      	bne.n	800402e <HAL_TIM_PWM_Start+0x3e>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b01      	cmp	r3, #1
 8004024:	bf14      	ite	ne
 8004026:	2301      	movne	r3, #1
 8004028:	2300      	moveq	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	e02f      	b.n	800408e <HAL_TIM_PWM_Start+0x9e>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d109      	bne.n	8004048 <HAL_TIM_PWM_Start+0x58>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b01      	cmp	r3, #1
 800403e:	bf14      	ite	ne
 8004040:	2301      	movne	r3, #1
 8004042:	2300      	moveq	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	e022      	b.n	800408e <HAL_TIM_PWM_Start+0x9e>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2b0c      	cmp	r3, #12
 800404c:	d109      	bne.n	8004062 <HAL_TIM_PWM_Start+0x72>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b01      	cmp	r3, #1
 8004058:	bf14      	ite	ne
 800405a:	2301      	movne	r3, #1
 800405c:	2300      	moveq	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	e015      	b.n	800408e <HAL_TIM_PWM_Start+0x9e>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b10      	cmp	r3, #16
 8004066:	d109      	bne.n	800407c <HAL_TIM_PWM_Start+0x8c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b01      	cmp	r3, #1
 8004072:	bf14      	ite	ne
 8004074:	2301      	movne	r3, #1
 8004076:	2300      	moveq	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	e008      	b.n	800408e <HAL_TIM_PWM_Start+0x9e>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b01      	cmp	r3, #1
 8004086:	bf14      	ite	ne
 8004088:	2301      	movne	r3, #1
 800408a:	2300      	moveq	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e0a6      	b.n	80041e4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d104      	bne.n	80040a6 <HAL_TIM_PWM_Start+0xb6>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040a4:	e023      	b.n	80040ee <HAL_TIM_PWM_Start+0xfe>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d104      	bne.n	80040b6 <HAL_TIM_PWM_Start+0xc6>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040b4:	e01b      	b.n	80040ee <HAL_TIM_PWM_Start+0xfe>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_PWM_Start+0xd6>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040c4:	e013      	b.n	80040ee <HAL_TIM_PWM_Start+0xfe>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b0c      	cmp	r3, #12
 80040ca:	d104      	bne.n	80040d6 <HAL_TIM_PWM_Start+0xe6>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040d4:	e00b      	b.n	80040ee <HAL_TIM_PWM_Start+0xfe>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d104      	bne.n	80040e6 <HAL_TIM_PWM_Start+0xf6>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040e4:	e003      	b.n	80040ee <HAL_TIM_PWM_Start+0xfe>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2202      	movs	r2, #2
 80040ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2201      	movs	r2, #1
 80040f4:	6839      	ldr	r1, [r7, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 f9dc 	bl	80054b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a3a      	ldr	r2, [pc, #232]	@ (80041ec <HAL_TIM_PWM_Start+0x1fc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d018      	beq.n	8004138 <HAL_TIM_PWM_Start+0x148>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a39      	ldr	r2, [pc, #228]	@ (80041f0 <HAL_TIM_PWM_Start+0x200>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d013      	beq.n	8004138 <HAL_TIM_PWM_Start+0x148>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a37      	ldr	r2, [pc, #220]	@ (80041f4 <HAL_TIM_PWM_Start+0x204>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00e      	beq.n	8004138 <HAL_TIM_PWM_Start+0x148>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a36      	ldr	r2, [pc, #216]	@ (80041f8 <HAL_TIM_PWM_Start+0x208>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d009      	beq.n	8004138 <HAL_TIM_PWM_Start+0x148>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a34      	ldr	r2, [pc, #208]	@ (80041fc <HAL_TIM_PWM_Start+0x20c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d004      	beq.n	8004138 <HAL_TIM_PWM_Start+0x148>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a33      	ldr	r2, [pc, #204]	@ (8004200 <HAL_TIM_PWM_Start+0x210>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d101      	bne.n	800413c <HAL_TIM_PWM_Start+0x14c>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <HAL_TIM_PWM_Start+0x14e>
 800413c:	2300      	movs	r3, #0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d007      	beq.n	8004152 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004150:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a25      	ldr	r2, [pc, #148]	@ (80041ec <HAL_TIM_PWM_Start+0x1fc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d022      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x1b2>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004164:	d01d      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x1b2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a26      	ldr	r2, [pc, #152]	@ (8004204 <HAL_TIM_PWM_Start+0x214>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d018      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x1b2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a24      	ldr	r2, [pc, #144]	@ (8004208 <HAL_TIM_PWM_Start+0x218>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d013      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x1b2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a23      	ldr	r2, [pc, #140]	@ (800420c <HAL_TIM_PWM_Start+0x21c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00e      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x1b2>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a19      	ldr	r2, [pc, #100]	@ (80041f0 <HAL_TIM_PWM_Start+0x200>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d009      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x1b2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a18      	ldr	r2, [pc, #96]	@ (80041f4 <HAL_TIM_PWM_Start+0x204>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d004      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x1b2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a18      	ldr	r2, [pc, #96]	@ (8004200 <HAL_TIM_PWM_Start+0x210>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d115      	bne.n	80041ce <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	4b19      	ldr	r3, [pc, #100]	@ (8004210 <HAL_TIM_PWM_Start+0x220>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b06      	cmp	r3, #6
 80041b2:	d015      	beq.n	80041e0 <HAL_TIM_PWM_Start+0x1f0>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ba:	d011      	beq.n	80041e0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041cc:	e008      	b.n	80041e0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0201 	orr.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	e000      	b.n	80041e2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40012c00 	.word	0x40012c00
 80041f0:	40013400 	.word	0x40013400
 80041f4:	40014000 	.word	0x40014000
 80041f8:	40014400 	.word	0x40014400
 80041fc:	40014800 	.word	0x40014800
 8004200:	40015000 	.word	0x40015000
 8004204:	40000400 	.word	0x40000400
 8004208:	40000800 	.word	0x40000800
 800420c:	40000c00 	.word	0x40000c00
 8004210:	00010007 	.word	0x00010007

08004214 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e097      	b.n	8004358 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d106      	bne.n	8004242 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7fd ff63 	bl	8002108 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2202      	movs	r2, #2
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004258:	f023 0307 	bic.w	r3, r3, #7
 800425c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3304      	adds	r3, #4
 8004266:	4619      	mov	r1, r3
 8004268:	4610      	mov	r0, r2
 800426a:	f000 fca9 	bl	8004bc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004296:	f023 0303 	bic.w	r3, r3, #3
 800429a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	4313      	orrs	r3, r2
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80042b4:	f023 030c 	bic.w	r3, r3, #12
 80042b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	4313      	orrs	r3, r2
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	011a      	lsls	r2, r3, #4
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	031b      	lsls	r3, r3, #12
 80042e4:	4313      	orrs	r3, r2
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80042f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80042fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	4313      	orrs	r3, r2
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004370:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004378:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004380:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004388:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d110      	bne.n	80043b2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004390:	7bfb      	ldrb	r3, [r7, #15]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d102      	bne.n	800439c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004396:	7b7b      	ldrb	r3, [r7, #13]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d001      	beq.n	80043a0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e069      	b.n	8004474 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043b0:	e031      	b.n	8004416 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d110      	bne.n	80043da <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043b8:	7bbb      	ldrb	r3, [r7, #14]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d102      	bne.n	80043c4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043be:	7b3b      	ldrb	r3, [r7, #12]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d001      	beq.n	80043c8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e055      	b.n	8004474 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043d8:	e01d      	b.n	8004416 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043da:	7bfb      	ldrb	r3, [r7, #15]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d108      	bne.n	80043f2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043e0:	7bbb      	ldrb	r3, [r7, #14]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d105      	bne.n	80043f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043e6:	7b7b      	ldrb	r3, [r7, #13]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d102      	bne.n	80043f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043ec:	7b3b      	ldrb	r3, [r7, #12]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d001      	beq.n	80043f6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e03e      	b.n	8004474 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2202      	movs	r2, #2
 80043fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2202      	movs	r2, #2
 8004402:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2202      	movs	r2, #2
 800440a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2202      	movs	r2, #2
 8004412:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_TIM_Encoder_Start+0xc4>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b04      	cmp	r3, #4
 8004420:	d008      	beq.n	8004434 <HAL_TIM_Encoder_Start+0xd4>
 8004422:	e00f      	b.n	8004444 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2201      	movs	r2, #1
 800442a:	2100      	movs	r1, #0
 800442c:	4618      	mov	r0, r3
 800442e:	f001 f841 	bl	80054b4 <TIM_CCxChannelCmd>
      break;
 8004432:	e016      	b.n	8004462 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2201      	movs	r2, #1
 800443a:	2104      	movs	r1, #4
 800443c:	4618      	mov	r0, r3
 800443e:	f001 f839 	bl	80054b4 <TIM_CCxChannelCmd>
      break;
 8004442:	e00e      	b.n	8004462 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2201      	movs	r2, #1
 800444a:	2100      	movs	r1, #0
 800444c:	4618      	mov	r0, r3
 800444e:	f001 f831 	bl	80054b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2201      	movs	r2, #1
 8004458:	2104      	movs	r1, #4
 800445a:	4618      	mov	r0, r3
 800445c:	f001 f82a 	bl	80054b4 <TIM_CCxChannelCmd>
      break;
 8004460:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0201 	orr.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d020      	beq.n	80044e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d01b      	beq.n	80044e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f06f 0202 	mvn.w	r2, #2
 80044b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fb5c 	bl	8004b84 <HAL_TIM_IC_CaptureCallback>
 80044cc:	e005      	b.n	80044da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fb4e 	bl	8004b70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fb5f 	bl	8004b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d020      	beq.n	800452c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d01b      	beq.n	800452c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0204 	mvn.w	r2, #4
 80044fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2202      	movs	r2, #2
 8004502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fb36 	bl	8004b84 <HAL_TIM_IC_CaptureCallback>
 8004518:	e005      	b.n	8004526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fb28 	bl	8004b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fb39 	bl	8004b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d020      	beq.n	8004578 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01b      	beq.n	8004578 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0208 	mvn.w	r2, #8
 8004548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2204      	movs	r2, #4
 800454e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fb10 	bl	8004b84 <HAL_TIM_IC_CaptureCallback>
 8004564:	e005      	b.n	8004572 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fb02 	bl	8004b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fb13 	bl	8004b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	d020      	beq.n	80045c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f003 0310 	and.w	r3, r3, #16
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01b      	beq.n	80045c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0210 	mvn.w	r2, #16
 8004594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2208      	movs	r2, #8
 800459a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 faea 	bl	8004b84 <HAL_TIM_IC_CaptureCallback>
 80045b0:	e005      	b.n	80045be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fadc 	bl	8004b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 faed 	bl	8004b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00c      	beq.n	80045e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d007      	beq.n	80045e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0201 	mvn.w	r2, #1
 80045e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fd f874 	bl	80016d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d104      	bne.n	80045fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00c      	beq.n	8004616 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004602:	2b00      	cmp	r3, #0
 8004604:	d007      	beq.n	8004616 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800460e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f001 f8a9 	bl	8005768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00c      	beq.n	800463a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f001 f8a1 	bl	800577c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00c      	beq.n	800465e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d007      	beq.n	800465e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 faa7 	bl	8004bac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00c      	beq.n	8004682 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f06f 0220 	mvn.w	r2, #32
 800467a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f001 f869 	bl	8005754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00c      	beq.n	80046a6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800469e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f001 f875 	bl	8005790 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00c      	beq.n	80046ca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d007      	beq.n	80046ca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80046c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f001 f86d 	bl	80057a4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00c      	beq.n	80046ee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d007      	beq.n	80046ee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80046e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f001 f865 	bl	80057b8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00c      	beq.n	8004712 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800470a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f001 f85d 	bl	80057cc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004736:	2302      	movs	r3, #2
 8004738:	e0ff      	b.n	800493a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b14      	cmp	r3, #20
 8004746:	f200 80f0 	bhi.w	800492a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800474a:	a201      	add	r2, pc, #4	@ (adr r2, 8004750 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004750:	080047a5 	.word	0x080047a5
 8004754:	0800492b 	.word	0x0800492b
 8004758:	0800492b 	.word	0x0800492b
 800475c:	0800492b 	.word	0x0800492b
 8004760:	080047e5 	.word	0x080047e5
 8004764:	0800492b 	.word	0x0800492b
 8004768:	0800492b 	.word	0x0800492b
 800476c:	0800492b 	.word	0x0800492b
 8004770:	08004827 	.word	0x08004827
 8004774:	0800492b 	.word	0x0800492b
 8004778:	0800492b 	.word	0x0800492b
 800477c:	0800492b 	.word	0x0800492b
 8004780:	08004867 	.word	0x08004867
 8004784:	0800492b 	.word	0x0800492b
 8004788:	0800492b 	.word	0x0800492b
 800478c:	0800492b 	.word	0x0800492b
 8004790:	080048a9 	.word	0x080048a9
 8004794:	0800492b 	.word	0x0800492b
 8004798:	0800492b 	.word	0x0800492b
 800479c:	0800492b 	.word	0x0800492b
 80047a0:	080048e9 	.word	0x080048e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fabc 	bl	8004d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0208 	orr.w	r2, r2, #8
 80047be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0204 	bic.w	r2, r2, #4
 80047ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6999      	ldr	r1, [r3, #24]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	619a      	str	r2, [r3, #24]
      break;
 80047e2:	e0a5      	b.n	8004930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fb36 	bl	8004e5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800480e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6999      	ldr	r1, [r3, #24]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	021a      	lsls	r2, r3, #8
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	619a      	str	r2, [r3, #24]
      break;
 8004824:	e084      	b.n	8004930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68b9      	ldr	r1, [r7, #8]
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fba9 	bl	8004f84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69da      	ldr	r2, [r3, #28]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0208 	orr.w	r2, r2, #8
 8004840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0204 	bic.w	r2, r2, #4
 8004850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69d9      	ldr	r1, [r3, #28]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	61da      	str	r2, [r3, #28]
      break;
 8004864:	e064      	b.n	8004930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68b9      	ldr	r1, [r7, #8]
 800486c:	4618      	mov	r0, r3
 800486e:	f000 fc1b 	bl	80050a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69d9      	ldr	r1, [r3, #28]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	021a      	lsls	r2, r3, #8
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	61da      	str	r2, [r3, #28]
      break;
 80048a6:	e043      	b.n	8004930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68b9      	ldr	r1, [r7, #8]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fc8e 	bl	80051d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0208 	orr.w	r2, r2, #8
 80048c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0204 	bic.w	r2, r2, #4
 80048d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80048e6:	e023      	b.n	8004930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fcd8 	bl	80052a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004902:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004912:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	021a      	lsls	r2, r3, #8
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004928:	e002      	b.n	8004930 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	75fb      	strb	r3, [r7, #23]
      break;
 800492e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004938:	7dfb      	ldrb	r3, [r7, #23]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop

08004944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_TIM_ConfigClockSource+0x1c>
 800495c:	2302      	movs	r3, #2
 800495e:	e0f6      	b.n	8004b4e <HAL_TIM_ConfigClockSource+0x20a>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800497e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800498a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a6f      	ldr	r2, [pc, #444]	@ (8004b58 <HAL_TIM_ConfigClockSource+0x214>)
 800499a:	4293      	cmp	r3, r2
 800499c:	f000 80c1 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 80049a0:	4a6d      	ldr	r2, [pc, #436]	@ (8004b58 <HAL_TIM_ConfigClockSource+0x214>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	f200 80c6 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 80049a8:	4a6c      	ldr	r2, [pc, #432]	@ (8004b5c <HAL_TIM_ConfigClockSource+0x218>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	f000 80b9 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 80049b0:	4a6a      	ldr	r2, [pc, #424]	@ (8004b5c <HAL_TIM_ConfigClockSource+0x218>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	f200 80be 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 80049b8:	4a69      	ldr	r2, [pc, #420]	@ (8004b60 <HAL_TIM_ConfigClockSource+0x21c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	f000 80b1 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 80049c0:	4a67      	ldr	r2, [pc, #412]	@ (8004b60 <HAL_TIM_ConfigClockSource+0x21c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	f200 80b6 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 80049c8:	4a66      	ldr	r2, [pc, #408]	@ (8004b64 <HAL_TIM_ConfigClockSource+0x220>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	f000 80a9 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 80049d0:	4a64      	ldr	r2, [pc, #400]	@ (8004b64 <HAL_TIM_ConfigClockSource+0x220>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	f200 80ae 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 80049d8:	4a63      	ldr	r2, [pc, #396]	@ (8004b68 <HAL_TIM_ConfigClockSource+0x224>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	f000 80a1 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 80049e0:	4a61      	ldr	r2, [pc, #388]	@ (8004b68 <HAL_TIM_ConfigClockSource+0x224>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	f200 80a6 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 80049e8:	4a60      	ldr	r2, [pc, #384]	@ (8004b6c <HAL_TIM_ConfigClockSource+0x228>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	f000 8099 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 80049f0:	4a5e      	ldr	r2, [pc, #376]	@ (8004b6c <HAL_TIM_ConfigClockSource+0x228>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	f200 809e 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 80049f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80049fc:	f000 8091 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 8004a00:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004a04:	f200 8096 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a0c:	f000 8089 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 8004a10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a14:	f200 808e 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a1c:	d03e      	beq.n	8004a9c <HAL_TIM_ConfigClockSource+0x158>
 8004a1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a22:	f200 8087 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a2a:	f000 8086 	beq.w	8004b3a <HAL_TIM_ConfigClockSource+0x1f6>
 8004a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a32:	d87f      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a34:	2b70      	cmp	r3, #112	@ 0x70
 8004a36:	d01a      	beq.n	8004a6e <HAL_TIM_ConfigClockSource+0x12a>
 8004a38:	2b70      	cmp	r3, #112	@ 0x70
 8004a3a:	d87b      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a3c:	2b60      	cmp	r3, #96	@ 0x60
 8004a3e:	d050      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x19e>
 8004a40:	2b60      	cmp	r3, #96	@ 0x60
 8004a42:	d877      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a44:	2b50      	cmp	r3, #80	@ 0x50
 8004a46:	d03c      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x17e>
 8004a48:	2b50      	cmp	r3, #80	@ 0x50
 8004a4a:	d873      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a4c:	2b40      	cmp	r3, #64	@ 0x40
 8004a4e:	d058      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x1be>
 8004a50:	2b40      	cmp	r3, #64	@ 0x40
 8004a52:	d86f      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a54:	2b30      	cmp	r3, #48	@ 0x30
 8004a56:	d064      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 8004a58:	2b30      	cmp	r3, #48	@ 0x30
 8004a5a:	d86b      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d060      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	d867      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d05c      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d05a      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 8004a6c:	e062      	b.n	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a7e:	f000 fcf9 	bl	8005474 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	609a      	str	r2, [r3, #8]
      break;
 8004a9a:	e04f      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004aac:	f000 fce2 	bl	8005474 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004abe:	609a      	str	r2, [r3, #8]
      break;
 8004ac0:	e03c      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f000 fc54 	bl	800537c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2150      	movs	r1, #80	@ 0x50
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fcad 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 8004ae0:	e02c      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aee:	461a      	mov	r2, r3
 8004af0:	f000 fc73 	bl	80053da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2160      	movs	r1, #96	@ 0x60
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fc9d 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 8004b00:	e01c      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f000 fc34 	bl	800537c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2140      	movs	r1, #64	@ 0x40
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fc8d 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 8004b20:	e00c      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	f000 fc84 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 8004b32:	e003      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
      break;
 8004b38:	e000      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004b3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	00100070 	.word	0x00100070
 8004b5c:	00100060 	.word	0x00100060
 8004b60:	00100050 	.word	0x00100050
 8004b64:	00100040 	.word	0x00100040
 8004b68:	00100030 	.word	0x00100030
 8004b6c:	00100020 	.word	0x00100020

08004b70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a4c      	ldr	r2, [pc, #304]	@ (8004d04 <TIM_Base_SetConfig+0x144>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d017      	beq.n	8004c08 <TIM_Base_SetConfig+0x48>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bde:	d013      	beq.n	8004c08 <TIM_Base_SetConfig+0x48>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a49      	ldr	r2, [pc, #292]	@ (8004d08 <TIM_Base_SetConfig+0x148>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00f      	beq.n	8004c08 <TIM_Base_SetConfig+0x48>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a48      	ldr	r2, [pc, #288]	@ (8004d0c <TIM_Base_SetConfig+0x14c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00b      	beq.n	8004c08 <TIM_Base_SetConfig+0x48>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a47      	ldr	r2, [pc, #284]	@ (8004d10 <TIM_Base_SetConfig+0x150>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d007      	beq.n	8004c08 <TIM_Base_SetConfig+0x48>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a46      	ldr	r2, [pc, #280]	@ (8004d14 <TIM_Base_SetConfig+0x154>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d003      	beq.n	8004c08 <TIM_Base_SetConfig+0x48>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a45      	ldr	r2, [pc, #276]	@ (8004d18 <TIM_Base_SetConfig+0x158>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d108      	bne.n	8004c1a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a39      	ldr	r2, [pc, #228]	@ (8004d04 <TIM_Base_SetConfig+0x144>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d023      	beq.n	8004c6a <TIM_Base_SetConfig+0xaa>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c28:	d01f      	beq.n	8004c6a <TIM_Base_SetConfig+0xaa>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a36      	ldr	r2, [pc, #216]	@ (8004d08 <TIM_Base_SetConfig+0x148>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d01b      	beq.n	8004c6a <TIM_Base_SetConfig+0xaa>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a35      	ldr	r2, [pc, #212]	@ (8004d0c <TIM_Base_SetConfig+0x14c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d017      	beq.n	8004c6a <TIM_Base_SetConfig+0xaa>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a34      	ldr	r2, [pc, #208]	@ (8004d10 <TIM_Base_SetConfig+0x150>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d013      	beq.n	8004c6a <TIM_Base_SetConfig+0xaa>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a33      	ldr	r2, [pc, #204]	@ (8004d14 <TIM_Base_SetConfig+0x154>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00f      	beq.n	8004c6a <TIM_Base_SetConfig+0xaa>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a33      	ldr	r2, [pc, #204]	@ (8004d1c <TIM_Base_SetConfig+0x15c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00b      	beq.n	8004c6a <TIM_Base_SetConfig+0xaa>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a32      	ldr	r2, [pc, #200]	@ (8004d20 <TIM_Base_SetConfig+0x160>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d007      	beq.n	8004c6a <TIM_Base_SetConfig+0xaa>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a31      	ldr	r2, [pc, #196]	@ (8004d24 <TIM_Base_SetConfig+0x164>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d003      	beq.n	8004c6a <TIM_Base_SetConfig+0xaa>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a2c      	ldr	r2, [pc, #176]	@ (8004d18 <TIM_Base_SetConfig+0x158>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d108      	bne.n	8004c7c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a18      	ldr	r2, [pc, #96]	@ (8004d04 <TIM_Base_SetConfig+0x144>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d013      	beq.n	8004cd0 <TIM_Base_SetConfig+0x110>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a1a      	ldr	r2, [pc, #104]	@ (8004d14 <TIM_Base_SetConfig+0x154>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00f      	beq.n	8004cd0 <TIM_Base_SetConfig+0x110>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a1a      	ldr	r2, [pc, #104]	@ (8004d1c <TIM_Base_SetConfig+0x15c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00b      	beq.n	8004cd0 <TIM_Base_SetConfig+0x110>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a19      	ldr	r2, [pc, #100]	@ (8004d20 <TIM_Base_SetConfig+0x160>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d007      	beq.n	8004cd0 <TIM_Base_SetConfig+0x110>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a18      	ldr	r2, [pc, #96]	@ (8004d24 <TIM_Base_SetConfig+0x164>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d003      	beq.n	8004cd0 <TIM_Base_SetConfig+0x110>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a13      	ldr	r2, [pc, #76]	@ (8004d18 <TIM_Base_SetConfig+0x158>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d103      	bne.n	8004cd8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d105      	bne.n	8004cf6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f023 0201 	bic.w	r2, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	611a      	str	r2, [r3, #16]
  }
}
 8004cf6:	bf00      	nop
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40012c00 	.word	0x40012c00
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40000800 	.word	0x40000800
 8004d10:	40000c00 	.word	0x40000c00
 8004d14:	40013400 	.word	0x40013400
 8004d18:	40015000 	.word	0x40015000
 8004d1c:	40014000 	.word	0x40014000
 8004d20:	40014400 	.word	0x40014400
 8004d24:	40014800 	.word	0x40014800

08004d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	f023 0201 	bic.w	r2, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0303 	bic.w	r3, r3, #3
 8004d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f023 0302 	bic.w	r3, r3, #2
 8004d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a30      	ldr	r2, [pc, #192]	@ (8004e44 <TIM_OC1_SetConfig+0x11c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d013      	beq.n	8004db0 <TIM_OC1_SetConfig+0x88>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a2f      	ldr	r2, [pc, #188]	@ (8004e48 <TIM_OC1_SetConfig+0x120>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00f      	beq.n	8004db0 <TIM_OC1_SetConfig+0x88>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a2e      	ldr	r2, [pc, #184]	@ (8004e4c <TIM_OC1_SetConfig+0x124>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00b      	beq.n	8004db0 <TIM_OC1_SetConfig+0x88>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a2d      	ldr	r2, [pc, #180]	@ (8004e50 <TIM_OC1_SetConfig+0x128>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d007      	beq.n	8004db0 <TIM_OC1_SetConfig+0x88>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a2c      	ldr	r2, [pc, #176]	@ (8004e54 <TIM_OC1_SetConfig+0x12c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d003      	beq.n	8004db0 <TIM_OC1_SetConfig+0x88>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a2b      	ldr	r2, [pc, #172]	@ (8004e58 <TIM_OC1_SetConfig+0x130>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d10c      	bne.n	8004dca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f023 0308 	bic.w	r3, r3, #8
 8004db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f023 0304 	bic.w	r3, r3, #4
 8004dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8004e44 <TIM_OC1_SetConfig+0x11c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <TIM_OC1_SetConfig+0xd2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e48 <TIM_OC1_SetConfig+0x120>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00f      	beq.n	8004dfa <TIM_OC1_SetConfig+0xd2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8004e4c <TIM_OC1_SetConfig+0x124>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00b      	beq.n	8004dfa <TIM_OC1_SetConfig+0xd2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a1a      	ldr	r2, [pc, #104]	@ (8004e50 <TIM_OC1_SetConfig+0x128>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d007      	beq.n	8004dfa <TIM_OC1_SetConfig+0xd2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a19      	ldr	r2, [pc, #100]	@ (8004e54 <TIM_OC1_SetConfig+0x12c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d003      	beq.n	8004dfa <TIM_OC1_SetConfig+0xd2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a18      	ldr	r2, [pc, #96]	@ (8004e58 <TIM_OC1_SetConfig+0x130>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d111      	bne.n	8004e1e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	621a      	str	r2, [r3, #32]
}
 8004e38:	bf00      	nop
 8004e3a:	371c      	adds	r7, #28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	40012c00 	.word	0x40012c00
 8004e48:	40013400 	.word	0x40013400
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40014400 	.word	0x40014400
 8004e54:	40014800 	.word	0x40014800
 8004e58:	40015000 	.word	0x40015000

08004e5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f023 0210 	bic.w	r2, r3, #16
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f023 0320 	bic.w	r3, r3, #32
 8004eaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a2c      	ldr	r2, [pc, #176]	@ (8004f6c <TIM_OC2_SetConfig+0x110>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d007      	beq.n	8004ed0 <TIM_OC2_SetConfig+0x74>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a2b      	ldr	r2, [pc, #172]	@ (8004f70 <TIM_OC2_SetConfig+0x114>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d003      	beq.n	8004ed0 <TIM_OC2_SetConfig+0x74>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a2a      	ldr	r2, [pc, #168]	@ (8004f74 <TIM_OC2_SetConfig+0x118>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d10d      	bne.n	8004eec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a1f      	ldr	r2, [pc, #124]	@ (8004f6c <TIM_OC2_SetConfig+0x110>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d013      	beq.n	8004f1c <TIM_OC2_SetConfig+0xc0>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8004f70 <TIM_OC2_SetConfig+0x114>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00f      	beq.n	8004f1c <TIM_OC2_SetConfig+0xc0>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a1e      	ldr	r2, [pc, #120]	@ (8004f78 <TIM_OC2_SetConfig+0x11c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00b      	beq.n	8004f1c <TIM_OC2_SetConfig+0xc0>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a1d      	ldr	r2, [pc, #116]	@ (8004f7c <TIM_OC2_SetConfig+0x120>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d007      	beq.n	8004f1c <TIM_OC2_SetConfig+0xc0>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8004f80 <TIM_OC2_SetConfig+0x124>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <TIM_OC2_SetConfig+0xc0>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a17      	ldr	r2, [pc, #92]	@ (8004f74 <TIM_OC2_SetConfig+0x118>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d113      	bne.n	8004f44 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40012c00 	.word	0x40012c00
 8004f70:	40013400 	.word	0x40013400
 8004f74:	40015000 	.word	0x40015000
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800

08004f84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0303 	bic.w	r3, r3, #3
 8004fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8005090 <TIM_OC3_SetConfig+0x10c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d007      	beq.n	8004ff6 <TIM_OC3_SetConfig+0x72>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a2a      	ldr	r2, [pc, #168]	@ (8005094 <TIM_OC3_SetConfig+0x110>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d003      	beq.n	8004ff6 <TIM_OC3_SetConfig+0x72>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a29      	ldr	r2, [pc, #164]	@ (8005098 <TIM_OC3_SetConfig+0x114>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d10d      	bne.n	8005012 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a1e      	ldr	r2, [pc, #120]	@ (8005090 <TIM_OC3_SetConfig+0x10c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d013      	beq.n	8005042 <TIM_OC3_SetConfig+0xbe>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a1d      	ldr	r2, [pc, #116]	@ (8005094 <TIM_OC3_SetConfig+0x110>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00f      	beq.n	8005042 <TIM_OC3_SetConfig+0xbe>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a1d      	ldr	r2, [pc, #116]	@ (800509c <TIM_OC3_SetConfig+0x118>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00b      	beq.n	8005042 <TIM_OC3_SetConfig+0xbe>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a1c      	ldr	r2, [pc, #112]	@ (80050a0 <TIM_OC3_SetConfig+0x11c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d007      	beq.n	8005042 <TIM_OC3_SetConfig+0xbe>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1b      	ldr	r2, [pc, #108]	@ (80050a4 <TIM_OC3_SetConfig+0x120>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d003      	beq.n	8005042 <TIM_OC3_SetConfig+0xbe>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a16      	ldr	r2, [pc, #88]	@ (8005098 <TIM_OC3_SetConfig+0x114>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d113      	bne.n	800506a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	621a      	str	r2, [r3, #32]
}
 8005084:	bf00      	nop
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	40012c00 	.word	0x40012c00
 8005094:	40013400 	.word	0x40013400
 8005098:	40015000 	.word	0x40015000
 800509c:	40014000 	.word	0x40014000
 80050a0:	40014400 	.word	0x40014400
 80050a4:	40014800 	.word	0x40014800

080050a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	021b      	lsls	r3, r3, #8
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	031b      	lsls	r3, r3, #12
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a2c      	ldr	r2, [pc, #176]	@ (80051b8 <TIM_OC4_SetConfig+0x110>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d007      	beq.n	800511c <TIM_OC4_SetConfig+0x74>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a2b      	ldr	r2, [pc, #172]	@ (80051bc <TIM_OC4_SetConfig+0x114>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d003      	beq.n	800511c <TIM_OC4_SetConfig+0x74>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a2a      	ldr	r2, [pc, #168]	@ (80051c0 <TIM_OC4_SetConfig+0x118>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d10d      	bne.n	8005138 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	031b      	lsls	r3, r3, #12
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005136:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a1f      	ldr	r2, [pc, #124]	@ (80051b8 <TIM_OC4_SetConfig+0x110>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d013      	beq.n	8005168 <TIM_OC4_SetConfig+0xc0>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a1e      	ldr	r2, [pc, #120]	@ (80051bc <TIM_OC4_SetConfig+0x114>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00f      	beq.n	8005168 <TIM_OC4_SetConfig+0xc0>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a1e      	ldr	r2, [pc, #120]	@ (80051c4 <TIM_OC4_SetConfig+0x11c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00b      	beq.n	8005168 <TIM_OC4_SetConfig+0xc0>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a1d      	ldr	r2, [pc, #116]	@ (80051c8 <TIM_OC4_SetConfig+0x120>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d007      	beq.n	8005168 <TIM_OC4_SetConfig+0xc0>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a1c      	ldr	r2, [pc, #112]	@ (80051cc <TIM_OC4_SetConfig+0x124>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_OC4_SetConfig+0xc0>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a17      	ldr	r2, [pc, #92]	@ (80051c0 <TIM_OC4_SetConfig+0x118>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d113      	bne.n	8005190 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800516e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005176:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	019b      	lsls	r3, r3, #6
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	019b      	lsls	r3, r3, #6
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	621a      	str	r2, [r3, #32]
}
 80051aa:	bf00      	nop
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40012c00 	.word	0x40012c00
 80051bc:	40013400 	.word	0x40013400
 80051c0:	40015000 	.word	0x40015000
 80051c4:	40014000 	.word	0x40014000
 80051c8:	40014400 	.word	0x40014400
 80051cc:	40014800 	.word	0x40014800

080051d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005214:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	041b      	lsls	r3, r3, #16
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a19      	ldr	r2, [pc, #100]	@ (800528c <TIM_OC5_SetConfig+0xbc>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <TIM_OC5_SetConfig+0x82>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a18      	ldr	r2, [pc, #96]	@ (8005290 <TIM_OC5_SetConfig+0xc0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00f      	beq.n	8005252 <TIM_OC5_SetConfig+0x82>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a17      	ldr	r2, [pc, #92]	@ (8005294 <TIM_OC5_SetConfig+0xc4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00b      	beq.n	8005252 <TIM_OC5_SetConfig+0x82>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a16      	ldr	r2, [pc, #88]	@ (8005298 <TIM_OC5_SetConfig+0xc8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d007      	beq.n	8005252 <TIM_OC5_SetConfig+0x82>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a15      	ldr	r2, [pc, #84]	@ (800529c <TIM_OC5_SetConfig+0xcc>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d003      	beq.n	8005252 <TIM_OC5_SetConfig+0x82>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a14      	ldr	r2, [pc, #80]	@ (80052a0 <TIM_OC5_SetConfig+0xd0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d109      	bne.n	8005266 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005258:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	621a      	str	r2, [r3, #32]
}
 8005280:	bf00      	nop
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40012c00 	.word	0x40012c00
 8005290:	40013400 	.word	0x40013400
 8005294:	40014000 	.word	0x40014000
 8005298:	40014400 	.word	0x40014400
 800529c:	40014800 	.word	0x40014800
 80052a0:	40015000 	.word	0x40015000

080052a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	051b      	lsls	r3, r3, #20
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005364 <TIM_OC6_SetConfig+0xc0>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d013      	beq.n	8005328 <TIM_OC6_SetConfig+0x84>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a19      	ldr	r2, [pc, #100]	@ (8005368 <TIM_OC6_SetConfig+0xc4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00f      	beq.n	8005328 <TIM_OC6_SetConfig+0x84>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a18      	ldr	r2, [pc, #96]	@ (800536c <TIM_OC6_SetConfig+0xc8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00b      	beq.n	8005328 <TIM_OC6_SetConfig+0x84>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a17      	ldr	r2, [pc, #92]	@ (8005370 <TIM_OC6_SetConfig+0xcc>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d007      	beq.n	8005328 <TIM_OC6_SetConfig+0x84>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a16      	ldr	r2, [pc, #88]	@ (8005374 <TIM_OC6_SetConfig+0xd0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_OC6_SetConfig+0x84>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a15      	ldr	r2, [pc, #84]	@ (8005378 <TIM_OC6_SetConfig+0xd4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d109      	bne.n	800533c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800532e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	029b      	lsls	r3, r3, #10
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40012c00 	.word	0x40012c00
 8005368:	40013400 	.word	0x40013400
 800536c:	40014000 	.word	0x40014000
 8005370:	40014400 	.word	0x40014400
 8005374:	40014800 	.word	0x40014800
 8005378:	40015000 	.word	0x40015000

0800537c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	f023 0201 	bic.w	r2, r3, #1
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f023 030a 	bic.w	r3, r3, #10
 80053b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	621a      	str	r2, [r3, #32]
}
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053da:	b480      	push	{r7}
 80053dc:	b087      	sub	sp, #28
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	f023 0210 	bic.w	r2, r3, #16
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005404:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	031b      	lsls	r3, r3, #12
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005416:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800543a:	b480      	push	{r7}
 800543c:	b085      	sub	sp, #20
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005454:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	f043 0307 	orr.w	r3, r3, #7
 8005460:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	609a      	str	r2, [r3, #8]
}
 8005468:	bf00      	nop
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800548e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	021a      	lsls	r2, r3, #8
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	431a      	orrs	r2, r3
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4313      	orrs	r3, r2
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	609a      	str	r2, [r3, #8]
}
 80054a8:	bf00      	nop
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	2201      	movs	r2, #1
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a1a      	ldr	r2, [r3, #32]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	43db      	mvns	r3, r3
 80054d6:	401a      	ands	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a1a      	ldr	r2, [r3, #32]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 031f 	and.w	r3, r3, #31
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ec:	431a      	orrs	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	621a      	str	r2, [r3, #32]
}
 80054f2:	bf00      	nop
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005514:	2302      	movs	r3, #2
 8005516:	e074      	b.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a34      	ldr	r2, [pc, #208]	@ (8005610 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d009      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a33      	ldr	r2, [pc, #204]	@ (8005614 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d004      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a31      	ldr	r2, [pc, #196]	@ (8005618 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d108      	bne.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800555c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800556e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a21      	ldr	r2, [pc, #132]	@ (8005610 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d022      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005598:	d01d      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1f      	ldr	r2, [pc, #124]	@ (800561c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d018      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005620 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d013      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005624 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00e      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a15      	ldr	r2, [pc, #84]	@ (8005614 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d009      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a18      	ldr	r2, [pc, #96]	@ (8005628 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d004      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a11      	ldr	r2, [pc, #68]	@ (8005618 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d10c      	bne.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40013400 	.word	0x40013400
 8005618:	40015000 	.word	0x40015000
 800561c:	40000400 	.word	0x40000400
 8005620:	40000800 	.word	0x40000800
 8005624:	40000c00 	.word	0x40000c00
 8005628:	40014000 	.word	0x40014000

0800562c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005640:	2b01      	cmp	r3, #1
 8005642:	d101      	bne.n	8005648 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005644:	2302      	movs	r3, #2
 8005646:	e078      	b.n	800573a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	4313      	orrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	041b      	lsls	r3, r3, #16
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005748 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d009      	beq.n	80056ee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1b      	ldr	r2, [pc, #108]	@ (800574c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d004      	beq.n	80056ee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a19      	ldr	r2, [pc, #100]	@ (8005750 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d11c      	bne.n	8005728 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f8:	051b      	lsls	r3, r3, #20
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	4313      	orrs	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40012c00 	.word	0x40012c00
 800574c:	40013400 	.word	0x40013400
 8005750:	40015000 	.word	0x40015000

08005754 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e042      	b.n	8005878 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d106      	bne.n	800580a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7fc fbcf 	bl	8001fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2224      	movs	r2, #36	@ 0x24
 800580e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0201 	bic.w	r2, r2, #1
 8005820:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fb24 	bl	8005e78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f825 	bl	8005880 <UART_SetConfig>
 8005836:	4603      	mov	r3, r0
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e01b      	b.n	8005878 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800584e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800585e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fba3 	bl	8005fbc <UART_CheckIdleState>
 8005876:	4603      	mov	r3, r0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005884:	b08c      	sub	sp, #48	@ 0x30
 8005886:	af00      	add	r7, sp, #0
 8005888:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	431a      	orrs	r2, r3
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	431a      	orrs	r2, r3
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4baa      	ldr	r3, [pc, #680]	@ (8005b58 <UART_SetConfig+0x2d8>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	6812      	ldr	r2, [r2, #0]
 80058b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058b8:	430b      	orrs	r3, r1
 80058ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a9f      	ldr	r2, [pc, #636]	@ (8005b5c <UART_SetConfig+0x2dc>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d004      	beq.n	80058ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058e8:	4313      	orrs	r3, r2
 80058ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80058f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005900:	430b      	orrs	r3, r1
 8005902:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590a:	f023 010f 	bic.w	r1, r3, #15
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a90      	ldr	r2, [pc, #576]	@ (8005b60 <UART_SetConfig+0x2e0>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d125      	bne.n	8005970 <UART_SetConfig+0xf0>
 8005924:	4b8f      	ldr	r3, [pc, #572]	@ (8005b64 <UART_SetConfig+0x2e4>)
 8005926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	2b03      	cmp	r3, #3
 8005930:	d81a      	bhi.n	8005968 <UART_SetConfig+0xe8>
 8005932:	a201      	add	r2, pc, #4	@ (adr r2, 8005938 <UART_SetConfig+0xb8>)
 8005934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005938:	08005949 	.word	0x08005949
 800593c:	08005959 	.word	0x08005959
 8005940:	08005951 	.word	0x08005951
 8005944:	08005961 	.word	0x08005961
 8005948:	2301      	movs	r3, #1
 800594a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800594e:	e116      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005950:	2302      	movs	r3, #2
 8005952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005956:	e112      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005958:	2304      	movs	r3, #4
 800595a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800595e:	e10e      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005960:	2308      	movs	r3, #8
 8005962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005966:	e10a      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005968:	2310      	movs	r3, #16
 800596a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800596e:	e106      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a7c      	ldr	r2, [pc, #496]	@ (8005b68 <UART_SetConfig+0x2e8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d138      	bne.n	80059ec <UART_SetConfig+0x16c>
 800597a:	4b7a      	ldr	r3, [pc, #488]	@ (8005b64 <UART_SetConfig+0x2e4>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005980:	f003 030c 	and.w	r3, r3, #12
 8005984:	2b0c      	cmp	r3, #12
 8005986:	d82d      	bhi.n	80059e4 <UART_SetConfig+0x164>
 8005988:	a201      	add	r2, pc, #4	@ (adr r2, 8005990 <UART_SetConfig+0x110>)
 800598a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598e:	bf00      	nop
 8005990:	080059c5 	.word	0x080059c5
 8005994:	080059e5 	.word	0x080059e5
 8005998:	080059e5 	.word	0x080059e5
 800599c:	080059e5 	.word	0x080059e5
 80059a0:	080059d5 	.word	0x080059d5
 80059a4:	080059e5 	.word	0x080059e5
 80059a8:	080059e5 	.word	0x080059e5
 80059ac:	080059e5 	.word	0x080059e5
 80059b0:	080059cd 	.word	0x080059cd
 80059b4:	080059e5 	.word	0x080059e5
 80059b8:	080059e5 	.word	0x080059e5
 80059bc:	080059e5 	.word	0x080059e5
 80059c0:	080059dd 	.word	0x080059dd
 80059c4:	2300      	movs	r3, #0
 80059c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ca:	e0d8      	b.n	8005b7e <UART_SetConfig+0x2fe>
 80059cc:	2302      	movs	r3, #2
 80059ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059d2:	e0d4      	b.n	8005b7e <UART_SetConfig+0x2fe>
 80059d4:	2304      	movs	r3, #4
 80059d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059da:	e0d0      	b.n	8005b7e <UART_SetConfig+0x2fe>
 80059dc:	2308      	movs	r3, #8
 80059de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059e2:	e0cc      	b.n	8005b7e <UART_SetConfig+0x2fe>
 80059e4:	2310      	movs	r3, #16
 80059e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ea:	e0c8      	b.n	8005b7e <UART_SetConfig+0x2fe>
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a5e      	ldr	r2, [pc, #376]	@ (8005b6c <UART_SetConfig+0x2ec>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d125      	bne.n	8005a42 <UART_SetConfig+0x1c2>
 80059f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005b64 <UART_SetConfig+0x2e4>)
 80059f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a00:	2b30      	cmp	r3, #48	@ 0x30
 8005a02:	d016      	beq.n	8005a32 <UART_SetConfig+0x1b2>
 8005a04:	2b30      	cmp	r3, #48	@ 0x30
 8005a06:	d818      	bhi.n	8005a3a <UART_SetConfig+0x1ba>
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	d00a      	beq.n	8005a22 <UART_SetConfig+0x1a2>
 8005a0c:	2b20      	cmp	r3, #32
 8005a0e:	d814      	bhi.n	8005a3a <UART_SetConfig+0x1ba>
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <UART_SetConfig+0x19a>
 8005a14:	2b10      	cmp	r3, #16
 8005a16:	d008      	beq.n	8005a2a <UART_SetConfig+0x1aa>
 8005a18:	e00f      	b.n	8005a3a <UART_SetConfig+0x1ba>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a20:	e0ad      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005a22:	2302      	movs	r3, #2
 8005a24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a28:	e0a9      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005a2a:	2304      	movs	r3, #4
 8005a2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a30:	e0a5      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005a32:	2308      	movs	r3, #8
 8005a34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a38:	e0a1      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005a3a:	2310      	movs	r3, #16
 8005a3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a40:	e09d      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a4a      	ldr	r2, [pc, #296]	@ (8005b70 <UART_SetConfig+0x2f0>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d125      	bne.n	8005a98 <UART_SetConfig+0x218>
 8005a4c:	4b45      	ldr	r3, [pc, #276]	@ (8005b64 <UART_SetConfig+0x2e4>)
 8005a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a56:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a58:	d016      	beq.n	8005a88 <UART_SetConfig+0x208>
 8005a5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a5c:	d818      	bhi.n	8005a90 <UART_SetConfig+0x210>
 8005a5e:	2b80      	cmp	r3, #128	@ 0x80
 8005a60:	d00a      	beq.n	8005a78 <UART_SetConfig+0x1f8>
 8005a62:	2b80      	cmp	r3, #128	@ 0x80
 8005a64:	d814      	bhi.n	8005a90 <UART_SetConfig+0x210>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <UART_SetConfig+0x1f0>
 8005a6a:	2b40      	cmp	r3, #64	@ 0x40
 8005a6c:	d008      	beq.n	8005a80 <UART_SetConfig+0x200>
 8005a6e:	e00f      	b.n	8005a90 <UART_SetConfig+0x210>
 8005a70:	2300      	movs	r3, #0
 8005a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a76:	e082      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a7e:	e07e      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005a80:	2304      	movs	r3, #4
 8005a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a86:	e07a      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005a88:	2308      	movs	r3, #8
 8005a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a8e:	e076      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005a90:	2310      	movs	r3, #16
 8005a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a96:	e072      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a35      	ldr	r2, [pc, #212]	@ (8005b74 <UART_SetConfig+0x2f4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d12a      	bne.n	8005af8 <UART_SetConfig+0x278>
 8005aa2:	4b30      	ldr	r3, [pc, #192]	@ (8005b64 <UART_SetConfig+0x2e4>)
 8005aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ab0:	d01a      	beq.n	8005ae8 <UART_SetConfig+0x268>
 8005ab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ab6:	d81b      	bhi.n	8005af0 <UART_SetConfig+0x270>
 8005ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005abc:	d00c      	beq.n	8005ad8 <UART_SetConfig+0x258>
 8005abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ac2:	d815      	bhi.n	8005af0 <UART_SetConfig+0x270>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <UART_SetConfig+0x250>
 8005ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005acc:	d008      	beq.n	8005ae0 <UART_SetConfig+0x260>
 8005ace:	e00f      	b.n	8005af0 <UART_SetConfig+0x270>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ad6:	e052      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ade:	e04e      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ae6:	e04a      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005ae8:	2308      	movs	r3, #8
 8005aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aee:	e046      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005af0:	2310      	movs	r3, #16
 8005af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005af6:	e042      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a17      	ldr	r2, [pc, #92]	@ (8005b5c <UART_SetConfig+0x2dc>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d13a      	bne.n	8005b78 <UART_SetConfig+0x2f8>
 8005b02:	4b18      	ldr	r3, [pc, #96]	@ (8005b64 <UART_SetConfig+0x2e4>)
 8005b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b10:	d01a      	beq.n	8005b48 <UART_SetConfig+0x2c8>
 8005b12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b16:	d81b      	bhi.n	8005b50 <UART_SetConfig+0x2d0>
 8005b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b1c:	d00c      	beq.n	8005b38 <UART_SetConfig+0x2b8>
 8005b1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b22:	d815      	bhi.n	8005b50 <UART_SetConfig+0x2d0>
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <UART_SetConfig+0x2b0>
 8005b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b2c:	d008      	beq.n	8005b40 <UART_SetConfig+0x2c0>
 8005b2e:	e00f      	b.n	8005b50 <UART_SetConfig+0x2d0>
 8005b30:	2300      	movs	r3, #0
 8005b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b36:	e022      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b3e:	e01e      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005b40:	2304      	movs	r3, #4
 8005b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b46:	e01a      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005b48:	2308      	movs	r3, #8
 8005b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b4e:	e016      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005b50:	2310      	movs	r3, #16
 8005b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b56:	e012      	b.n	8005b7e <UART_SetConfig+0x2fe>
 8005b58:	cfff69f3 	.word	0xcfff69f3
 8005b5c:	40008000 	.word	0x40008000
 8005b60:	40013800 	.word	0x40013800
 8005b64:	40021000 	.word	0x40021000
 8005b68:	40004400 	.word	0x40004400
 8005b6c:	40004800 	.word	0x40004800
 8005b70:	40004c00 	.word	0x40004c00
 8005b74:	40005000 	.word	0x40005000
 8005b78:	2310      	movs	r3, #16
 8005b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4aae      	ldr	r2, [pc, #696]	@ (8005e3c <UART_SetConfig+0x5bc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	f040 8097 	bne.w	8005cb8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b8e:	2b08      	cmp	r3, #8
 8005b90:	d823      	bhi.n	8005bda <UART_SetConfig+0x35a>
 8005b92:	a201      	add	r2, pc, #4	@ (adr r2, 8005b98 <UART_SetConfig+0x318>)
 8005b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b98:	08005bbd 	.word	0x08005bbd
 8005b9c:	08005bdb 	.word	0x08005bdb
 8005ba0:	08005bc5 	.word	0x08005bc5
 8005ba4:	08005bdb 	.word	0x08005bdb
 8005ba8:	08005bcb 	.word	0x08005bcb
 8005bac:	08005bdb 	.word	0x08005bdb
 8005bb0:	08005bdb 	.word	0x08005bdb
 8005bb4:	08005bdb 	.word	0x08005bdb
 8005bb8:	08005bd3 	.word	0x08005bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bbc:	f7fd fdc0 	bl	8003740 <HAL_RCC_GetPCLK1Freq>
 8005bc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bc2:	e010      	b.n	8005be6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bc4:	4b9e      	ldr	r3, [pc, #632]	@ (8005e40 <UART_SetConfig+0x5c0>)
 8005bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bc8:	e00d      	b.n	8005be6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bca:	f7fd fd4b 	bl	8003664 <HAL_RCC_GetSysClockFreq>
 8005bce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bd0:	e009      	b.n	8005be6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bd8:	e005      	b.n	8005be6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005be4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 8130 	beq.w	8005e4e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf2:	4a94      	ldr	r2, [pc, #592]	@ (8005e44 <UART_SetConfig+0x5c4>)
 8005bf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	4613      	mov	r3, r2
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	4413      	add	r3, r2
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d305      	bcc.n	8005c1e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d903      	bls.n	8005c26 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c24:	e113      	b.n	8005e4e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	2200      	movs	r2, #0
 8005c2a:	60bb      	str	r3, [r7, #8]
 8005c2c:	60fa      	str	r2, [r7, #12]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c32:	4a84      	ldr	r2, [pc, #528]	@ (8005e44 <UART_SetConfig+0x5c4>)
 8005c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	603b      	str	r3, [r7, #0]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c48:	f7fa ffb4 	bl	8000bb4 <__aeabi_uldivmod>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4610      	mov	r0, r2
 8005c52:	4619      	mov	r1, r3
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	020b      	lsls	r3, r1, #8
 8005c5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c62:	0202      	lsls	r2, r0, #8
 8005c64:	6979      	ldr	r1, [r7, #20]
 8005c66:	6849      	ldr	r1, [r1, #4]
 8005c68:	0849      	lsrs	r1, r1, #1
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	460c      	mov	r4, r1
 8005c6e:	4605      	mov	r5, r0
 8005c70:	eb12 0804 	adds.w	r8, r2, r4
 8005c74:	eb43 0905 	adc.w	r9, r3, r5
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	469a      	mov	sl, r3
 8005c80:	4693      	mov	fp, r2
 8005c82:	4652      	mov	r2, sl
 8005c84:	465b      	mov	r3, fp
 8005c86:	4640      	mov	r0, r8
 8005c88:	4649      	mov	r1, r9
 8005c8a:	f7fa ff93 	bl	8000bb4 <__aeabi_uldivmod>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4613      	mov	r3, r2
 8005c94:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c9c:	d308      	bcc.n	8005cb0 <UART_SetConfig+0x430>
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ca4:	d204      	bcs.n	8005cb0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6a3a      	ldr	r2, [r7, #32]
 8005cac:	60da      	str	r2, [r3, #12]
 8005cae:	e0ce      	b.n	8005e4e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005cb6:	e0ca      	b.n	8005e4e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cc0:	d166      	bne.n	8005d90 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005cc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d827      	bhi.n	8005d1a <UART_SetConfig+0x49a>
 8005cca:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd0 <UART_SetConfig+0x450>)
 8005ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd0:	08005cf5 	.word	0x08005cf5
 8005cd4:	08005cfd 	.word	0x08005cfd
 8005cd8:	08005d05 	.word	0x08005d05
 8005cdc:	08005d1b 	.word	0x08005d1b
 8005ce0:	08005d0b 	.word	0x08005d0b
 8005ce4:	08005d1b 	.word	0x08005d1b
 8005ce8:	08005d1b 	.word	0x08005d1b
 8005cec:	08005d1b 	.word	0x08005d1b
 8005cf0:	08005d13 	.word	0x08005d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cf4:	f7fd fd24 	bl	8003740 <HAL_RCC_GetPCLK1Freq>
 8005cf8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cfa:	e014      	b.n	8005d26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cfc:	f7fd fd36 	bl	800376c <HAL_RCC_GetPCLK2Freq>
 8005d00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d02:	e010      	b.n	8005d26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d04:	4b4e      	ldr	r3, [pc, #312]	@ (8005e40 <UART_SetConfig+0x5c0>)
 8005d06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d08:	e00d      	b.n	8005d26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d0a:	f7fd fcab 	bl	8003664 <HAL_RCC_GetSysClockFreq>
 8005d0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d10:	e009      	b.n	8005d26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d18:	e005      	b.n	8005d26 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005d24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 8090 	beq.w	8005e4e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d32:	4a44      	ldr	r2, [pc, #272]	@ (8005e44 <UART_SetConfig+0x5c4>)
 8005d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d40:	005a      	lsls	r2, r3, #1
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	085b      	lsrs	r3, r3, #1
 8005d48:	441a      	add	r2, r3
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	2b0f      	cmp	r3, #15
 8005d58:	d916      	bls.n	8005d88 <UART_SetConfig+0x508>
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d60:	d212      	bcs.n	8005d88 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f023 030f 	bic.w	r3, r3, #15
 8005d6a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	085b      	lsrs	r3, r3, #1
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	8bfb      	ldrh	r3, [r7, #30]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	8bfa      	ldrh	r2, [r7, #30]
 8005d84:	60da      	str	r2, [r3, #12]
 8005d86:	e062      	b.n	8005e4e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d8e:	e05e      	b.n	8005e4e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d828      	bhi.n	8005dea <UART_SetConfig+0x56a>
 8005d98:	a201      	add	r2, pc, #4	@ (adr r2, 8005da0 <UART_SetConfig+0x520>)
 8005d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9e:	bf00      	nop
 8005da0:	08005dc5 	.word	0x08005dc5
 8005da4:	08005dcd 	.word	0x08005dcd
 8005da8:	08005dd5 	.word	0x08005dd5
 8005dac:	08005deb 	.word	0x08005deb
 8005db0:	08005ddb 	.word	0x08005ddb
 8005db4:	08005deb 	.word	0x08005deb
 8005db8:	08005deb 	.word	0x08005deb
 8005dbc:	08005deb 	.word	0x08005deb
 8005dc0:	08005de3 	.word	0x08005de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dc4:	f7fd fcbc 	bl	8003740 <HAL_RCC_GetPCLK1Freq>
 8005dc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dca:	e014      	b.n	8005df6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dcc:	f7fd fcce 	bl	800376c <HAL_RCC_GetPCLK2Freq>
 8005dd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dd2:	e010      	b.n	8005df6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e40 <UART_SetConfig+0x5c0>)
 8005dd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005dd8:	e00d      	b.n	8005df6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dda:	f7fd fc43 	bl	8003664 <HAL_RCC_GetSysClockFreq>
 8005dde:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005de0:	e009      	b.n	8005df6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005de6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005de8:	e005      	b.n	8005df6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005df4:	bf00      	nop
    }

    if (pclk != 0U)
 8005df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d028      	beq.n	8005e4e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e00:	4a10      	ldr	r2, [pc, #64]	@ (8005e44 <UART_SetConfig+0x5c4>)
 8005e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e06:	461a      	mov	r2, r3
 8005e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	085b      	lsrs	r3, r3, #1
 8005e14:	441a      	add	r2, r3
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	2b0f      	cmp	r3, #15
 8005e24:	d910      	bls.n	8005e48 <UART_SetConfig+0x5c8>
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e2c:	d20c      	bcs.n	8005e48 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60da      	str	r2, [r3, #12]
 8005e38:	e009      	b.n	8005e4e <UART_SetConfig+0x5ce>
 8005e3a:	bf00      	nop
 8005e3c:	40008000 	.word	0x40008000
 8005e40:	00f42400 	.word	0x00f42400
 8005e44:	08006544 	.word	0x08006544
      }
      else
      {
        ret = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2200      	movs	r2, #0
 8005e62:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2200      	movs	r2, #0
 8005e68:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e6a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3730      	adds	r7, #48	@ 0x30
 8005e72:	46bd      	mov	sp, r7
 8005e74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00a      	beq.n	8005ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0c:	f003 0310 	and.w	r3, r3, #16
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00a      	beq.n	8005f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d01a      	beq.n	8005f8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f76:	d10a      	bne.n	8005f8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	605a      	str	r2, [r3, #4]
  }
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b098      	sub	sp, #96	@ 0x60
 8005fc0:	af02      	add	r7, sp, #8
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fcc:	f7fc fa0a 	bl	80023e4 <HAL_GetTick>
 8005fd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0308 	and.w	r3, r3, #8
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d12f      	bne.n	8006040 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fe0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f88e 	bl	8006110 <UART_WaitOnFlagUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d022      	beq.n	8006040 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006002:	e853 3f00 	ldrex	r3, [r3]
 8006006:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800600a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800600e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006018:	647b      	str	r3, [r7, #68]	@ 0x44
 800601a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800601e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006020:	e841 2300 	strex	r3, r2, [r1]
 8006024:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1e6      	bne.n	8005ffa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2220      	movs	r2, #32
 8006030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e063      	b.n	8006108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0304 	and.w	r3, r3, #4
 800604a:	2b04      	cmp	r3, #4
 800604c:	d149      	bne.n	80060e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800604e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006056:	2200      	movs	r2, #0
 8006058:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f857 	bl	8006110 <UART_WaitOnFlagUntilTimeout>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d03c      	beq.n	80060e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	e853 3f00 	ldrex	r3, [r3]
 8006074:	623b      	str	r3, [r7, #32]
   return(result);
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800607c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	461a      	mov	r2, r3
 8006084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006086:	633b      	str	r3, [r7, #48]	@ 0x30
 8006088:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800608c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800608e:	e841 2300 	strex	r3, r2, [r1]
 8006092:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1e6      	bne.n	8006068 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3308      	adds	r3, #8
 80060a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f023 0301 	bic.w	r3, r3, #1
 80060b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3308      	adds	r3, #8
 80060b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060ba:	61fa      	str	r2, [r7, #28]
 80060bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	69b9      	ldr	r1, [r7, #24]
 80060c0:	69fa      	ldr	r2, [r7, #28]
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	617b      	str	r3, [r7, #20]
   return(result);
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e5      	bne.n	800609a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e012      	b.n	8006108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3758      	adds	r7, #88	@ 0x58
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	4613      	mov	r3, r2
 800611e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006120:	e04f      	b.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006128:	d04b      	beq.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612a:	f7fc f95b 	bl	80023e4 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	429a      	cmp	r2, r3
 8006138:	d302      	bcc.n	8006140 <UART_WaitOnFlagUntilTimeout+0x30>
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e04e      	b.n	80061e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b00      	cmp	r3, #0
 8006150:	d037      	beq.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b80      	cmp	r3, #128	@ 0x80
 8006156:	d034      	beq.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b40      	cmp	r3, #64	@ 0x40
 800615c:	d031      	beq.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b08      	cmp	r3, #8
 800616a:	d110      	bne.n	800618e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2208      	movs	r2, #8
 8006172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 f838 	bl	80061ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2208      	movs	r2, #8
 800617e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e029      	b.n	80061e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800619c:	d111      	bne.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 f81e 	bl	80061ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e00f      	b.n	80061e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4013      	ands	r3, r2
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	bf0c      	ite	eq
 80061d2:	2301      	moveq	r3, #1
 80061d4:	2300      	movne	r3, #0
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	79fb      	ldrb	r3, [r7, #7]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d0a0      	beq.n	8006122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b095      	sub	sp, #84	@ 0x54
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006202:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006210:	643b      	str	r3, [r7, #64]	@ 0x40
 8006212:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006216:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800621e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e6      	bne.n	80061f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3308      	adds	r3, #8
 800622a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	61fb      	str	r3, [r7, #28]
   return(result);
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800623a:	f023 0301 	bic.w	r3, r3, #1
 800623e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3308      	adds	r3, #8
 8006246:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006248:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800624a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800624e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006250:	e841 2300 	strex	r3, r2, [r1]
 8006254:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e3      	bne.n	8006224 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006260:	2b01      	cmp	r3, #1
 8006262:	d118      	bne.n	8006296 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	60bb      	str	r3, [r7, #8]
   return(result);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f023 0310 	bic.w	r3, r3, #16
 8006278:	647b      	str	r3, [r7, #68]	@ 0x44
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006282:	61bb      	str	r3, [r7, #24]
 8006284:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	6979      	ldr	r1, [r7, #20]
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	613b      	str	r3, [r7, #16]
   return(result);
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e6      	bne.n	8006264 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80062aa:	bf00      	nop
 80062ac:	3754      	adds	r7, #84	@ 0x54
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b085      	sub	sp, #20
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_UARTEx_DisableFifoMode+0x16>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e027      	b.n	800631c <HAL_UARTEx_DisableFifoMode+0x66>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2224      	movs	r2, #36	@ 0x24
 80062d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0201 	bic.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80062fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2220      	movs	r2, #32
 800630e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3714      	adds	r7, #20
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800633c:	2302      	movs	r3, #2
 800633e:	e02d      	b.n	800639c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2224      	movs	r2, #36	@ 0x24
 800634c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0201 	bic.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f84f 	bl	8006420 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2220      	movs	r2, #32
 800638e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e02d      	b.n	8006418 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2224      	movs	r2, #36	@ 0x24
 80063c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0201 	bic.w	r2, r2, #1
 80063e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f811 	bl	8006420 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800642c:	2b00      	cmp	r3, #0
 800642e:	d108      	bne.n	8006442 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006440:	e031      	b.n	80064a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006442:	2308      	movs	r3, #8
 8006444:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006446:	2308      	movs	r3, #8
 8006448:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	0e5b      	lsrs	r3, r3, #25
 8006452:	b2db      	uxtb	r3, r3
 8006454:	f003 0307 	and.w	r3, r3, #7
 8006458:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	0f5b      	lsrs	r3, r3, #29
 8006462:	b2db      	uxtb	r3, r3
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800646a:	7bbb      	ldrb	r3, [r7, #14]
 800646c:	7b3a      	ldrb	r2, [r7, #12]
 800646e:	4911      	ldr	r1, [pc, #68]	@ (80064b4 <UARTEx_SetNbDataToProcess+0x94>)
 8006470:	5c8a      	ldrb	r2, [r1, r2]
 8006472:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006476:	7b3a      	ldrb	r2, [r7, #12]
 8006478:	490f      	ldr	r1, [pc, #60]	@ (80064b8 <UARTEx_SetNbDataToProcess+0x98>)
 800647a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800647c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006480:	b29a      	uxth	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006488:	7bfb      	ldrb	r3, [r7, #15]
 800648a:	7b7a      	ldrb	r2, [r7, #13]
 800648c:	4909      	ldr	r1, [pc, #36]	@ (80064b4 <UARTEx_SetNbDataToProcess+0x94>)
 800648e:	5c8a      	ldrb	r2, [r1, r2]
 8006490:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006494:	7b7a      	ldrb	r2, [r7, #13]
 8006496:	4908      	ldr	r1, [pc, #32]	@ (80064b8 <UARTEx_SetNbDataToProcess+0x98>)
 8006498:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800649a:	fb93 f3f2 	sdiv	r3, r3, r2
 800649e:	b29a      	uxth	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80064a6:	bf00      	nop
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	0800655c 	.word	0x0800655c
 80064b8:	08006564 	.word	0x08006564

080064bc <memset>:
 80064bc:	4402      	add	r2, r0
 80064be:	4603      	mov	r3, r0
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d100      	bne.n	80064c6 <memset+0xa>
 80064c4:	4770      	bx	lr
 80064c6:	f803 1b01 	strb.w	r1, [r3], #1
 80064ca:	e7f9      	b.n	80064c0 <memset+0x4>

080064cc <__libc_init_array>:
 80064cc:	b570      	push	{r4, r5, r6, lr}
 80064ce:	4d0d      	ldr	r5, [pc, #52]	@ (8006504 <__libc_init_array+0x38>)
 80064d0:	4c0d      	ldr	r4, [pc, #52]	@ (8006508 <__libc_init_array+0x3c>)
 80064d2:	1b64      	subs	r4, r4, r5
 80064d4:	10a4      	asrs	r4, r4, #2
 80064d6:	2600      	movs	r6, #0
 80064d8:	42a6      	cmp	r6, r4
 80064da:	d109      	bne.n	80064f0 <__libc_init_array+0x24>
 80064dc:	4d0b      	ldr	r5, [pc, #44]	@ (800650c <__libc_init_array+0x40>)
 80064de:	4c0c      	ldr	r4, [pc, #48]	@ (8006510 <__libc_init_array+0x44>)
 80064e0:	f000 f818 	bl	8006514 <_init>
 80064e4:	1b64      	subs	r4, r4, r5
 80064e6:	10a4      	asrs	r4, r4, #2
 80064e8:	2600      	movs	r6, #0
 80064ea:	42a6      	cmp	r6, r4
 80064ec:	d105      	bne.n	80064fa <__libc_init_array+0x2e>
 80064ee:	bd70      	pop	{r4, r5, r6, pc}
 80064f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f4:	4798      	blx	r3
 80064f6:	3601      	adds	r6, #1
 80064f8:	e7ee      	b.n	80064d8 <__libc_init_array+0xc>
 80064fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80064fe:	4798      	blx	r3
 8006500:	3601      	adds	r6, #1
 8006502:	e7f2      	b.n	80064ea <__libc_init_array+0x1e>
 8006504:	08006574 	.word	0x08006574
 8006508:	08006574 	.word	0x08006574
 800650c:	08006574 	.word	0x08006574
 8006510:	08006578 	.word	0x08006578

08006514 <_init>:
 8006514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006516:	bf00      	nop
 8006518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800651a:	bc08      	pop	{r3}
 800651c:	469e      	mov	lr, r3
 800651e:	4770      	bx	lr

08006520 <_fini>:
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006522:	bf00      	nop
 8006524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006526:	bc08      	pop	{r3}
 8006528:	469e      	mov	lr, r3
 800652a:	4770      	bx	lr
